{"version":3,"file":"ApolloCodegenFrontend.bundle.js","sources":["../JavaScript/node_modules/graphql/jsutils/isObjectLike.mjs","../JavaScript/node_modules/graphql/language/location.mjs","../JavaScript/node_modules/graphql/language/printLocation.mjs","../JavaScript/node_modules/graphql/error/GraphQLError.mjs","../JavaScript/node_modules/graphql/error/syntaxError.mjs","../JavaScript/node_modules/graphql/language/kinds.mjs","../JavaScript/node_modules/graphql/language/ast.mjs","../JavaScript/node_modules/graphql/language/tokenKind.mjs","../JavaScript/node_modules/graphql/jsutils/inspect.mjs","../JavaScript/node_modules/graphql/jsutils/devAssert.mjs","../JavaScript/node_modules/graphql/jsutils/instanceOf.mjs","../JavaScript/node_modules/graphql/language/source.mjs","../JavaScript/node_modules/graphql/language/directiveLocation.mjs","../JavaScript/node_modules/graphql/language/blockString.mjs","../JavaScript/node_modules/graphql/language/lexer.mjs","../JavaScript/node_modules/graphql/language/parser.mjs","../JavaScript/node_modules/graphql/language/visitor.mjs","../JavaScript/node_modules/graphql/polyfills/objectValues.mjs","../JavaScript/node_modules/graphql/utilities/assertValidName.mjs","../JavaScript/node_modules/graphql/polyfills/objectEntries.mjs","../JavaScript/node_modules/graphql/jsutils/keyMap.mjs","../JavaScript/node_modules/graphql/jsutils/mapValue.mjs","../JavaScript/node_modules/graphql/jsutils/toObjMap.mjs","../JavaScript/node_modules/graphql/jsutils/keyValMap.mjs","../JavaScript/node_modules/graphql/jsutils/didYouMean.mjs","../JavaScript/node_modules/graphql/jsutils/identityFunc.mjs","../JavaScript/node_modules/graphql/jsutils/suggestionList.mjs","../JavaScript/node_modules/graphql/language/printer.mjs","../JavaScript/node_modules/graphql/jsutils/invariant.mjs","../JavaScript/node_modules/graphql/utilities/valueFromASTUntyped.mjs","../JavaScript/node_modules/graphql/type/definition.mjs","../JavaScript/node_modules/graphql/utilities/typeComparators.mjs","../JavaScript/node_modules/graphql/type/scalars.mjs","../JavaScript/node_modules/graphql/utilities/astFromValue.mjs","../JavaScript/node_modules/graphql/jsutils/isCollection.mjs","../JavaScript/node_modules/graphql/type/introspection.mjs","../JavaScript/node_modules/graphql/type/directives.mjs","../JavaScript/node_modules/graphql/type/schema.mjs","../JavaScript/node_modules/graphql/type/validate.mjs","../JavaScript/node_modules/graphql/error/locatedError.mjs","../JavaScript/node_modules/graphql/utilities/typeFromAST.mjs","../JavaScript/node_modules/graphql/utilities/TypeInfo.mjs","../JavaScript/node_modules/graphql/language/predicates.mjs","../JavaScript/node_modules/graphql/validation/rules/KnownTypeNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/NoUnusedFragmentsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/KnownDirectivesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueDirectivesPerLocationRule.mjs","../JavaScript/node_modules/graphql/validation/rules/KnownArgumentNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueArgumentNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/ValuesOfCorrectTypeRule.mjs","../JavaScript/node_modules/graphql/validation/rules/ProvidedRequiredArgumentsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/VariablesInAllowedPositionRule.mjs","../JavaScript/node_modules/graphql/validation/rules/OverlappingFieldsCanBeMergedRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueInputFieldNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueFieldDefinitionNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/PossibleTypeExtensionsRule.mjs","../JavaScript/node_modules/graphql/validation/specifiedRules.mjs","../JavaScript/node_modules/graphql/validation/rules/ExecutableDefinitionsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueOperationNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/LoneAnonymousOperationRule.mjs","../JavaScript/node_modules/graphql/validation/rules/SingleFieldSubscriptionsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/FragmentsOnCompositeTypesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/VariablesAreInputTypesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/ScalarLeafsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/FieldsOnCorrectTypeRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueFragmentNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/KnownFragmentNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/PossibleFragmentSpreadsRule.mjs","../JavaScript/node_modules/graphql/validation/rules/NoFragmentCyclesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueVariableNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/NoUndefinedVariablesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/NoUnusedVariablesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/LoneSchemaDefinitionRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueOperationTypesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueTypeNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueEnumValueNamesRule.mjs","../JavaScript/node_modules/graphql/validation/rules/UniqueDirectiveNamesRule.mjs","../JavaScript/node_modules/graphql/validation/ValidationContext.mjs","../JavaScript/node_modules/graphql/validation/validate.mjs","../JavaScript/node_modules/graphql/utilities/valueFromAST.mjs","../JavaScript/node_modules/graphql/execution/values.mjs","../JavaScript/node_modules/graphql/utilities/buildClientSchema.mjs","../JavaScript/node_modules/graphql/utilities/extendSchema.mjs","../JavaScript/node_modules/graphql/utilities/buildASTSchema.mjs","../JavaScript/src/validationRules.ts","../JavaScript/src/utilities/graphql.ts","../JavaScript/src/utilities/predicates.ts","../JavaScript/src/compiler/values.ts","../JavaScript/src/compiler/index.ts","../JavaScript/node_modules/graphql/utilities/getOperationRootType.mjs","../JavaScript/src/index.ts","../JavaScript/node_modules/graphql/utilities/concatAST.mjs"],"sourcesContent":["/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport default function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  const lineRegexp = /\\r\\n|[\\n\\r]/g;\n  let line = 1;\n  let column = position + 1;\n  let match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line,\n    column\n  };\n}\n","import { getLocation } from \"./location.mjs\";\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(location.source, getLocation(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = whitespace(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return locationStr + printPrefixedLines([[`${lineNum}`, subLines[0]], ...subLines.slice(1, subLineIndex + 1).map(subLine => ['', subLine]), [' ', whitespace(subLineColumnNum - 1) + '^'], ['', subLines[subLineIndex + 1]]]);\n  }\n\n  return locationStr + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [`${lineNum - 1}`, lines[lineIndex - 1]], [`${lineNum}`, locationLine], ['', whitespace(columnNum - 1) + '^'], [`${lineNum + 1}`, lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines.map(([prefix, line]) => leftPad(padLen, prefix) + (line ? ' | ' + line : ' |')).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction leftPad(len, str) {\n  return whitespace(len - str.length) + str;\n}\n","// FIXME:\n// flowlint uninitialized-instance-property:off\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { getLocation } from \"../language/location.mjs\";\nimport { printLocation, printSourceLocation } from \"../language/printLocation.mjs\";\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport class GraphQLError extends Error {\n  /**\n   * A message describing the Error for debugging purposes.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   *\n   * Note: should be treated as readonly, despite invariant usage.\n   */\n\n  /**\n   * An array of { line, column } locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  constructor(message, nodes, source, positions, path, originalError, extensions) {\n    super(message); // Compute list of blame nodes.\n\n    const _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n    let _source = source;\n\n    if (!_source && _nodes) {\n      _source = _nodes[0].loc?.source;\n    }\n\n    let _positions = positions;\n\n    if (!_positions && _nodes) {\n      _positions = _nodes.reduce((list, node) => {\n        if (node.loc) {\n          list.push(node.loc.start);\n        }\n\n        return list;\n      }, []);\n    }\n\n    if (_positions && _positions.length === 0) {\n      _positions = undefined;\n    }\n\n    let _locations;\n\n    if (positions && source) {\n      _locations = positions.map(pos => getLocation(source, pos));\n    } else if (_nodes) {\n      _locations = _nodes.reduce((list, node) => {\n        if (node.loc) {\n          list.push(getLocation(node.loc.source, node.loc.start));\n        }\n\n        return list;\n      }, []);\n    }\n\n    let _extensions = extensions;\n\n    if (_extensions == null && originalError != null) {\n      const originalExtensions = originalError.extensions;\n\n      if (isObjectLike(originalExtensions)) {\n        _extensions = originalExtensions;\n      }\n    }\n\n    Object.defineProperties(this, {\n      name: {\n        value: 'GraphQLError'\n      },\n      message: {\n        value: message,\n        // By being enumerable, JSON.stringify will include `message` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: true,\n        writable: true\n      },\n      locations: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: _locations ?? undefined,\n        // By being enumerable, JSON.stringify will include `locations` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _locations != null\n      },\n      path: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: path ?? undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: path != null\n      },\n      nodes: {\n        value: _nodes ?? undefined\n      },\n      source: {\n        value: _source ?? undefined\n      },\n      positions: {\n        value: _positions ?? undefined\n      },\n      originalError: {\n        value: originalError\n      },\n      extensions: {\n        // Coercing falsy values to undefined ensures they will not be included\n        // in JSON.stringify() when not provided.\n        value: _extensions ?? undefined,\n        // By being enumerable, JSON.stringify will include `path` in the\n        // resulting output. This ensures that the simplest possible GraphQL\n        // service adheres to the spec.\n        enumerable: _extensions != null\n      }\n    }); // Include (non-enumerable) stack trace.\n\n    if (originalError?.stack) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true\n      });\n      return;\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true\n      });\n    }\n  }\n\n  toString() {\n    return printError(this);\n  } // FIXME: workaround to not break chai comparisons, should be remove in v16\n  // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'Object';\n  }\n\n}\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\n\nexport function printError(error) {\n  let output = error.message;\n\n  if (error.nodes) {\n    for (const node of error.nodes) {\n      if (node.loc) {\n        output += '\\n\\n' + printLocation(node.loc);\n      }\n    }\n  } else if (error.source && error.locations) {\n    for (const location of error.locations) {\n      output += '\\n\\n' + printSourceLocation(error.source, location);\n    }\n  }\n\n  return output;\n}\n","import { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [position]);\n}\n","/**\n * The set of allowed kind values for AST nodes.\n */\nexport const Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */\n","/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */\nexport class Location {\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The Token at which this Node begins.\n   */\n\n  /**\n   * The Token at which this Node ends.\n   */\n\n  /**\n   * The Source document the AST represents.\n   */\n  constructor(startToken, endToken, source) {\n    this.start = startToken.start;\n    this.end = endToken.end;\n    this.startToken = startToken;\n    this.endToken = endToken;\n    this.source = source;\n  }\n\n  toJSON() {\n    return {\n      start: this.start,\n      end: this.end\n    };\n  } // @deprecated: Will be removed in v17\n  // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.toJSON();\n  }\n\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */\n\nexport class Token {\n  /**\n   * The kind of Token.\n   */\n\n  /**\n   * The character offset at which this Node begins.\n   */\n\n  /**\n   * The character offset at which this Node ends.\n   */\n\n  /**\n   * The 1-indexed line number on which this Token appears.\n   */\n\n  /**\n   * The 1-indexed column number at which this Token begins.\n   */\n\n  /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   */\n\n  /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */\n  constructor(kind, start, end, line, column, prev, value) {\n    this.kind = kind;\n    this.start = start;\n    this.end = end;\n    this.line = line;\n    this.column = column;\n    this.value = value;\n    this.prev = prev;\n    this.next = null;\n  }\n\n  toJSON() {\n    return {\n      kind: this.kind,\n      value: this.value,\n      line: this.line,\n      column: this.column\n    };\n  } // @deprecated: Will be removed in v17\n  // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  [Symbol.for('nodejs.util.inspect.custom')]() {\n    return this.toJSON();\n  }\n\n}\n/**\n * @internal\n */\n\nexport function isNode(maybeNode) {\n  return maybeNode != null && typeof maybeNode.kind === 'string';\n}\n/**\n * The list of all possible AST node types.\n */\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport const TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n","/* eslint-disable flowtype/no-weak-types */\nconst MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (typeof value) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? `[function ${value.name}]` : '[function]';\n\n    case 'object':\n      if (value === null) {\n        return 'null';\n      }\n\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  const seenValues = [...previouslySeenValues, value];\n\n  if (typeof value.toJSON === 'function') {\n    const jsonValue = value.toJSON(value); // check for infinite recursion\n\n    if (jsonValue !== value) {\n      return typeof jsonValue === 'string' ? jsonValue : formatValue(jsonValue, seenValues);\n    }\n  } else if (Array.isArray(value)) {\n    return formatArray(value, seenValues);\n  }\n\n  return formatObject(value, seenValues);\n}\n\nfunction formatObject(object, seenValues) {\n  const keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  const properties = keys.map(key => {\n    const value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  const remaining = array.length - len;\n  const items = [];\n\n  for (let i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(`... ${remaining} more items`);\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getObjectTag(object) {\n  const tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    const name = object.constructor.name;\n\n    if (typeof name === 'string' && name !== '') {\n      return name;\n    }\n  }\n\n  return tag;\n}\n","export default function devAssert(condition, message) {\n  const booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message);\n  }\n}\n","/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n */\n// See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n// See: https://webpack.js.org/guides/production/\nexport default process.env.NODE_ENV === 'production' ? // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2317')\n// eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  return value instanceof constructor;\n} : // eslint-disable-next-line no-shadow\nfunction instanceOf(value, constructor) {\n  if (value instanceof constructor) {\n    return true;\n  }\n\n  if (value) {\n    const valueClass = value.constructor;\n    const className = constructor.name;\n\n    if (className && valueClass && valueClass.name === className) {\n      throw new Error(`Cannot use ${className} \"${value}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n    }\n  }\n\n  return false;\n};\n","import inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */\nexport class Source {\n  constructor(body, name = 'GraphQL request', locationOffset = {\n    line: 1,\n    column: 1\n  }) {\n    typeof body === 'string' || devAssert(0, `Body must be a string. Received: ${inspect(body)}.`);\n    this.body = body;\n    this.name = name;\n    this.locationOffset = locationOffset;\n    this.locationOffset.line > 0 || devAssert(0, 'line in locationOffset is 1-indexed and must be positive.');\n    this.locationOffset.column > 0 || devAssert(0, 'column in locationOffset is 1-indexed and must be positive.');\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'Source';\n  }\n\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSource(source) {\n  return instanceOf(source, Source);\n}\n","/**\n * The set of allowed directive location values.\n */\nexport const DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */\n","/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  const lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  const commonIndent = getBlockStringIndentation(rawString);\n\n  if (commonIndent !== 0) {\n    for (let i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  let startLine = 0;\n\n  while (startLine < lines.length && isBlank(lines[startLine])) {\n    ++startLine;\n  }\n\n  let endLine = lines.length;\n\n  while (endLine > startLine && isBlank(lines[endLine - 1])) {\n    --endLine;\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.slice(startLine, endLine).join('\\n');\n}\n\nfunction isBlank(str) {\n  for (let i = 0; i < str.length; ++i) {\n    if (str[i] !== ' ' && str[i] !== '\\t') {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @internal\n */\n\n\nexport function getBlockStringIndentation(value) {\n  let isFirstLine = true;\n  let isEmptyLine = true;\n  let indent = 0;\n  let commonIndent = null;\n\n  for (let i = 0; i < value.length; ++i) {\n    switch (value.charCodeAt(i)) {\n      case 13:\n        //  \\r\n        if (value.charCodeAt(i + 1) === 10) {\n          ++i; // skip \\r\\n as one symbol\n        }\n\n      // falls through\n\n      case 10:\n        //  \\n\n        isFirstLine = false;\n        isEmptyLine = true;\n        indent = 0;\n        break;\n\n      case 9: //   \\t\n\n      case 32:\n        //  <space>\n        ++indent;\n        break;\n\n      default:\n        if (isEmptyLine && !isFirstLine && (commonIndent === null || indent < commonIndent)) {\n          commonIndent = indent;\n        }\n\n        isEmptyLine = false;\n    }\n  }\n\n  return commonIndent ?? 0;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */\n\nexport function printBlockString(value, indentation = '', preferMultipleLines = false) {\n  const isSingleLine = value.indexOf('\\n') === -1;\n  const hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  const hasTrailingQuote = value[value.length - 1] === '\"';\n  const hasTrailingSlash = value[value.length - 1] === '\\\\';\n  const printAsMultipleLines = !isSingleLine || hasTrailingQuote || hasTrailingSlash || preferMultipleLines;\n  let result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}\n","import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Token } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { dedentBlockStringValue } from \"./blockString.mjs\";\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0, null);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n\n  advance() {\n    this.lastToken = this.token;\n    const token = this.token = this.lookahead();\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        // Note: next is only mutable during parsing, so we cast to allow this.\n        token = token.next ?? (token.next = readToken(this, token));\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    `\"\\\\u${('00' + code.toString(16).toUpperCase()).slice(-4)}\"`\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  const source = lexer.source;\n  const body = source.body;\n  const bodyLength = body.length;\n  let pos = prev.end;\n\n  while (pos < bodyLength) {\n    const code = body.charCodeAt(pos);\n    const line = lexer.line;\n    const col = 1 + pos - lexer.lineStart; // SourceCharacter\n\n    switch (code) {\n      case 0xfeff: // <BOM>\n\n      case 9: //   \\t\n\n      case 32: //  <space>\n\n      case 44:\n        //  ,\n        ++pos;\n        continue;\n\n      case 10:\n        //  \\n\n        ++pos;\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 13:\n        //  \\r\n        if (body.charCodeAt(pos + 1) === 10) {\n          pos += 2;\n        } else {\n          ++pos;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = pos;\n        continue;\n\n      case 33:\n        //  !\n        return new Token(TokenKind.BANG, pos, pos + 1, line, col, prev);\n\n      case 35:\n        //  #\n        return readComment(source, pos, line, col, prev);\n\n      case 36:\n        //  $\n        return new Token(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n\n      case 38:\n        //  &\n        return new Token(TokenKind.AMP, pos, pos + 1, line, col, prev);\n\n      case 40:\n        //  (\n        return new Token(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n\n      case 41:\n        //  )\n        return new Token(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n\n      case 46:\n        //  .\n        if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n          return new Token(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n        }\n\n        break;\n\n      case 58:\n        //  :\n        return new Token(TokenKind.COLON, pos, pos + 1, line, col, prev);\n\n      case 61:\n        //  =\n        return new Token(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n\n      case 64:\n        //  @\n        return new Token(TokenKind.AT, pos, pos + 1, line, col, prev);\n\n      case 91:\n        //  [\n        return new Token(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n\n      case 93:\n        //  ]\n        return new Token(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n\n      case 123:\n        // {\n        return new Token(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n\n      case 124:\n        // |\n        return new Token(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n\n      case 125:\n        // }\n        return new Token(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n\n      case 34:\n        //  \"\n        if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n          return readBlockString(source, pos, line, col, prev, lexer);\n        }\n\n        return readString(source, pos, line, col, prev);\n\n      case 45: //  -\n\n      case 48: //  0\n\n      case 49: //  1\n\n      case 50: //  2\n\n      case 51: //  3\n\n      case 52: //  4\n\n      case 53: //  5\n\n      case 54: //  6\n\n      case 55: //  7\n\n      case 56: //  8\n\n      case 57:\n        //  9\n        return readNumber(source, pos, code, line, col, prev);\n\n      case 65: //  A\n\n      case 66: //  B\n\n      case 67: //  C\n\n      case 68: //  D\n\n      case 69: //  E\n\n      case 70: //  F\n\n      case 71: //  G\n\n      case 72: //  H\n\n      case 73: //  I\n\n      case 74: //  J\n\n      case 75: //  K\n\n      case 76: //  L\n\n      case 77: //  M\n\n      case 78: //  N\n\n      case 79: //  O\n\n      case 80: //  P\n\n      case 81: //  Q\n\n      case 82: //  R\n\n      case 83: //  S\n\n      case 84: //  T\n\n      case 85: //  U\n\n      case 86: //  V\n\n      case 87: //  W\n\n      case 88: //  X\n\n      case 89: //  Y\n\n      case 90: //  Z\n\n      case 95: //  _\n\n      case 97: //  a\n\n      case 98: //  b\n\n      case 99: //  c\n\n      case 100: // d\n\n      case 101: // e\n\n      case 102: // f\n\n      case 103: // g\n\n      case 104: // h\n\n      case 105: // i\n\n      case 106: // j\n\n      case 107: // k\n\n      case 108: // l\n\n      case 109: // m\n\n      case 110: // n\n\n      case 111: // o\n\n      case 112: // p\n\n      case 113: // q\n\n      case 114: // r\n\n      case 115: // s\n\n      case 116: // t\n\n      case 117: // u\n\n      case 118: // v\n\n      case 119: // w\n\n      case 120: // x\n\n      case 121: // y\n\n      case 122:\n        // z\n        return readName(source, pos, line, col, prev);\n    }\n\n    throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n  }\n\n  const line = lexer.line;\n  const col = 1 + pos - lexer.lineStart;\n  return new Token(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return `Cannot contain the invalid character ${printCharCode(code)}.`;\n  }\n\n  if (code === 39) {\n    // '\n    return 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?';\n  }\n\n  return `Cannot parse the unexpected character ${printCharCode(code)}.`;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  const body = source.body;\n  let code;\n  let position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Token(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  const body = source.body;\n  let code = firstCode;\n  let position = start;\n  let isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, `Invalid number, unexpected digit after 0: ${printCharCode(code)}.`);\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n\n  if (code === 46 || isNameStart(code)) {\n    throw syntaxError(source, position, `Invalid number, expected digit but got: ${printCharCode(code)}.`);\n  }\n\n  return new Token(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  const body = source.body;\n  let position = start;\n  let code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, `Invalid number, expected digit but got: ${printCharCode(code)}.`);\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  const body = source.body;\n  let position = start + 1;\n  let chunkStart = position;\n  let code = 0;\n  let value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Token(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, `Invalid character within String: ${printCharCode(code)}.`);\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          {\n            // uXXXX\n            const charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n            if (charCode < 0) {\n              const invalidSequence = body.slice(position + 1, position + 5);\n              throw syntaxError(source, position, `Invalid character escape sequence: \\\\u${invalidSequence}.`);\n            }\n\n            value += String.fromCharCode(charCode);\n            position += 4;\n            break;\n          }\n\n        default:\n          throw syntaxError(source, position, `Invalid character escape sequence: \\\\${String.fromCharCode(code)}.`);\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  const body = source.body;\n  let position = start + 3;\n  let chunkStart = position;\n  let code = 0;\n  let rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Token(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, `Invalid character within String: ${printCharCode(code)}.`);\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  const body = source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Token(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n} // _ A-Z a-z\n\n\nfunction isNameStart(code) {\n  return code === 95 || code >= 65 && code <= 90 || code >= 97 && code <= 122;\n}\n","import { syntaxError } from \"../error/syntaxError.mjs\";\nimport { Kind } from \"./kinds.mjs\";\nimport { Location } from \"./ast.mjs\";\nimport { TokenKind } from \"./tokenKind.mjs\";\nimport { Source, isSource } from \"./source.mjs\";\nimport { DirectiveLocation } from \"./directiveLocation.mjs\";\nimport { Lexer, isPunctuatorTokenKind } from \"./lexer.mjs\";\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return {\n      kind: Kind.NAME,\n      value: token.value,\n      loc: this.loc(token)\n    };\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n\n  parseDocument() {\n    const start = this._lexer.token;\n    return {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(TokenKind.SOF, this.parseDefinition, TokenKind.EOF),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   */\n\n\n  parseDefinition() {\n    if (this.peek(TokenKind.NAME)) {\n      switch (this._lexer.token.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'schema':\n        case 'scalar':\n        case 'type':\n        case 'interface':\n        case 'union':\n        case 'enum':\n        case 'input':\n        case 'directive':\n          return this.parseTypeSystemDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    } else if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } else if (this.peekDescription()) {\n      return this.parseTypeSystemDefinition();\n    }\n\n    throw this.unexpected();\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: 'query',\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return 'query';\n\n      case 'mutation':\n        return 'mutation';\n\n      case 'subscription':\n        return 'subscription';\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n\n  parseVariableDefinitions() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseVariableDefinition, TokenKind.PAREN_R);\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n\n  parseVariableDefinition() {\n    const start = this._lexer.token;\n    return {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS) ? this.parseValueLiteral(true) : undefined,\n      directives: this.parseDirectives(true),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Variable : $ Name\n   */\n\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * SelectionSet : { Selection+ }\n   */\n\n\n  parseSelectionSet() {\n    const start = this._lexer.token;\n    return {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(TokenKind.BRACE_L, this.parseSelection, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n\n  parseArgument() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(false),\n      loc: this.loc(start)\n    };\n  }\n\n  parseConstArgument() {\n    const start = this._lexer.token;\n    return {\n      kind: Kind.ARGUMENT,\n      name: this.parseName(),\n      value: (this.expectToken(TokenKind.COLON), this.parseValueLiteral(true)),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n\n  parseFragmentDefinition() {\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Experimental support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (this._options?.experimentalFragmentVariables === true) {\n      return {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n        loc: this.loc(start)\n      };\n    }\n\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.INT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return {\n          kind: Kind.FLOAT,\n          value: token.value,\n          loc: this.loc(token)\n        };\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return {\n              kind: Kind.BOOLEAN,\n              value: true,\n              loc: this.loc(token)\n            };\n\n          case 'false':\n            return {\n              kind: Kind.BOOLEAN,\n              value: false,\n              loc: this.loc(token)\n            };\n\n          case 'null':\n            return {\n              kind: Kind.NULL,\n              loc: this.loc(token)\n            };\n\n          default:\n            return {\n              kind: Kind.ENUM,\n              value: token.value,\n              loc: this.loc(token)\n            };\n        }\n\n      case TokenKind.DOLLAR:\n        if (!isConst) {\n          return this.parseVariable();\n        }\n\n        break;\n    }\n\n    throw this.unexpected();\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n      loc: this.loc(token)\n    };\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n\n  parseList(isConst) {\n    const start = this._lexer.token;\n\n    const item = () => this.parseValueLiteral(isConst);\n\n    return {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   */\n\n\n  parseObject(isConst) {\n    const start = this._lexer.token;\n\n    const item = () => this.parseObjectField(isConst);\n\n    return {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n  /**\n   * Directive[Const] : @ Name Arguments[?Const]?\n   */\n\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      type = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = {\n        kind: Kind.LIST_TYPE,\n        type,\n        loc: this.loc(start)\n      };\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n        loc: this.loc(start)\n      };\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n\n  parseNamedType() {\n    const start = this._lexer.token;\n    return {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n      loc: this.loc(start)\n    };\n  } // Implements the parsing rules in the Type Definition section.\n\n  /**\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n\n  parseTypeSystemDefinition() {\n    // Many definitions begin with a description and require a lookahead.\n    const keywordToken = this.peekDescription() ? this._lexer.lookahead() : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   */\n\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseDirectives(true);\n    const operationTypes = this.many(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n    return {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    return {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements') ? this.delimitedMany(TokenKind.AMP, this.parseNamedType) : [];\n  }\n  /**\n   * FieldsDefinition : { FieldDefinition+ }\n   */\n\n\n  parseFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseFieldDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseDirectives(true);\n    return {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n\n  parseArgumentDefs() {\n    return this.optionalMany(TokenKind.PAREN_L, this.parseInputValueDef, TokenKind.PAREN_R);\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseValueLiteral(true);\n    }\n\n    const directives = this.parseDirectives(true);\n    return {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseFieldsDefinition();\n    return {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const types = this.parseUnionMemberTypes();\n    return {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS) ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType) : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const values = this.parseEnumValuesDefinition();\n    return {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   */\n\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseEnumValueDefinition, TokenKind.BRACE_R);\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   *\n   * EnumValue : Name\n   */\n\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    return {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseInputFieldsDefinition();\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   */\n\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(TokenKind.BRACE_L, this.parseInputValueDef, TokenKind.BRACE_R);\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   */\n\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseDirectives(true);\n    const operationTypes = this.optionalMany(TokenKind.BRACE_L, this.parseOperationTypeDefinition, TokenKind.BRACE_R);\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseFieldsDefinition();\n\n    if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseDirectives(true);\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   */\n\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n      loc: this.loc(start)\n    };\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (DirectiveLocation[name.value] !== undefined) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a location object, used to identify the place in the source that created a given parsed object.\n   */\n\n\n  loc(startToken) {\n    if (this._options?.noLocation !== true) {\n      return new Location(startToken, this._lexer.lastToken, this._lexer.source);\n    }\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and return undefined.\n   */\n\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    return undefined;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(this._lexer.source, token.start, `Expected \"${value}\", found ${getTokenDesc(token)}.`);\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n\n  unexpected(atToken) {\n    const token = atToken ?? this._lexer.token;\n    return syntaxError(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport { isNode } from \"./ast.mjs\";\n/**\n * A visitor is provided to visit, it contains the collection of\n * relevant functions to be called during the visitor's traversal.\n */\n\nexport const QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['description', 'directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport const BREAK = Object.freeze({});\n/**\n * visit() will walk through an AST using a depth-first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of the\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node of a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor, visitorKeys = QueryDocumentKeys) {\n  /* eslint-disable no-undef-init */\n  let stack = undefined;\n  let inArray = Array.isArray(root);\n  let keys = [root];\n  let index = -1;\n  let edits = [];\n  let node = undefined;\n  let key = undefined;\n  let parent = undefined;\n  const path = [];\n  const ancestors = [];\n  let newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    const isLeaving = index === keys.length;\n    const isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          const clone = {};\n\n          for (const k of Object.keys(node)) {\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        let editOffset = 0;\n\n        for (let ii = 0; ii < edits.length; ii++) {\n          let editKey = edits[ii][0];\n          const editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    let result;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error(`Invalid AST Node: ${inspect(node)}.`);\n      }\n\n      const visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray,\n        index,\n        keys,\n        edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] ?? [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\nexport function visitInParallel(visitors) {\n  const skipping = new Array(visitors.length);\n  return {\n    enter(node) {\n      for (let i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          const fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            const result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n\n    leave(node) {\n      for (let i = 0; i < visitors.length; i++) {\n        if (skipping[i] == null) {\n          const fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            const result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  const kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    const kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    const specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      const specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}\n","/* eslint-disable no-redeclare */\n// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441\nconst objectValues = Object.values || (obj => Object.keys(obj).map(key => obj[key]));\n\nexport default objectValues;\n","import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nconst NAME_RX = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n/**\n * Upholds the spec rules about naming.\n */\n\nexport function assertValidName(name) {\n  const error = isValidNameError(name);\n\n  if (error) {\n    throw error;\n  }\n\n  return name;\n}\n/**\n * Returns an Error if a name is invalid.\n */\n\nexport function isValidNameError(name) {\n  typeof name === 'string' || devAssert(0, 'Expected name to be a string.');\n\n  if (name.length > 1 && name[0] === '_' && name[1] === '_') {\n    return new GraphQLError(`Name \"${name}\" must not begin with \"__\", which is reserved by GraphQL introspection.`);\n  }\n\n  if (!NAME_RX.test(name)) {\n    return new GraphQLError(`Names must match /^[_a-zA-Z][_a-zA-Z0-9]*$/ but \"${name}\" does not.`);\n  }\n}\n","/* eslint-disable no-redeclare */\n// $FlowFixMe[name-already-bound] workaround for: https://github.com/facebook/flow/issues/4441\nconst objectEntries = Object.entries || (obj => Object.keys(obj).map(key => [key, obj[key]]));\n\nexport default objectEntries;\n","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * for each value in the array.\n *\n * This provides a convenient lookup for the array items if the key function\n * produces unique results.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: { name: 'Jon', num: '555-1234' },\n *     //   Jenny: { name: 'Jenny', num: '867-5309' } }\n *     const entriesByName = keyMap(\n *       phoneBook,\n *       entry => entry.name\n *     )\n *\n *     // { name: 'Jenny', num: '857-6309' }\n *     const jennyEntry = entriesByName['Jenny']\n *\n */\nexport default function keyMap(list, keyFn) {\n  return list.reduce((map, item) => {\n    map[keyFn(item)] = item;\n    return map;\n  }, Object.create(null));\n}\n","import objectEntries from \"../polyfills/objectEntries.mjs\";\n\n/**\n * Creates an object map with the same keys as `map` and values generated by\n * running each value of `map` thru `fn`.\n */\nexport default function mapValue(map, fn) {\n  const result = Object.create(null);\n\n  for (const [key, value] of objectEntries(map)) {\n    result[key] = fn(value, key);\n  }\n\n  return result;\n}\n","import objectEntries from \"../polyfills/objectEntries.mjs\";\nexport default function toObjMap(obj) {\n  /* eslint-enable no-redeclare */\n  if (Object.getPrototypeOf(obj) === null) {\n    return obj;\n  }\n\n  const map = Object.create(null);\n\n  for (const [key, value] of objectEntries(obj)) {\n    map[key] = value;\n  }\n\n  return map;\n}\n","/**\n * Creates a keyed JS object from an array, given a function to produce the keys\n * and a function to produce the values from each item in the array.\n *\n *     const phoneBook = [\n *       { name: 'Jon', num: '555-1234' },\n *       { name: 'Jenny', num: '867-5309' }\n *     ]\n *\n *     // { Jon: '555-1234', Jenny: '867-5309' }\n *     const phonesByName = keyValMap(\n *       phoneBook,\n *       entry => entry.name,\n *       entry => entry.num\n *     )\n *\n */\nexport default function keyValMap(list, keyFn, valFn) {\n  return list.reduce((map, item) => {\n    map[keyFn(item)] = valFn(item);\n    return map;\n  }, Object.create(null));\n}\n","const MAX_SUGGESTIONS = 5;\n/**\n * Given [ A, B, C ] return ' Did you mean A, B, or C?'.\n */\n\n// eslint-disable-next-line no-redeclare\nexport default function didYouMean(firstArg, secondArg) {\n  const [subMessage, suggestionsArg] = typeof firstArg === 'string' ? [firstArg, secondArg] : [undefined, firstArg];\n  let message = ' Did you mean ';\n\n  if (subMessage) {\n    message += subMessage + ' ';\n  }\n\n  const suggestions = suggestionsArg.map(x => `\"${x}\"`);\n\n  switch (suggestions.length) {\n    case 0:\n      return '';\n\n    case 1:\n      return message + suggestions[0] + '?';\n\n    case 2:\n      return message + suggestions[0] + ' or ' + suggestions[1] + '?';\n  }\n\n  const selected = suggestions.slice(0, MAX_SUGGESTIONS);\n  const lastItem = selected.pop();\n  return message + selected.join(', ') + ', or ' + lastItem + '?';\n}\n","/**\n * Returns the first argument it receives.\n */\nexport default function identityFunc(x) {\n  return x;\n}\n","/**\n * Given an invalid input string and a list of valid options, returns a filtered\n * list of valid options sorted based on their similarity with the input.\n */\nexport default function suggestionList(input, options) {\n  const optionsByDistance = Object.create(null);\n  const lexicalDistance = new LexicalDistance(input);\n  const threshold = Math.floor(input.length * 0.4) + 1;\n\n  for (const option of options) {\n    const distance = lexicalDistance.measure(option, threshold);\n\n    if (distance !== undefined) {\n      optionsByDistance[option] = distance;\n    }\n  }\n\n  return Object.keys(optionsByDistance).sort((a, b) => {\n    const distanceDiff = optionsByDistance[a] - optionsByDistance[b];\n    return distanceDiff !== 0 ? distanceDiff : a.localeCompare(b);\n  });\n}\n/**\n * Computes the lexical distance between strings A and B.\n *\n * The \"distance\" between two strings is given by counting the minimum number\n * of edits needed to transform string A into string B. An edit can be an\n * insertion, deletion, or substitution of a single character, or a swap of two\n * adjacent characters.\n *\n * Includes a custom alteration from Damerau-Levenshtein to treat case changes\n * as a single edit which helps identify mis-cased values with an edit distance\n * of 1.\n *\n * This distance can be useful for detecting typos in input or sorting\n */\n\nclass LexicalDistance {\n  constructor(input) {\n    this._input = input;\n    this._inputLowerCase = input.toLowerCase();\n    this._inputArray = stringToArray(this._inputLowerCase);\n    this._rows = [new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0), new Array(input.length + 1).fill(0)];\n  }\n\n  measure(option, threshold) {\n    if (this._input === option) {\n      return 0;\n    }\n\n    const optionLowerCase = option.toLowerCase(); // Any case change counts as a single edit\n\n    if (this._inputLowerCase === optionLowerCase) {\n      return 1;\n    }\n\n    let a = stringToArray(optionLowerCase);\n    let b = this._inputArray;\n\n    if (a.length < b.length) {\n      const tmp = a;\n      a = b;\n      b = tmp;\n    }\n\n    const aLength = a.length;\n    const bLength = b.length;\n\n    if (aLength - bLength > threshold) {\n      return undefined;\n    }\n\n    const rows = this._rows;\n\n    for (let j = 0; j <= bLength; j++) {\n      rows[0][j] = j;\n    }\n\n    for (let i = 1; i <= aLength; i++) {\n      const upRow = rows[(i - 1) % 3];\n      const currentRow = rows[i % 3];\n      let smallestCell = currentRow[0] = i;\n\n      for (let j = 1; j <= bLength; j++) {\n        const cost = a[i - 1] === b[j - 1] ? 0 : 1;\n        let currentCell = Math.min(upRow[j] + 1, // delete\n        currentRow[j - 1] + 1, // insert\n        upRow[j - 1] + cost // substitute\n        );\n\n        if (i > 1 && j > 1 && a[i - 1] === b[j - 2] && a[i - 2] === b[j - 1]) {\n          // transposition\n          const doubleDiagonalCell = rows[(i - 2) % 3][j - 2];\n          currentCell = Math.min(currentCell, doubleDiagonalCell + 1);\n        }\n\n        if (currentCell < smallestCell) {\n          smallestCell = currentCell;\n        }\n\n        currentRow[j] = currentCell;\n      } // Early exit, since distance can't go smaller than smallest element of the previous row.\n\n\n      if (smallestCell > threshold) {\n        return undefined;\n      }\n    }\n\n    const distance = rows[aLength % 3][bLength];\n    return distance <= threshold ? distance : undefined;\n  }\n\n}\n\nfunction stringToArray(str) {\n  const strLength = str.length;\n  const array = new Array(strLength);\n\n  for (let i = 0; i < strLength; ++i) {\n    array[i] = str.charCodeAt(i);\n  }\n\n  return array;\n}\n","import { visit } from \"./visitor.mjs\";\nimport { printBlockString } from \"./blockString.mjs\";\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n}\nconst MAX_LINE_LENGTH = 80; // TODO: provide better type coverage in future\n\nconst printDocASTReducer = {\n  Name: node => node.value,\n  Variable: node => '$' + node.name,\n  // Document\n  Document: node => join(node.definitions, '\\n\\n') + '\\n',\n\n  OperationDefinition(node) {\n    const op = node.operation;\n    const name = node.name;\n    const varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    const directives = join(node.directives, ' ');\n    const selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n\n  VariableDefinition: ({\n    variable,\n    type,\n    defaultValue,\n    directives\n  }) => variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' ')),\n  SelectionSet: ({\n    selections\n  }) => block(selections),\n  Field: ({\n    alias,\n    name,\n    arguments: args,\n    directives,\n    selectionSet\n  }) => {\n    const prefix = wrap('', alias, ': ') + name;\n    let argsLine = prefix + wrap('(', join(args, ', '), ')');\n\n    if (argsLine.length > MAX_LINE_LENGTH) {\n      argsLine = prefix + wrap('(\\n', indent(join(args, '\\n')), '\\n)');\n    }\n\n    return join([argsLine, join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: ({\n    name,\n    value\n  }) => name + ': ' + value,\n  // Fragments\n  FragmentSpread: ({\n    name,\n    directives\n  }) => '...' + name + wrap(' ', join(directives, ' ')),\n  InlineFragment: ({\n    typeCondition,\n    directives,\n    selectionSet\n  }) => join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' '),\n  FragmentDefinition: ({\n    name,\n    typeCondition,\n    variableDefinitions,\n    directives,\n    selectionSet\n  }) => // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  `fragment ${name}${wrap('(', join(variableDefinitions, ', '), ')')} ` + `on ${typeCondition} ${wrap('', join(directives, ' '), ' ')}` + selectionSet,\n  // Value\n  IntValue: ({\n    value\n  }) => value,\n  FloatValue: ({\n    value\n  }) => value,\n  StringValue: ({\n    value,\n    block: isBlockString\n  }, key) => isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value),\n  BooleanValue: ({\n    value\n  }) => value ? 'true' : 'false',\n  NullValue: () => 'null',\n  EnumValue: ({\n    value\n  }) => value,\n  ListValue: ({\n    values\n  }) => '[' + join(values, ', ') + ']',\n  ObjectValue: ({\n    fields\n  }) => '{' + join(fields, ', ') + '}',\n  ObjectField: ({\n    name,\n    value\n  }) => name + ': ' + value,\n  // Directive\n  Directive: ({\n    name,\n    arguments: args\n  }) => '@' + name + wrap('(', join(args, ', '), ')'),\n  // Type\n  NamedType: ({\n    name\n  }) => name,\n  ListType: ({\n    type\n  }) => '[' + type + ']',\n  NonNullType: ({\n    type\n  }) => type + '!',\n  // Type System Definitions\n  SchemaDefinition: addDescription(({\n    directives,\n    operationTypes\n  }) => join(['schema', join(directives, ' '), block(operationTypes)], ' ')),\n  OperationTypeDefinition: ({\n    operation,\n    type\n  }) => operation + ': ' + type,\n  ScalarTypeDefinition: addDescription(({\n    name,\n    directives\n  }) => join(['scalar', name, join(directives, ' ')], ' ')),\n  ObjectTypeDefinition: addDescription(({\n    name,\n    interfaces,\n    directives,\n    fields\n  }) => join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')),\n  FieldDefinition: addDescription(({\n    name,\n    arguments: args,\n    type,\n    directives\n  }) => name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '))),\n  InputValueDefinition: addDescription(({\n    name,\n    type,\n    defaultValue,\n    directives\n  }) => join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ')),\n  InterfaceTypeDefinition: addDescription(({\n    name,\n    interfaces,\n    directives,\n    fields\n  }) => join(['interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ')),\n  UnionTypeDefinition: addDescription(({\n    name,\n    directives,\n    types\n  }) => join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ')),\n  EnumTypeDefinition: addDescription(({\n    name,\n    directives,\n    values\n  }) => join(['enum', name, join(directives, ' '), block(values)], ' ')),\n  EnumValueDefinition: addDescription(({\n    name,\n    directives\n  }) => join([name, join(directives, ' ')], ' ')),\n  InputObjectTypeDefinition: addDescription(({\n    name,\n    directives,\n    fields\n  }) => join(['input', name, join(directives, ' '), block(fields)], ' ')),\n  DirectiveDefinition: addDescription(({\n    name,\n    arguments: args,\n    repeatable,\n    locations\n  }) => 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + (repeatable ? ' repeatable' : '') + ' on ' + join(locations, ' | ')),\n  SchemaExtension: ({\n    directives,\n    operationTypes\n  }) => join(['extend schema', join(directives, ' '), block(operationTypes)], ' '),\n  ScalarTypeExtension: ({\n    name,\n    directives\n  }) => join(['extend scalar', name, join(directives, ' ')], ' '),\n  ObjectTypeExtension: ({\n    name,\n    interfaces,\n    directives,\n    fields\n  }) => join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n  InterfaceTypeExtension: ({\n    name,\n    interfaces,\n    directives,\n    fields\n  }) => join(['extend interface', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' '),\n  UnionTypeExtension: ({\n    name,\n    directives,\n    types\n  }) => join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' '),\n  EnumTypeExtension: ({\n    name,\n    directives,\n    values\n  }) => join(['extend enum', name, join(directives, ' '), block(values)], ' '),\n  InputObjectTypeExtension: ({\n    name,\n    directives,\n    fields\n  }) => join(['extend input', name, join(directives, ' '), block(fields)], ' ')\n};\n\nfunction addDescription(cb) {\n  return node => join([node.description, cb(node)], '\\n');\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator = '') {\n  return maybeArray?.filter(x => x).join(separator) ?? '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return wrap('{\\n', indent(join(array, '\\n')), '\\n}');\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end = '') {\n  return maybeString != null && maybeString !== '' ? start + maybeString + end : '';\n}\n\nfunction indent(str) {\n  return wrap('  ', str.replace(/\\n/g, '\\n  '));\n}\n\nfunction isMultiline(str) {\n  return str.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray != null && maybeArray.some(isMultiline);\n}\n","export default function invariant(condition, message) {\n  const booleanCondition = Boolean(condition); // istanbul ignore else (See transformation done in './resources/inlineInvariant.js')\n\n  if (!booleanCondition) {\n    throw new Error(message != null ? message : 'Unexpected invariant triggered.');\n  }\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\n\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * Unlike `valueFromAST()`, no type is provided. The resulting JavaScript value\n * will reflect the provided GraphQL value AST.\n *\n * | GraphQL Value        | JavaScript Value |\n * | -------------------- | ---------------- |\n * | Input Object         | Object           |\n * | List                 | Array            |\n * | Boolean              | Boolean          |\n * | String / Enum        | String           |\n * | Int / Float          | Number           |\n * | Null                 | null             |\n *\n */\nexport function valueFromASTUntyped(valueNode, variables) {\n  switch (valueNode.kind) {\n    case Kind.NULL:\n      return null;\n\n    case Kind.INT:\n      return parseInt(valueNode.value, 10);\n\n    case Kind.FLOAT:\n      return parseFloat(valueNode.value);\n\n    case Kind.STRING:\n    case Kind.ENUM:\n    case Kind.BOOLEAN:\n      return valueNode.value;\n\n    case Kind.LIST:\n      return valueNode.values.map(node => valueFromASTUntyped(node, variables));\n\n    case Kind.OBJECT:\n      return keyValMap(valueNode.fields, field => field.name.value, field => valueFromASTUntyped(field.value, variables));\n\n    case Kind.VARIABLE:\n      return variables?.[valueNode.name.value];\n  } // istanbul ignore next (Not reachable. All possible value nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected value node: ' + inspect(valueNode));\n}\n","import objectEntries from \"../polyfills/objectEntries.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport didYouMean from \"../jsutils/didYouMean.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport identityFunc from \"../jsutils/identityFunc.mjs\";\nimport suggestionList from \"../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { valueFromASTUntyped } from \"../utilities/valueFromASTUntyped.mjs\";\nexport function isType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type) || isListType(type) || isNonNullType(type);\n}\nexport function assertType(type) {\n  if (!isType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL type.`);\n  }\n\n  return type;\n}\n/**\n * There are predicates for each kind of GraphQL type.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isScalarType(type) {\n  return instanceOf(type, GraphQLScalarType);\n}\nexport function assertScalarType(type) {\n  if (!isScalarType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Scalar type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isObjectType(type) {\n  return instanceOf(type, GraphQLObjectType);\n}\nexport function assertObjectType(type) {\n  if (!isObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Object type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInterfaceType(type) {\n  return instanceOf(type, GraphQLInterfaceType);\n}\nexport function assertInterfaceType(type) {\n  if (!isInterfaceType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Interface type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isUnionType(type) {\n  return instanceOf(type, GraphQLUnionType);\n}\nexport function assertUnionType(type) {\n  if (!isUnionType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Union type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isEnumType(type) {\n  return instanceOf(type, GraphQLEnumType);\n}\nexport function assertEnumType(type) {\n  if (!isEnumType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Enum type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isInputObjectType(type) {\n  return instanceOf(type, GraphQLInputObjectType);\n}\nexport function assertInputObjectType(type) {\n  if (!isInputObjectType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Input Object type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isListType(type) {\n  return instanceOf(type, GraphQLList);\n}\nexport function assertListType(type) {\n  if (!isListType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL List type.`);\n  }\n\n  return type;\n}\n// eslint-disable-next-line no-redeclare\nexport function isNonNullType(type) {\n  return instanceOf(type, GraphQLNonNull);\n}\nexport function assertNonNullType(type) {\n  if (!isNonNullType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL Non-Null type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as input types for arguments and directives.\n */\n\nexport function isInputType(type) {\n  return isScalarType(type) || isEnumType(type) || isInputObjectType(type) || isWrappingType(type) && isInputType(type.ofType);\n}\nexport function assertInputType(type) {\n  if (!isInputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL input type.`);\n  }\n\n  return type;\n}\n/**\n * These types may be used as output types as the result of fields.\n */\n\nexport function isOutputType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isWrappingType(type) && isOutputType(type.ofType);\n}\nexport function assertOutputType(type) {\n  if (!isOutputType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL output type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe types which may be leaf values.\n */\n\nexport function isLeafType(type) {\n  return isScalarType(type) || isEnumType(type);\n}\nexport function assertLeafType(type) {\n  if (!isLeafType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL leaf type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isCompositeType(type) {\n  return isObjectType(type) || isInterfaceType(type) || isUnionType(type);\n}\nexport function assertCompositeType(type) {\n  if (!isCompositeType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL composite type.`);\n  }\n\n  return type;\n}\n/**\n * These types may describe the parent context of a selection set.\n */\n\nexport function isAbstractType(type) {\n  return isInterfaceType(type) || isUnionType(type);\n}\nexport function assertAbstractType(type) {\n  if (!isAbstractType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL abstract type.`);\n  }\n\n  return type;\n}\n/**\n * List Type Wrapper\n *\n * A list is a wrapping type which points to another type.\n * Lists are often created within the context of defining the fields of\n * an object type.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         parents: { type: new GraphQLList(PersonType) },\n *         children: { type: new GraphQLList(PersonType) },\n *       })\n *     })\n *\n */\n\nexport class GraphQLList {\n  constructor(ofType) {\n    isType(ofType) || devAssert(0, `Expected ${inspect(ofType)} to be a GraphQL type.`);\n    this.ofType = ofType;\n  }\n\n  toString() {\n    return '[' + String(this.ofType) + ']';\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLList';\n  }\n\n}\n/**\n * Non-Null Type Wrapper\n *\n * A non-null is a wrapping type which points to another type.\n * Non-null types enforce that their values are never null and can ensure\n * an error is raised if this ever occurs during a request. It is useful for\n * fields which you can make a strong guarantee on non-nullability, for example\n * usually the id field of a database row will never be null.\n *\n * Example:\n *\n *     const RowType = new GraphQLObjectType({\n *       name: 'Row',\n *       fields: () => ({\n *         id: { type: new GraphQLNonNull(GraphQLString) },\n *       })\n *     })\n *\n * Note: the enforcement of non-nullability occurs within the executor.\n */\n\nexport class GraphQLNonNull {\n  constructor(ofType) {\n    isNullableType(ofType) || devAssert(0, `Expected ${inspect(ofType)} to be a GraphQL nullable type.`);\n    this.ofType = ofType;\n  }\n\n  toString() {\n    return String(this.ofType) + '!';\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLNonNull';\n  }\n\n}\n/**\n * These types wrap and modify other types\n */\n\nexport function isWrappingType(type) {\n  return isListType(type) || isNonNullType(type);\n}\nexport function assertWrappingType(type) {\n  if (!isWrappingType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL wrapping type.`);\n  }\n\n  return type;\n}\n/**\n * These types can all accept null as a value.\n */\n\nexport function isNullableType(type) {\n  return isType(type) && !isNonNullType(type);\n}\nexport function assertNullableType(type) {\n  if (!isNullableType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL nullable type.`);\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNullableType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    return isNonNullType(type) ? type.ofType : type;\n  }\n}\n/**\n * These named types do not include modifiers like List or NonNull.\n */\n\nexport function isNamedType(type) {\n  return isScalarType(type) || isObjectType(type) || isInterfaceType(type) || isUnionType(type) || isEnumType(type) || isInputObjectType(type);\n}\nexport function assertNamedType(type) {\n  if (!isNamedType(type)) {\n    throw new Error(`Expected ${inspect(type)} to be a GraphQL named type.`);\n  }\n\n  return type;\n}\n/* eslint-disable no-redeclare */\n\nexport function getNamedType(type) {\n  /* eslint-enable no-redeclare */\n  if (type) {\n    let unwrappedType = type;\n\n    while (isWrappingType(unwrappedType)) {\n      unwrappedType = unwrappedType.ofType;\n    }\n\n    return unwrappedType;\n  }\n}\n/**\n * Used while defining GraphQL types to allow for circular references in\n * otherwise immutable type definitions.\n */\n\nfunction resolveThunk(thunk) {\n  // $FlowFixMe[incompatible-use]\n  return typeof thunk === 'function' ? thunk() : thunk;\n}\n\nfunction undefineIfEmpty(arr) {\n  return arr && arr.length > 0 ? arr : undefined;\n}\n/**\n * Scalar Type Definition\n *\n * The leaf values of any request and input values to arguments are\n * Scalars (or Enums) and are defined with a name and a series of functions\n * used to parse input from ast or variables and to ensure validity.\n *\n * If a type's serialize function does not return a value (i.e. it returns\n * `undefined`) then an error will be raised and a `null` value will be returned\n * in the response. If the serialize function returns `null`, then no error will\n * be included in the response.\n *\n * Example:\n *\n *     const OddType = new GraphQLScalarType({\n *       name: 'Odd',\n *       serialize(value) {\n *         if (value % 2 === 1) {\n *           return value;\n *         }\n *       }\n *     });\n *\n */\n\n\nexport class GraphQLScalarType {\n  constructor(config) {\n    const parseValue = config.parseValue ?? identityFunc;\n    this.name = config.name;\n    this.description = config.description;\n    this.specifiedByUrl = config.specifiedByUrl;\n    this.serialize = config.serialize ?? identityFunc;\n    this.parseValue = parseValue;\n\n    this.parseLiteral = config.parseLiteral ?? ((node, variables) => parseValue(valueFromASTUntyped(node, variables)));\n\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.specifiedByUrl == null || typeof config.specifiedByUrl === 'string' || devAssert(0, `${this.name} must provide \"specifiedByUrl\" as a string, ` + `but got: ${inspect(config.specifiedByUrl)}.`);\n    config.serialize == null || typeof config.serialize === 'function' || devAssert(0, `${this.name} must provide \"serialize\" function. If this custom Scalar is also used as an input type, ensure \"parseValue\" and \"parseLiteral\" functions are also provided.`);\n\n    if (config.parseLiteral) {\n      typeof config.parseValue === 'function' && typeof config.parseLiteral === 'function' || devAssert(0, `${this.name} must provide both \"parseValue\" and \"parseLiteral\" functions.`);\n    }\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      specifiedByUrl: this.specifiedByUrl,\n      serialize: this.serialize,\n      parseValue: this.parseValue,\n      parseLiteral: this.parseLiteral,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLScalarType';\n  }\n\n}\n\n/**\n * Object Type Definition\n *\n * Almost all of the GraphQL types you define will be object types. Object types\n * have a name, but most importantly describe their fields.\n *\n * Example:\n *\n *     const AddressType = new GraphQLObjectType({\n *       name: 'Address',\n *       fields: {\n *         street: { type: GraphQLString },\n *         number: { type: GraphQLInt },\n *         formatted: {\n *           type: GraphQLString,\n *           resolve(obj) {\n *             return obj.number + ' ' + obj.street\n *           }\n *         }\n *       }\n *     });\n *\n * When two types need to refer to each other, or a type needs to refer to\n * itself in a field, you can use a function expression (aka a closure or a\n * thunk) to supply the fields lazily.\n *\n * Example:\n *\n *     const PersonType = new GraphQLObjectType({\n *       name: 'Person',\n *       fields: () => ({\n *         name: { type: GraphQLString },\n *         bestFriend: { type: PersonType },\n *       })\n *     });\n *\n */\nexport class GraphQLObjectType {\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.isTypeOf = config.isTypeOf;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.isTypeOf == null || typeof config.isTypeOf === 'function' || devAssert(0, `${this.name} must provide \"isTypeOf\" as a function, ` + `but got: ${inspect(config.isTypeOf)}.`);\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      isTypeOf: this.isTypeOf,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes || []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLObjectType';\n  }\n\n}\n\nfunction defineInterfaces(config) {\n  const interfaces = resolveThunk(config.interfaces) ?? [];\n  Array.isArray(interfaces) || devAssert(0, `${config.name} interfaces must be an Array or a function which returns an Array.`);\n  return interfaces;\n}\n\nfunction defineFieldMap(config) {\n  const fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    isPlainObj(fieldConfig) || devAssert(0, `${config.name}.${fieldName} field config must be an object.`);\n    fieldConfig.resolve == null || typeof fieldConfig.resolve === 'function' || devAssert(0, `${config.name}.${fieldName} field resolver must be a function if ` + `provided, but got: ${inspect(fieldConfig.resolve)}.`);\n    const argsConfig = fieldConfig.args ?? {};\n    isPlainObj(argsConfig) || devAssert(0, `${config.name}.${fieldName} args must be an object with argument names as keys.`);\n    const args = objectEntries(argsConfig).map(([argName, argConfig]) => ({\n      name: argName,\n      description: argConfig.description,\n      type: argConfig.type,\n      defaultValue: argConfig.defaultValue,\n      deprecationReason: argConfig.deprecationReason,\n      extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n      astNode: argConfig.astNode\n    }));\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      args,\n      resolve: fieldConfig.resolve,\n      subscribe: fieldConfig.subscribe,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nfunction isPlainObj(obj) {\n  return isObjectLike(obj) && !Array.isArray(obj);\n}\n\nfunction fieldsToFieldsConfig(fields) {\n  return mapValue(fields, field => ({\n    description: field.description,\n    type: field.type,\n    args: argsToArgsConfig(field.args),\n    resolve: field.resolve,\n    subscribe: field.subscribe,\n    deprecationReason: field.deprecationReason,\n    extensions: field.extensions,\n    astNode: field.astNode\n  }));\n}\n/**\n * @internal\n */\n\n\nexport function argsToArgsConfig(args) {\n  return keyValMap(args, arg => arg.name, arg => ({\n    description: arg.description,\n    type: arg.type,\n    defaultValue: arg.defaultValue,\n    deprecationReason: arg.deprecationReason,\n    extensions: arg.extensions,\n    astNode: arg.astNode\n  }));\n}\nexport function isRequiredArgument(arg) {\n  return isNonNullType(arg.type) && arg.defaultValue === undefined;\n}\n\n/**\n * Interface Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Interface type\n * is used to describe what types are possible, what fields are in common across\n * all types, as well as a function to determine which type is actually used\n * when the field is resolved.\n *\n * Example:\n *\n *     const EntityType = new GraphQLInterfaceType({\n *       name: 'Entity',\n *       fields: {\n *         name: { type: GraphQLString }\n *       }\n *     });\n *\n */\nexport class GraphQLInterfaceType {\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineFieldMap.bind(undefined, config);\n    this._interfaces = defineInterfaces.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, `${this.name} must provide \"resolveType\" as a function, ` + `but got: ${inspect(config.resolveType)}.`);\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  getInterfaces() {\n    if (typeof this._interfaces === 'function') {\n      this._interfaces = this._interfaces();\n    }\n\n    return this._interfaces;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      interfaces: this.getInterfaces(),\n      fields: fieldsToFieldsConfig(this.getFields()),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInterfaceType';\n  }\n\n}\n\n/**\n * Union Type Definition\n *\n * When a field can return one of a heterogeneous set of types, a Union type\n * is used to describe what types are possible as well as providing a function\n * to determine which type is actually used when the field is resolved.\n *\n * Example:\n *\n *     const PetType = new GraphQLUnionType({\n *       name: 'Pet',\n *       types: [ DogType, CatType ],\n *       resolveType(value) {\n *         if (value instanceof Dog) {\n *           return DogType;\n *         }\n *         if (value instanceof Cat) {\n *           return CatType;\n *         }\n *       }\n *     });\n *\n */\nexport class GraphQLUnionType {\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.resolveType = config.resolveType;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._types = defineTypes.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n    config.resolveType == null || typeof config.resolveType === 'function' || devAssert(0, `${this.name} must provide \"resolveType\" as a function, ` + `but got: ${inspect(config.resolveType)}.`);\n  }\n\n  getTypes() {\n    if (typeof this._types === 'function') {\n      this._types = this._types();\n    }\n\n    return this._types;\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      types: this.getTypes(),\n      resolveType: this.resolveType,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLUnionType';\n  }\n\n}\n\nfunction defineTypes(config) {\n  const types = resolveThunk(config.types);\n  Array.isArray(types) || devAssert(0, `Must provide Array of types or a function which returns such an array for Union ${config.name}.`);\n  return types;\n}\n\n/**\n * Enum Type Definition\n *\n * Some leaf values of requests and input values are Enums. GraphQL serializes\n * Enum values as strings, however internally Enums can be represented by any\n * kind of type, often integers.\n *\n * Example:\n *\n *     const RGBType = new GraphQLEnumType({\n *       name: 'RGB',\n *       values: {\n *         RED: { value: 0 },\n *         GREEN: { value: 1 },\n *         BLUE: { value: 2 }\n *       }\n *     });\n *\n * Note: If a value is not provided in a definition, the name of the enum value\n * will be used as its internal value.\n */\nexport class GraphQLEnumType\n/* <T> */\n{\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._values = defineEnumValues(this.name, config.values);\n    this._valueLookup = new Map(this._values.map(enumValue => [enumValue.value, enumValue]));\n    this._nameLookup = keyMap(this._values, value => value.name);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  getValues() {\n    return this._values;\n  }\n\n  getValue(name) {\n    return this._nameLookup[name];\n  }\n\n  serialize(outputValue) {\n    const enumValue = this._valueLookup.get(outputValue);\n\n    if (enumValue === undefined) {\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent value: ${inspect(outputValue)}`);\n    }\n\n    return enumValue.name;\n  }\n\n  parseValue(inputValue)\n  /* T */\n  {\n    if (typeof inputValue !== 'string') {\n      const valueStr = inspect(inputValue);\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent non-string value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr));\n    }\n\n    const enumValue = this.getValue(inputValue);\n\n    if (enumValue == null) {\n      throw new GraphQLError(`Value \"${inputValue}\" does not exist in \"${this.name}\" enum.` + didYouMeanEnumValue(this, inputValue));\n    }\n\n    return enumValue.value;\n  }\n\n  parseLiteral(valueNode, _variables)\n  /* T */\n  {\n    // Note: variables will be resolved to a value before calling this function.\n    if (valueNode.kind !== Kind.ENUM) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(`Enum \"${this.name}\" cannot represent non-enum value: ${valueStr}.` + didYouMeanEnumValue(this, valueStr), valueNode);\n    }\n\n    const enumValue = this.getValue(valueNode.value);\n\n    if (enumValue == null) {\n      const valueStr = print(valueNode);\n      throw new GraphQLError(`Value \"${valueStr}\" does not exist in \"${this.name}\" enum.` + didYouMeanEnumValue(this, valueStr), valueNode);\n    }\n\n    return enumValue.value;\n  }\n\n  toConfig() {\n    const values = keyValMap(this.getValues(), value => value.name, value => ({\n      description: value.description,\n      value: value.value,\n      deprecationReason: value.deprecationReason,\n      extensions: value.extensions,\n      astNode: value.astNode\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      values,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLEnumType';\n  }\n\n}\n\nfunction didYouMeanEnumValue(enumType, unknownValueStr) {\n  const allNames = enumType.getValues().map(value => value.name);\n  const suggestedValues = suggestionList(unknownValueStr, allNames);\n  return didYouMean('the enum value', suggestedValues);\n}\n\nfunction defineEnumValues(typeName, valueMap) {\n  isPlainObj(valueMap) || devAssert(0, `${typeName} values must be an object with value names as keys.`);\n  return objectEntries(valueMap).map(([valueName, valueConfig]) => {\n    isPlainObj(valueConfig) || devAssert(0, `${typeName}.${valueName} must refer to an object with a \"value\" key ` + `representing an internal value but got: ${inspect(valueConfig)}.`);\n    return {\n      name: valueName,\n      description: valueConfig.description,\n      value: valueConfig.value !== undefined ? valueConfig.value : valueName,\n      deprecationReason: valueConfig.deprecationReason,\n      extensions: valueConfig.extensions && toObjMap(valueConfig.extensions),\n      astNode: valueConfig.astNode\n    };\n  });\n}\n\n/**\n * Input Object Type Definition\n *\n * An input object defines a structured collection of fields which may be\n * supplied to a field argument.\n *\n * Using `NonNull` will ensure that a value must be provided by the query\n *\n * Example:\n *\n *     const GeoPoint = new GraphQLInputObjectType({\n *       name: 'GeoPoint',\n *       fields: {\n *         lat: { type: new GraphQLNonNull(GraphQLFloat) },\n *         lon: { type: new GraphQLNonNull(GraphQLFloat) },\n *         alt: { type: GraphQLFloat, defaultValue: 0 },\n *       }\n *     });\n *\n */\nexport class GraphQLInputObjectType {\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = undefineIfEmpty(config.extensionASTNodes);\n    this._fields = defineInputFieldMap.bind(undefined, config);\n    typeof config.name === 'string' || devAssert(0, 'Must provide name.');\n  }\n\n  getFields() {\n    if (typeof this._fields === 'function') {\n      this._fields = this._fields();\n    }\n\n    return this._fields;\n  }\n\n  toConfig() {\n    const fields = mapValue(this.getFields(), field => ({\n      description: field.description,\n      type: field.type,\n      defaultValue: field.defaultValue,\n      extensions: field.extensions,\n      astNode: field.astNode\n    }));\n    return {\n      name: this.name,\n      description: this.description,\n      fields,\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? []\n    };\n  }\n\n  toString() {\n    return this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLInputObjectType';\n  }\n\n}\n\nfunction defineInputFieldMap(config) {\n  const fieldMap = resolveThunk(config.fields);\n  isPlainObj(fieldMap) || devAssert(0, `${config.name} fields must be an object with field names as keys or a function which returns such an object.`);\n  return mapValue(fieldMap, (fieldConfig, fieldName) => {\n    !('resolve' in fieldConfig) || devAssert(0, `${config.name}.${fieldName} field has a resolve property, but Input Types cannot define resolvers.`);\n    return {\n      name: fieldName,\n      description: fieldConfig.description,\n      type: fieldConfig.type,\n      defaultValue: fieldConfig.defaultValue,\n      deprecationReason: fieldConfig.deprecationReason,\n      extensions: fieldConfig.extensions && toObjMap(fieldConfig.extensions),\n      astNode: fieldConfig.astNode\n    };\n  });\n}\n\nexport function isRequiredInputField(field) {\n  return isNonNullType(field.type) && field.defaultValue === undefined;\n}\n","import { isInterfaceType, isObjectType, isListType, isNonNullType, isAbstractType } from \"../type/definition.mjs\";\n/**\n * Provided two types, return true if the types are equal (invariant).\n */\n\nexport function isEqualType(typeA, typeB) {\n  // Equivalent types are equal.\n  if (typeA === typeB) {\n    return true;\n  } // If either type is non-null, the other must also be non-null.\n\n\n  if (isNonNullType(typeA) && isNonNullType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // If either type is a list, the other must also be a list.\n\n\n  if (isListType(typeA) && isListType(typeB)) {\n    return isEqualType(typeA.ofType, typeB.ofType);\n  } // Otherwise the types are not equal.\n\n\n  return false;\n}\n/**\n * Provided a type and a super type, return true if the first type is either\n * equal or a subset of the second super type (covariant).\n */\n\nexport function isTypeSubTypeOf(schema, maybeSubType, superType) {\n  // Equivalent type is a valid subtype\n  if (maybeSubType === superType) {\n    return true;\n  } // If superType is non-null, maybeSubType must also be non-null.\n\n\n  if (isNonNullType(superType)) {\n    if (isNonNullType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isNonNullType(maybeSubType)) {\n    // If superType is nullable, maybeSubType may be non-null or nullable.\n    return isTypeSubTypeOf(schema, maybeSubType.ofType, superType);\n  } // If superType type is a list, maybeSubType type must also be a list.\n\n\n  if (isListType(superType)) {\n    if (isListType(maybeSubType)) {\n      return isTypeSubTypeOf(schema, maybeSubType.ofType, superType.ofType);\n    }\n\n    return false;\n  }\n\n  if (isListType(maybeSubType)) {\n    // If superType is not a list, maybeSubType must also be not a list.\n    return false;\n  } // If superType type is an abstract type, check if it is super type of maybeSubType.\n  // Otherwise, the child type is not a valid subtype of the parent type.\n\n\n  return isAbstractType(superType) && (isInterfaceType(maybeSubType) || isObjectType(maybeSubType)) && schema.isSubType(superType, maybeSubType);\n}\n/**\n * Provided two composite types, determine if they \"overlap\". Two composite\n * types overlap when the Sets of possible concrete types for each intersect.\n *\n * This is often used to determine if a fragment of a given type could possibly\n * be visited in a context of another type.\n *\n * This function is commutative.\n */\n\nexport function doTypesOverlap(schema, typeA, typeB) {\n  // Equivalent types overlap\n  if (typeA === typeB) {\n    return true;\n  }\n\n  if (isAbstractType(typeA)) {\n    if (isAbstractType(typeB)) {\n      // If both types are abstract, then determine if there is any intersection\n      // between possible concrete types of each.\n      return schema.getPossibleTypes(typeA).some(type => schema.isSubType(typeB, type));\n    } // Determine if the latter type is a possible concrete type of the former.\n\n\n    return schema.isSubType(typeA, typeB);\n  }\n\n  if (isAbstractType(typeB)) {\n    // Determine if the former type is a possible concrete type of the latter.\n    return schema.isSubType(typeB, typeA);\n  } // Otherwise the types do not overlap.\n\n\n  return false;\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { GraphQLScalarType } from \"./definition.mjs\"; // As per the GraphQL Spec, Integers are only treated as valid when a valid\n// 32-bit signed integer, providing the broadest support across platforms.\n//\n// n.b. JavaScript's integers are safe between -(2^53 - 1) and 2^53 - 1 because\n// they are internally represented as IEEE 754 doubles.\n\nconst MAX_INT = 2147483647;\nconst MIN_INT = -2147483648;\n\nfunction serializeInt(outputValue) {\n  const coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  let num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (typeof num !== 'number' || !Number.isInteger(num)) {\n    throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(coercedValue)}`);\n  }\n\n  if (num > MAX_INT || num < MIN_INT) {\n    throw new GraphQLError('Int cannot represent non 32-bit signed integer value: ' + inspect(coercedValue));\n  }\n\n  return num;\n}\n\nfunction coerceInt(inputValue) {\n  if (typeof inputValue !== 'number' || !Number.isInteger(inputValue)) {\n    throw new GraphQLError(`Int cannot represent non-integer value: ${inspect(inputValue)}`);\n  }\n\n  if (inputValue > MAX_INT || inputValue < MIN_INT) {\n    throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${inputValue}`);\n  }\n\n  return inputValue;\n}\n\nexport const GraphQLInt = new GraphQLScalarType({\n  name: 'Int',\n  description: 'The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.',\n  serialize: serializeInt,\n  parseValue: coerceInt,\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(`Int cannot represent non-integer value: ${print(valueNode)}`, valueNode);\n    }\n\n    const num = parseInt(valueNode.value, 10);\n\n    if (num > MAX_INT || num < MIN_INT) {\n      throw new GraphQLError(`Int cannot represent non 32-bit signed integer value: ${valueNode.value}`, valueNode);\n    }\n\n    return num;\n  }\n\n});\n\nfunction serializeFloat(outputValue) {\n  const coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 1 : 0;\n  }\n\n  let num = coercedValue;\n\n  if (typeof coercedValue === 'string' && coercedValue !== '') {\n    num = Number(coercedValue);\n  }\n\n  if (typeof num !== 'number' || !Number.isFinite(num)) {\n    throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(coercedValue)}`);\n  }\n\n  return num;\n}\n\nfunction coerceFloat(inputValue) {\n  if (typeof inputValue !== 'number' || !Number.isFinite(inputValue)) {\n    throw new GraphQLError(`Float cannot represent non numeric value: ${inspect(inputValue)}`);\n  }\n\n  return inputValue;\n}\n\nexport const GraphQLFloat = new GraphQLScalarType({\n  name: 'Float',\n  description: 'The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).',\n  serialize: serializeFloat,\n  parseValue: coerceFloat,\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.FLOAT && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError(`Float cannot represent non numeric value: ${print(valueNode)}`, valueNode);\n    }\n\n    return parseFloat(valueNode.value);\n  }\n\n}); // Support serializing objects with custom valueOf() or toJSON() functions -\n// a common way to represent a complex value which can be represented as\n// a string (ex: MongoDB id objects).\n\nfunction serializeObject(outputValue) {\n  if (isObjectLike(outputValue)) {\n    if (typeof outputValue.valueOf === 'function') {\n      const valueOfResult = outputValue.valueOf();\n\n      if (!isObjectLike(valueOfResult)) {\n        return valueOfResult;\n      }\n    }\n\n    if (typeof outputValue.toJSON === 'function') {\n      // $FlowFixMe[incompatible-use]\n      return outputValue.toJSON();\n    }\n  }\n\n  return outputValue;\n}\n\nfunction serializeString(outputValue) {\n  const coercedValue = serializeObject(outputValue); // Serialize string, boolean and number values to a string, but do not\n  // attempt to coerce object, function, symbol, or other types as strings.\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue ? 'true' : 'false';\n  }\n\n  if (typeof coercedValue === 'number' && Number.isFinite(coercedValue)) {\n    return coercedValue.toString();\n  }\n\n  throw new GraphQLError(`String cannot represent value: ${inspect(outputValue)}`);\n}\n\nfunction coerceString(inputValue) {\n  if (typeof inputValue !== 'string') {\n    throw new GraphQLError(`String cannot represent a non string value: ${inspect(inputValue)}`);\n  }\n\n  return inputValue;\n}\n\nexport const GraphQLString = new GraphQLScalarType({\n  name: 'String',\n  description: 'The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.',\n  serialize: serializeString,\n  parseValue: coerceString,\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING) {\n      throw new GraphQLError(`String cannot represent a non string value: ${print(valueNode)}`, valueNode);\n    }\n\n    return valueNode.value;\n  }\n\n});\n\nfunction serializeBoolean(outputValue) {\n  const coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'boolean') {\n    return coercedValue;\n  }\n\n  if (Number.isFinite(coercedValue)) {\n    return coercedValue !== 0;\n  }\n\n  throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(coercedValue)}`);\n}\n\nfunction coerceBoolean(inputValue) {\n  if (typeof inputValue !== 'boolean') {\n    throw new GraphQLError(`Boolean cannot represent a non boolean value: ${inspect(inputValue)}`);\n  }\n\n  return inputValue;\n}\n\nexport const GraphQLBoolean = new GraphQLScalarType({\n  name: 'Boolean',\n  description: 'The `Boolean` scalar type represents `true` or `false`.',\n  serialize: serializeBoolean,\n  parseValue: coerceBoolean,\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.BOOLEAN) {\n      throw new GraphQLError(`Boolean cannot represent a non boolean value: ${print(valueNode)}`, valueNode);\n    }\n\n    return valueNode.value;\n  }\n\n});\n\nfunction serializeID(outputValue) {\n  const coercedValue = serializeObject(outputValue);\n\n  if (typeof coercedValue === 'string') {\n    return coercedValue;\n  }\n\n  if (Number.isInteger(coercedValue)) {\n    return String(coercedValue);\n  }\n\n  throw new GraphQLError(`ID cannot represent value: ${inspect(outputValue)}`);\n}\n\nfunction coerceID(inputValue) {\n  if (typeof inputValue === 'string') {\n    return inputValue;\n  }\n\n  if (typeof inputValue === 'number' && Number.isInteger(inputValue)) {\n    return inputValue.toString();\n  }\n\n  throw new GraphQLError(`ID cannot represent value: ${inspect(inputValue)}`);\n}\n\nexport const GraphQLID = new GraphQLScalarType({\n  name: 'ID',\n  description: 'The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `\"4\"`) or integer (such as `4`) input value will be accepted as an ID.',\n  serialize: serializeID,\n  parseValue: coerceID,\n\n  parseLiteral(valueNode) {\n    if (valueNode.kind !== Kind.STRING && valueNode.kind !== Kind.INT) {\n      throw new GraphQLError('ID cannot represent a non-string and non-integer value: ' + print(valueNode), valueNode);\n    }\n\n    return valueNode.value;\n  }\n\n});\nexport const specifiedScalarTypes = Object.freeze([GraphQLString, GraphQLInt, GraphQLFloat, GraphQLBoolean, GraphQLID]);\nexport function isSpecifiedScalarType(type) {\n  return specifiedScalarTypes.some(({\n    name\n  }) => type.name === name);\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport isCollection from \"../jsutils/isCollection.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLID } from \"../type/scalars.mjs\";\nimport { isLeafType, isEnumType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a GraphQL Value AST given a JavaScript object.\n * Function will match JavaScript/JSON values to GraphQL AST schema format\n * by using suggested GraphQLInputType. For example:\n *\n *     astFromValue(\"value\", GraphQLString)\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * JavaScript values.\n *\n * | JSON Value    | GraphQL Value        |\n * | ------------- | -------------------- |\n * | Object        | Input Object         |\n * | Array         | List                 |\n * | Boolean       | Boolean              |\n * | String        | String / Enum Value  |\n * | Number        | Int / Float          |\n * | Mixed         | Enum Value           |\n * | null          | NullValue            |\n *\n */\n\nexport function astFromValue(value, type) {\n  if (isNonNullType(type)) {\n    const astValue = astFromValue(value, type.ofType);\n\n    if (astValue?.kind === Kind.NULL) {\n      return null;\n    }\n\n    return astValue;\n  } // only explicit null, not undefined, NaN\n\n\n  if (value === null) {\n    return {\n      kind: Kind.NULL\n    };\n  } // undefined\n\n\n  if (value === undefined) {\n    return null;\n  } // Convert JavaScript array to GraphQL list. If the GraphQLType is a list, but\n  // the value is not an array, convert the value using the list's item type.\n\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (isCollection(value)) {\n      const valuesNodes = []; // Since we transpile for-of in loose mode it doesn't support iterators\n      // and it's required to first convert iteratable into array\n\n      for (const item of Array.from(value)) {\n        const itemNode = astFromValue(item, itemType);\n\n        if (itemNode != null) {\n          valuesNodes.push(itemNode);\n        }\n      }\n\n      return {\n        kind: Kind.LIST,\n        values: valuesNodes\n      };\n    }\n\n    return astFromValue(value, itemType);\n  } // Populate the fields of the input object by creating ASTs from each value\n  // in the JavaScript object according to the fields in the input type.\n\n\n  if (isInputObjectType(type)) {\n    if (!isObjectLike(value)) {\n      return null;\n    }\n\n    const fieldNodes = [];\n\n    for (const field of objectValues(type.getFields())) {\n      const fieldValue = astFromValue(value[field.name], field.type);\n\n      if (fieldValue) {\n        fieldNodes.push({\n          kind: Kind.OBJECT_FIELD,\n          name: {\n            kind: Kind.NAME,\n            value: field.name\n          },\n          value: fieldValue\n        });\n      }\n    }\n\n    return {\n      kind: Kind.OBJECT,\n      fields: fieldNodes\n    };\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Since value is an internally represented value, it must be serialized\n    // to an externally represented value before converting into an AST.\n    const serialized = type.serialize(value);\n\n    if (serialized == null) {\n      return null;\n    } // Others serialize based on their corresponding JavaScript scalar types.\n\n\n    if (typeof serialized === 'boolean') {\n      return {\n        kind: Kind.BOOLEAN,\n        value: serialized\n      };\n    } // JavaScript numbers can be Int or Float values.\n\n\n    if (typeof serialized === 'number' && Number.isFinite(serialized)) {\n      const stringNum = String(serialized);\n      return integerStringRegExp.test(stringNum) ? {\n        kind: Kind.INT,\n        value: stringNum\n      } : {\n        kind: Kind.FLOAT,\n        value: stringNum\n      };\n    }\n\n    if (typeof serialized === 'string') {\n      // Enum types use Enum literals.\n      if (isEnumType(type)) {\n        return {\n          kind: Kind.ENUM,\n          value: serialized\n        };\n      } // ID types can use Int literals.\n\n\n      if (type === GraphQLID && integerStringRegExp.test(serialized)) {\n        return {\n          kind: Kind.INT,\n          value: serialized\n        };\n      }\n\n      return {\n        kind: Kind.STRING,\n        value: serialized\n      };\n    }\n\n    throw new TypeError(`Cannot convert value to AST: ${inspect(serialized)}.`);\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n}\n/**\n * IntValue:\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit ( Digit+ )?\n */\n\nconst integerStringRegExp = /^-?(?:0|[1-9][0-9]*)$/;\n","/**\n * Returns true if the provided object is an Object (i.e. not a string literal)\n * and is either Iterable or Array-like.\n *\n * This may be used in place of [Array.isArray()][isArray] to determine if an\n * object should be iterated-over. It always excludes string literals and\n * includes Arrays (regardless of if it is Iterable). It also includes other\n * Array-like objects such as NodeList, TypedArray, and Buffer.\n *\n * @example\n *\n * isCollection([ 1, 2, 3 ]) // true\n * isCollection('ABC') // false\n * isCollection({ length: 1, 0: 'Alpha' }) // true\n * isCollection({ key: 'value' }) // false\n * isCollection(new Map()) // true\n *\n * @param obj\n *   An Object value which might implement the Iterable or Array-like protocols.\n * @return {boolean} true if Iterable or Array-like Object.\n */\n// eslint-disable-next-line no-redeclare\nexport default function isCollection(obj) {\n  if (obj == null || typeof obj !== 'object') {\n    return false;\n  } // Is Array like?\n\n\n  const length = obj.length;\n\n  if (typeof length === 'number' && length >= 0 && length % 1 === 0) {\n    return true;\n  } // Is Iterable?\n\n\n  return typeof obj[Symbol.iterator] === 'function';\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { DirectiveLocation } from \"../language/directiveLocation.mjs\";\nimport { astFromValue } from \"../utilities/astFromValue.mjs\";\nimport { GraphQLString, GraphQLBoolean } from \"./scalars.mjs\";\nimport { GraphQLList, GraphQLNonNull, GraphQLObjectType, GraphQLEnumType, isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isListType, isNonNullType, isAbstractType } from \"./definition.mjs\";\nexport const __Schema = new GraphQLObjectType({\n  name: '__Schema',\n  description: 'A GraphQL Schema defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, as well as the entry points for query, mutation, and subscription operations.',\n  fields: () => ({\n    description: {\n      type: GraphQLString,\n      resolve: schema => schema.description\n    },\n    types: {\n      description: 'A list of all types supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Type))),\n\n      resolve(schema) {\n        return objectValues(schema.getTypeMap());\n      }\n\n    },\n    queryType: {\n      description: 'The type that query operations will be rooted at.',\n      type: new GraphQLNonNull(__Type),\n      resolve: schema => schema.getQueryType()\n    },\n    mutationType: {\n      description: 'If this server supports mutation, the type that mutation operations will be rooted at.',\n      type: __Type,\n      resolve: schema => schema.getMutationType()\n    },\n    subscriptionType: {\n      description: 'If this server support subscription, the type that subscription operations will be rooted at.',\n      type: __Type,\n      resolve: schema => schema.getSubscriptionType()\n    },\n    directives: {\n      description: 'A list of all directives supported by this server.',\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__Directive))),\n      resolve: schema => schema.getDirectives()\n    }\n  })\n});\nexport const __Directive = new GraphQLObjectType({\n  name: '__Directive',\n  description: \"A Directive provides a way to describe alternate runtime execution and type validation behavior in a GraphQL document.\\n\\nIn some cases, you need to provide options to alter GraphQL's execution behavior in ways field arguments will not suffice, such as conditionally including or skipping a field. Directives provide this by describing additional information to the executor.\",\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: directive => directive.name\n    },\n    description: {\n      type: GraphQLString,\n      resolve: directive => directive.description\n    },\n    isRepeatable: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: directive => directive.isRepeatable\n    },\n    locations: {\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__DirectiveLocation))),\n      resolve: directive => directive.locations\n    },\n    args: {\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),\n      resolve: directive => directive.args\n    }\n  })\n});\nexport const __DirectiveLocation = new GraphQLEnumType({\n  name: '__DirectiveLocation',\n  description: 'A Directive can be adjacent to many parts of the GraphQL language, a __DirectiveLocation describes one such possible adjacencies.',\n  values: {\n    QUERY: {\n      value: DirectiveLocation.QUERY,\n      description: 'Location adjacent to a query operation.'\n    },\n    MUTATION: {\n      value: DirectiveLocation.MUTATION,\n      description: 'Location adjacent to a mutation operation.'\n    },\n    SUBSCRIPTION: {\n      value: DirectiveLocation.SUBSCRIPTION,\n      description: 'Location adjacent to a subscription operation.'\n    },\n    FIELD: {\n      value: DirectiveLocation.FIELD,\n      description: 'Location adjacent to a field.'\n    },\n    FRAGMENT_DEFINITION: {\n      value: DirectiveLocation.FRAGMENT_DEFINITION,\n      description: 'Location adjacent to a fragment definition.'\n    },\n    FRAGMENT_SPREAD: {\n      value: DirectiveLocation.FRAGMENT_SPREAD,\n      description: 'Location adjacent to a fragment spread.'\n    },\n    INLINE_FRAGMENT: {\n      value: DirectiveLocation.INLINE_FRAGMENT,\n      description: 'Location adjacent to an inline fragment.'\n    },\n    VARIABLE_DEFINITION: {\n      value: DirectiveLocation.VARIABLE_DEFINITION,\n      description: 'Location adjacent to a variable definition.'\n    },\n    SCHEMA: {\n      value: DirectiveLocation.SCHEMA,\n      description: 'Location adjacent to a schema definition.'\n    },\n    SCALAR: {\n      value: DirectiveLocation.SCALAR,\n      description: 'Location adjacent to a scalar definition.'\n    },\n    OBJECT: {\n      value: DirectiveLocation.OBJECT,\n      description: 'Location adjacent to an object type definition.'\n    },\n    FIELD_DEFINITION: {\n      value: DirectiveLocation.FIELD_DEFINITION,\n      description: 'Location adjacent to a field definition.'\n    },\n    ARGUMENT_DEFINITION: {\n      value: DirectiveLocation.ARGUMENT_DEFINITION,\n      description: 'Location adjacent to an argument definition.'\n    },\n    INTERFACE: {\n      value: DirectiveLocation.INTERFACE,\n      description: 'Location adjacent to an interface definition.'\n    },\n    UNION: {\n      value: DirectiveLocation.UNION,\n      description: 'Location adjacent to a union definition.'\n    },\n    ENUM: {\n      value: DirectiveLocation.ENUM,\n      description: 'Location adjacent to an enum definition.'\n    },\n    ENUM_VALUE: {\n      value: DirectiveLocation.ENUM_VALUE,\n      description: 'Location adjacent to an enum value definition.'\n    },\n    INPUT_OBJECT: {\n      value: DirectiveLocation.INPUT_OBJECT,\n      description: 'Location adjacent to an input object type definition.'\n    },\n    INPUT_FIELD_DEFINITION: {\n      value: DirectiveLocation.INPUT_FIELD_DEFINITION,\n      description: 'Location adjacent to an input object field definition.'\n    }\n  }\n});\nexport const __Type = new GraphQLObjectType({\n  name: '__Type',\n  description: 'The fundamental unit of any GraphQL Schema is the type. There are many kinds of types in GraphQL as represented by the `__TypeKind` enum.\\n\\nDepending on the kind of a type, certain fields describe information about that type. Scalar types provide no information beyond a name, description and optional `specifiedByUrl`, while Enum types provide their values. Object and Interface types provide the fields they describe. Abstract types, Union and Interface, provide the Object types possible at runtime. List and NonNull types compose other types.',\n  fields: () => ({\n    kind: {\n      type: new GraphQLNonNull(__TypeKind),\n\n      resolve(type) {\n        if (isScalarType(type)) {\n          return TypeKind.SCALAR;\n        }\n\n        if (isObjectType(type)) {\n          return TypeKind.OBJECT;\n        }\n\n        if (isInterfaceType(type)) {\n          return TypeKind.INTERFACE;\n        }\n\n        if (isUnionType(type)) {\n          return TypeKind.UNION;\n        }\n\n        if (isEnumType(type)) {\n          return TypeKind.ENUM;\n        }\n\n        if (isInputObjectType(type)) {\n          return TypeKind.INPUT_OBJECT;\n        }\n\n        if (isListType(type)) {\n          return TypeKind.LIST;\n        } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n        if (isNonNullType(type)) {\n          return TypeKind.NON_NULL;\n        } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n        false || invariant(0, `Unexpected type: \"${inspect(type)}\".`);\n      }\n\n    },\n    name: {\n      type: GraphQLString,\n      resolve: type => type.name !== undefined ? type.name : undefined\n    },\n    description: {\n      type: GraphQLString,\n      resolve: type => type.description !== undefined ? type.description : undefined\n    },\n    specifiedByUrl: {\n      type: GraphQLString,\n      resolve: obj => obj.specifiedByUrl !== undefined ? obj.specifiedByUrl : undefined\n    },\n    fields: {\n      type: new GraphQLList(new GraphQLNonNull(__Field)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false\n        }\n      },\n\n      resolve(type, {\n        includeDeprecated\n      }) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          const fields = objectValues(type.getFields());\n          return includeDeprecated ? fields : fields.filter(field => field.deprecationReason == null);\n        }\n      }\n\n    },\n    interfaces: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type) {\n        if (isObjectType(type) || isInterfaceType(type)) {\n          return type.getInterfaces();\n        }\n      }\n\n    },\n    possibleTypes: {\n      type: new GraphQLList(new GraphQLNonNull(__Type)),\n\n      resolve(type, _args, _context, {\n        schema\n      }) {\n        if (isAbstractType(type)) {\n          return schema.getPossibleTypes(type);\n        }\n      }\n\n    },\n    enumValues: {\n      type: new GraphQLList(new GraphQLNonNull(__EnumValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false\n        }\n      },\n\n      resolve(type, {\n        includeDeprecated\n      }) {\n        if (isEnumType(type)) {\n          const values = type.getValues();\n          return includeDeprecated ? values : values.filter(field => field.deprecationReason == null);\n        }\n      }\n\n    },\n    inputFields: {\n      type: new GraphQLList(new GraphQLNonNull(__InputValue)),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false\n        }\n      },\n\n      resolve(type, {\n        includeDeprecated\n      }) {\n        if (isInputObjectType(type)) {\n          const values = objectValues(type.getFields());\n          return includeDeprecated ? values : values.filter(field => field.deprecationReason == null);\n        }\n      }\n\n    },\n    ofType: {\n      type: __Type,\n      resolve: type => type.ofType !== undefined ? type.ofType : undefined\n    }\n  })\n});\nexport const __Field = new GraphQLObjectType({\n  name: '__Field',\n  description: 'Object and Interface types are described by a list of Fields, each of which has a name, potentially a list of arguments, and a return type.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: field => field.name\n    },\n    description: {\n      type: GraphQLString,\n      resolve: field => field.description\n    },\n    args: {\n      type: new GraphQLNonNull(new GraphQLList(new GraphQLNonNull(__InputValue))),\n      args: {\n        includeDeprecated: {\n          type: GraphQLBoolean,\n          defaultValue: false\n        }\n      },\n\n      resolve(field, {\n        includeDeprecated\n      }) {\n        return includeDeprecated ? field.args : field.args.filter(arg => arg.deprecationReason == null);\n      }\n\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: field => field.type\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: field => field.deprecationReason != null\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: field => field.deprecationReason\n    }\n  })\n});\nexport const __InputValue = new GraphQLObjectType({\n  name: '__InputValue',\n  description: 'Arguments provided to Fields or Directives and the input fields of an InputObject are represented as Input Values which describe their type and optionally a default value.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: inputValue => inputValue.name\n    },\n    description: {\n      type: GraphQLString,\n      resolve: inputValue => inputValue.description\n    },\n    type: {\n      type: new GraphQLNonNull(__Type),\n      resolve: inputValue => inputValue.type\n    },\n    defaultValue: {\n      type: GraphQLString,\n      description: 'A GraphQL-formatted string representing the default value for this input value.',\n\n      resolve(inputValue) {\n        const {\n          type,\n          defaultValue\n        } = inputValue;\n        const valueAST = astFromValue(defaultValue, type);\n        return valueAST ? print(valueAST) : null;\n      }\n\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: field => field.deprecationReason != null\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: obj => obj.deprecationReason\n    }\n  })\n});\nexport const __EnumValue = new GraphQLObjectType({\n  name: '__EnumValue',\n  description: 'One possible value for a given Enum. Enum values are unique values, not a placeholder for a string or numeric value. However an Enum value is returned in a JSON response as a string.',\n  fields: () => ({\n    name: {\n      type: new GraphQLNonNull(GraphQLString),\n      resolve: enumValue => enumValue.name\n    },\n    description: {\n      type: GraphQLString,\n      resolve: enumValue => enumValue.description\n    },\n    isDeprecated: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      resolve: enumValue => enumValue.deprecationReason != null\n    },\n    deprecationReason: {\n      type: GraphQLString,\n      resolve: enumValue => enumValue.deprecationReason\n    }\n  })\n});\nexport const TypeKind = Object.freeze({\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  LIST: 'LIST',\n  NON_NULL: 'NON_NULL'\n});\nexport const __TypeKind = new GraphQLEnumType({\n  name: '__TypeKind',\n  description: 'An enum describing what kind of type a given `__Type` is.',\n  values: {\n    SCALAR: {\n      value: TypeKind.SCALAR,\n      description: 'Indicates this type is a scalar.'\n    },\n    OBJECT: {\n      value: TypeKind.OBJECT,\n      description: 'Indicates this type is an object. `fields` and `interfaces` are valid fields.'\n    },\n    INTERFACE: {\n      value: TypeKind.INTERFACE,\n      description: 'Indicates this type is an interface. `fields`, `interfaces`, and `possibleTypes` are valid fields.'\n    },\n    UNION: {\n      value: TypeKind.UNION,\n      description: 'Indicates this type is a union. `possibleTypes` is a valid field.'\n    },\n    ENUM: {\n      value: TypeKind.ENUM,\n      description: 'Indicates this type is an enum. `enumValues` is a valid field.'\n    },\n    INPUT_OBJECT: {\n      value: TypeKind.INPUT_OBJECT,\n      description: 'Indicates this type is an input object. `inputFields` is a valid field.'\n    },\n    LIST: {\n      value: TypeKind.LIST,\n      description: 'Indicates this type is a list. `ofType` is a valid field.'\n    },\n    NON_NULL: {\n      value: TypeKind.NON_NULL,\n      description: 'Indicates this type is a non-null. `ofType` is a valid field.'\n    }\n  }\n});\n/**\n * Note that these are GraphQLField and not GraphQLFieldConfig,\n * so the format for args is different.\n */\n\nexport const SchemaMetaFieldDef = {\n  name: '__schema',\n  type: new GraphQLNonNull(__Schema),\n  description: 'Access the current type schema of this server.',\n  args: [],\n  resolve: (_source, _args, _context, {\n    schema\n  }) => schema,\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport const TypeMetaFieldDef = {\n  name: '__type',\n  type: __Type,\n  description: 'Request the type information of a single type.',\n  args: [{\n    name: 'name',\n    description: undefined,\n    type: new GraphQLNonNull(GraphQLString),\n    defaultValue: undefined,\n    deprecationReason: undefined,\n    extensions: undefined,\n    astNode: undefined\n  }],\n  resolve: (_source, {\n    name\n  }, _context, {\n    schema\n  }) => schema.getType(name),\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport const TypeNameMetaFieldDef = {\n  name: '__typename',\n  type: new GraphQLNonNull(GraphQLString),\n  description: 'The name of the current Object type at runtime.',\n  args: [],\n  resolve: (_source, _args, _context, {\n    parentType\n  }) => parentType.name,\n  deprecationReason: undefined,\n  extensions: undefined,\n  astNode: undefined\n};\nexport const introspectionTypes = Object.freeze([__Schema, __Directive, __DirectiveLocation, __Type, __Field, __InputValue, __EnumValue, __TypeKind]);\nexport function isIntrospectionType(type) {\n  return introspectionTypes.some(({\n    name\n  }) => type.name === name);\n}\n","import objectEntries from \"../polyfills/objectEntries.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { DirectiveLocation } from \"../language/directiveLocation.mjs\";\nimport { GraphQLString, GraphQLBoolean } from \"./scalars.mjs\";\nimport { argsToArgsConfig, GraphQLNonNull } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL directive.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isDirective(directive) {\n  return instanceOf(directive, GraphQLDirective);\n}\nexport function assertDirective(directive) {\n  if (!isDirective(directive)) {\n    throw new Error(`Expected ${inspect(directive)} to be a GraphQL directive.`);\n  }\n\n  return directive;\n}\n/**\n * Directives are used by the GraphQL runtime as a way of modifying execution\n * behavior. Type system creators will usually not create these directly.\n */\n\nexport class GraphQLDirective {\n  constructor(config) {\n    this.name = config.name;\n    this.description = config.description;\n    this.locations = config.locations;\n    this.isRepeatable = config.isRepeatable ?? false;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    config.name || devAssert(0, 'Directive must be named.');\n    Array.isArray(config.locations) || devAssert(0, `@${config.name} locations must be an Array.`);\n    const args = config.args ?? {};\n    isObjectLike(args) && !Array.isArray(args) || devAssert(0, `@${config.name} args must be an object with argument names as keys.`);\n    this.args = objectEntries(args).map(([argName, argConfig]) => ({\n      name: argName,\n      description: argConfig.description,\n      type: argConfig.type,\n      defaultValue: argConfig.defaultValue,\n      deprecationReason: argConfig.deprecationReason,\n      extensions: argConfig.extensions && toObjMap(argConfig.extensions),\n      astNode: argConfig.astNode\n    }));\n  }\n\n  toConfig() {\n    return {\n      name: this.name,\n      description: this.description,\n      locations: this.locations,\n      args: argsToArgsConfig(this.args),\n      isRepeatable: this.isRepeatable,\n      extensions: this.extensions,\n      astNode: this.astNode\n    };\n  }\n\n  toString() {\n    return '@' + this.name;\n  }\n\n  toJSON() {\n    return this.toString();\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLDirective';\n  }\n\n}\n\n/**\n * Used to conditionally include fields or fragments.\n */\nexport const GraphQLIncludeDirective = new GraphQLDirective({\n  name: 'include',\n  description: 'Directs the executor to include this field or fragment only when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Included when true.'\n    }\n  }\n});\n/**\n * Used to conditionally skip (exclude) fields or fragments.\n */\n\nexport const GraphQLSkipDirective = new GraphQLDirective({\n  name: 'skip',\n  description: 'Directs the executor to skip this field or fragment when the `if` argument is true.',\n  locations: [DirectiveLocation.FIELD, DirectiveLocation.FRAGMENT_SPREAD, DirectiveLocation.INLINE_FRAGMENT],\n  args: {\n    if: {\n      type: new GraphQLNonNull(GraphQLBoolean),\n      description: 'Skipped when true.'\n    }\n  }\n});\n/**\n * Constant string used for default reason for a deprecation.\n */\n\nexport const DEFAULT_DEPRECATION_REASON = 'No longer supported';\n/**\n * Used to declare element of a GraphQL schema as deprecated.\n */\n\nexport const GraphQLDeprecatedDirective = new GraphQLDirective({\n  name: 'deprecated',\n  description: 'Marks an element of a GraphQL schema as no longer supported.',\n  locations: [DirectiveLocation.FIELD_DEFINITION, DirectiveLocation.ARGUMENT_DEFINITION, DirectiveLocation.INPUT_FIELD_DEFINITION, DirectiveLocation.ENUM_VALUE],\n  args: {\n    reason: {\n      type: GraphQLString,\n      description: 'Explains why this element was deprecated, usually also including a suggestion for how to access supported similar data. Formatted using the Markdown syntax, as specified by [CommonMark](https://commonmark.org/).',\n      defaultValue: DEFAULT_DEPRECATION_REASON\n    }\n  }\n});\n/**\n * Used to provide a URL for specifying the behaviour of custom scalar definitions.\n */\n\nexport const GraphQLSpecifiedByDirective = new GraphQLDirective({\n  name: 'specifiedBy',\n  description: 'Exposes a URL that specifies the behaviour of this scalar.',\n  locations: [DirectiveLocation.SCALAR],\n  args: {\n    url: {\n      type: new GraphQLNonNull(GraphQLString),\n      description: 'The URL that specifies the behaviour of this scalar.'\n    }\n  }\n});\n/**\n * The full list of specified directives.\n */\n\nexport const specifiedDirectives = Object.freeze([GraphQLIncludeDirective, GraphQLSkipDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective]);\nexport function isSpecifiedDirective(directive) {\n  return specifiedDirectives.some(({\n    name\n  }) => name === directive.name);\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport toObjMap from \"../jsutils/toObjMap.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport instanceOf from \"../jsutils/instanceOf.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { __Schema } from \"./introspection.mjs\";\nimport { GraphQLDirective, isDirective, specifiedDirectives } from \"./directives.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isInputObjectType, getNamedType } from \"./definition.mjs\";\n/**\n * Test if the given value is a GraphQL schema.\n */\n\n// eslint-disable-next-line no-redeclare\nexport function isSchema(schema) {\n  return instanceOf(schema, GraphQLSchema);\n}\nexport function assertSchema(schema) {\n  if (!isSchema(schema)) {\n    throw new Error(`Expected ${inspect(schema)} to be a GraphQL schema.`);\n  }\n\n  return schema;\n}\n/**\n * Schema Definition\n *\n * A Schema is created by supplying the root types of each type of operation,\n * query and mutation (optional). A schema definition is then supplied to the\n * validator and executor.\n *\n * Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       query: MyAppQueryRootType,\n *       mutation: MyAppMutationRootType,\n *     })\n *\n * Note: When the schema is constructed, by default only the types that are\n * reachable by traversing the root types are included, other types must be\n * explicitly referenced.\n *\n * Example:\n *\n *     const characterInterface = new GraphQLInterfaceType({\n *       name: 'Character',\n *       ...\n *     });\n *\n *     const humanType = new GraphQLObjectType({\n *       name: 'Human',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const droidType = new GraphQLObjectType({\n *       name: 'Droid',\n *       interfaces: [characterInterface],\n *       ...\n *     });\n *\n *     const schema = new GraphQLSchema({\n *       query: new GraphQLObjectType({\n *         name: 'Query',\n *         fields: {\n *           hero: { type: characterInterface, ... },\n *         }\n *       }),\n *       ...\n *       // Since this schema references only the `Character` interface it's\n *       // necessary to explicitly list the types that implement it if\n *       // you want them to be included in the final schema.\n *       types: [humanType, droidType],\n *     })\n *\n * Note: If an array of `directives` are provided to GraphQLSchema, that will be\n * the exact list of directives represented and allowed. If `directives` is not\n * provided then a default set of the specified directives (e.g. @include and\n * @skip) will be used. If you wish to provide *additional* directives to these\n * specified directives, you must explicitly declare them. Example:\n *\n *     const MyAppSchema = new GraphQLSchema({\n *       ...\n *       directives: specifiedDirectives.concat([ myCustomDirective ]),\n *     })\n *\n */\n\nexport class GraphQLSchema {\n  // Used as a cache for validateSchema().\n  constructor(config) {\n    // If this schema was built from a source known to be valid, then it may be\n    // marked with assumeValid to avoid an additional type system validation.\n    this.__validationErrors = config.assumeValid === true ? [] : undefined; // Check for common mistakes during construction to produce early errors.\n\n    isObjectLike(config) || devAssert(0, 'Must provide configuration object.');\n    !config.types || Array.isArray(config.types) || devAssert(0, `\"types\" must be Array if provided but got: ${inspect(config.types)}.`);\n    !config.directives || Array.isArray(config.directives) || devAssert(0, '\"directives\" must be Array if provided but got: ' + `${inspect(config.directives)}.`);\n    this.description = config.description;\n    this.extensions = config.extensions && toObjMap(config.extensions);\n    this.astNode = config.astNode;\n    this.extensionASTNodes = config.extensionASTNodes;\n    this._queryType = config.query;\n    this._mutationType = config.mutation;\n    this._subscriptionType = config.subscription; // Provide specified directives (e.g. @include and @skip) by default.\n\n    this._directives = config.directives ?? specifiedDirectives; // To preserve order of user-provided types, we add first to add them to\n    // the set of \"collected\" types, so `collectReferencedTypes` ignore them.\n\n    const allReferencedTypes = new Set(config.types);\n\n    if (config.types != null) {\n      for (const type of config.types) {\n        // When we ready to process this type, we remove it from \"collected\" types\n        // and then add it together with all dependent types in the correct position.\n        allReferencedTypes.delete(type);\n        collectReferencedTypes(type, allReferencedTypes);\n      }\n    }\n\n    if (this._queryType != null) {\n      collectReferencedTypes(this._queryType, allReferencedTypes);\n    }\n\n    if (this._mutationType != null) {\n      collectReferencedTypes(this._mutationType, allReferencedTypes);\n    }\n\n    if (this._subscriptionType != null) {\n      collectReferencedTypes(this._subscriptionType, allReferencedTypes);\n    }\n\n    for (const directive of this._directives) {\n      // Directives are not validated until validateSchema() is called.\n      if (isDirective(directive)) {\n        for (const arg of directive.args) {\n          collectReferencedTypes(arg.type, allReferencedTypes);\n        }\n      }\n    }\n\n    collectReferencedTypes(__Schema, allReferencedTypes); // Storing the resulting map for reference by the schema.\n\n    this._typeMap = Object.create(null);\n    this._subTypeMap = Object.create(null); // Keep track of all implementations by interface name.\n\n    this._implementationsMap = Object.create(null);\n\n    for (const namedType of Array.from(allReferencedTypes)) {\n      if (namedType == null) {\n        continue;\n      }\n\n      const typeName = namedType.name;\n      typeName || devAssert(0, 'One of the provided types for building the Schema is missing a name.');\n\n      if (this._typeMap[typeName] !== undefined) {\n        throw new Error(`Schema must contain uniquely named types but contains multiple types named \"${typeName}\".`);\n      }\n\n      this._typeMap[typeName] = namedType;\n\n      if (isInterfaceType(namedType)) {\n        // Store implementations by interface.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            implementations.interfaces.push(namedType);\n          }\n        }\n      } else if (isObjectType(namedType)) {\n        // Store implementations by objects.\n        for (const iface of namedType.getInterfaces()) {\n          if (isInterfaceType(iface)) {\n            let implementations = this._implementationsMap[iface.name];\n\n            if (implementations === undefined) {\n              implementations = this._implementationsMap[iface.name] = {\n                objects: [],\n                interfaces: []\n              };\n            }\n\n            implementations.objects.push(namedType);\n          }\n        }\n      }\n    }\n  }\n\n  getQueryType() {\n    return this._queryType;\n  }\n\n  getMutationType() {\n    return this._mutationType;\n  }\n\n  getSubscriptionType() {\n    return this._subscriptionType;\n  }\n\n  getTypeMap() {\n    return this._typeMap;\n  }\n\n  getType(name) {\n    return this.getTypeMap()[name];\n  }\n\n  getPossibleTypes(abstractType) {\n    return isUnionType(abstractType) ? abstractType.getTypes() : this.getImplementations(abstractType).objects;\n  }\n\n  getImplementations(interfaceType) {\n    const implementations = this._implementationsMap[interfaceType.name];\n    return implementations ?? {\n      objects: [],\n      interfaces: []\n    };\n  }\n\n  isSubType(abstractType, maybeSubType) {\n    let map = this._subTypeMap[abstractType.name];\n\n    if (map === undefined) {\n      map = Object.create(null);\n\n      if (isUnionType(abstractType)) {\n        for (const type of abstractType.getTypes()) {\n          map[type.name] = true;\n        }\n      } else {\n        const implementations = this.getImplementations(abstractType);\n\n        for (const type of implementations.objects) {\n          map[type.name] = true;\n        }\n\n        for (const type of implementations.interfaces) {\n          map[type.name] = true;\n        }\n      }\n\n      this._subTypeMap[abstractType.name] = map;\n    }\n\n    return map[maybeSubType.name] !== undefined;\n  }\n\n  getDirectives() {\n    return this._directives;\n  }\n\n  getDirective(name) {\n    return this.getDirectives().find(directive => directive.name === name);\n  }\n\n  toConfig() {\n    return {\n      description: this.description,\n      query: this.getQueryType(),\n      mutation: this.getMutationType(),\n      subscription: this.getSubscriptionType(),\n      types: objectValues(this.getTypeMap()),\n      directives: this.getDirectives().slice(),\n      extensions: this.extensions,\n      astNode: this.astNode,\n      extensionASTNodes: this.extensionASTNodes ?? [],\n      assumeValid: this.__validationErrors !== undefined\n    };\n  } // $FlowFixMe[unsupported-syntax] Flow doesn't support computed properties yet\n\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLSchema';\n  }\n\n}\n\nfunction collectReferencedTypes(type, typeSet) {\n  const namedType = getNamedType(type);\n\n  if (!typeSet.has(namedType)) {\n    typeSet.add(namedType);\n\n    if (isUnionType(namedType)) {\n      for (const memberType of namedType.getTypes()) {\n        collectReferencedTypes(memberType, typeSet);\n      }\n    } else if (isObjectType(namedType) || isInterfaceType(namedType)) {\n      for (const interfaceType of namedType.getInterfaces()) {\n        collectReferencedTypes(interfaceType, typeSet);\n      }\n\n      for (const field of objectValues(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n\n        for (const arg of field.args) {\n          collectReferencedTypes(arg.type, typeSet);\n        }\n      }\n    } else if (isInputObjectType(namedType)) {\n      for (const field of objectValues(namedType.getFields())) {\n        collectReferencedTypes(field.type, typeSet);\n      }\n    }\n  }\n\n  return typeSet;\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { locatedError } from \"../error/locatedError.mjs\";\nimport { isValidNameError } from \"../utilities/assertValidName.mjs\";\nimport { isEqualType, isTypeSubTypeOf } from \"../utilities/typeComparators.mjs\";\nimport { assertSchema } from \"./schema.mjs\";\nimport { isIntrospectionType } from \"./introspection.mjs\";\nimport { isDirective, GraphQLDeprecatedDirective } from \"./directives.mjs\";\nimport { isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType, isNamedType, isNonNullType, isInputType, isOutputType, isRequiredArgument, isRequiredInputField } from \"./definition.mjs\";\n/**\n * Implements the \"Type Validation\" sub-sections of the specification's\n * \"Type System\" section.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the Schema is valid.\n */\n\nexport function validateSchema(schema) {\n  // First check to ensure the provided value is in fact a GraphQLSchema.\n  assertSchema(schema); // If this Schema has already been validated, return the previous results.\n\n  if (schema.__validationErrors) {\n    return schema.__validationErrors;\n  } // Validate the schema, producing a list of errors.\n\n\n  const context = new SchemaValidationContext(schema);\n  validateRootTypes(context);\n  validateDirectives(context);\n  validateTypes(context); // Persist the results of validation before returning to ensure validation\n  // does not run multiple times for this schema.\n\n  const errors = context.getErrors();\n  schema.__validationErrors = errors;\n  return errors;\n}\n/**\n * Utility function which asserts a schema is valid by throwing an error if\n * it is invalid.\n */\n\nexport function assertValidSchema(schema) {\n  const errors = validateSchema(schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}\n\nclass SchemaValidationContext {\n  constructor(schema) {\n    this._errors = [];\n    this.schema = schema;\n  }\n\n  reportError(message, nodes) {\n    const _nodes = Array.isArray(nodes) ? nodes.filter(Boolean) : nodes;\n\n    this.addError(new GraphQLError(message, _nodes));\n  }\n\n  addError(error) {\n    this._errors.push(error);\n  }\n\n  getErrors() {\n    return this._errors;\n  }\n\n}\n\nfunction validateRootTypes(context) {\n  const schema = context.schema;\n  const queryType = schema.getQueryType();\n\n  if (!queryType) {\n    context.reportError('Query root type must be provided.', schema.astNode);\n  } else if (!isObjectType(queryType)) {\n    context.reportError(`Query root type must be Object type, it cannot be ${inspect(queryType)}.`, getOperationTypeNode(schema, 'query') ?? queryType.astNode);\n  }\n\n  const mutationType = schema.getMutationType();\n\n  if (mutationType && !isObjectType(mutationType)) {\n    context.reportError('Mutation root type must be Object type if provided, it cannot be ' + `${inspect(mutationType)}.`, getOperationTypeNode(schema, 'mutation') ?? mutationType.astNode);\n  }\n\n  const subscriptionType = schema.getSubscriptionType();\n\n  if (subscriptionType && !isObjectType(subscriptionType)) {\n    context.reportError('Subscription root type must be Object type if provided, it cannot be ' + `${inspect(subscriptionType)}.`, getOperationTypeNode(schema, 'subscription') ?? subscriptionType.astNode);\n  }\n}\n\nfunction getOperationTypeNode(schema, operation) {\n  const operationNodes = getAllSubNodes(schema, node => node.operationTypes);\n\n  for (const node of operationNodes) {\n    if (node.operation === operation) {\n      return node.type;\n    }\n  }\n\n  return undefined;\n}\n\nfunction validateDirectives(context) {\n  for (const directive of context.schema.getDirectives()) {\n    // Ensure all directives are in fact GraphQL directives.\n    if (!isDirective(directive)) {\n      context.reportError(`Expected directive but got: ${inspect(directive)}.`, directive?.astNode);\n      continue;\n    } // Ensure they are named correctly.\n\n\n    validateName(context, directive); // TODO: Ensure proper locations.\n    // Ensure the arguments are valid.\n\n    for (const arg of directive.args) {\n      // Ensure they are named correctly.\n      validateName(context, arg); // Ensure the type is an input type.\n\n      if (!isInputType(arg.type)) {\n        context.reportError(`The type of @${directive.name}(${arg.name}:) must be Input Type ` + `but got: ${inspect(arg.type)}.`, arg.astNode);\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        context.reportError(`Required argument @${directive.name}(${arg.name}:) cannot be deprecated.`, [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)\n        arg.astNode?.type]);\n      }\n    }\n  }\n}\n\nfunction validateName(context, node) {\n  // Ensure names are valid, however introspection types opt out.\n  const error = isValidNameError(node.name);\n\n  if (error) {\n    context.addError(locatedError(error, node.astNode));\n  }\n}\n\nfunction validateTypes(context) {\n  const validateInputObjectCircularRefs = createInputObjectCircularRefsValidator(context);\n  const typeMap = context.schema.getTypeMap();\n\n  for (const type of objectValues(typeMap)) {\n    // Ensure all provided types are in fact GraphQL type.\n    if (!isNamedType(type)) {\n      context.reportError(`Expected GraphQL named type but got: ${inspect(type)}.`, type.astNode);\n      continue;\n    } // Ensure it is named correctly (excluding introspection types).\n\n\n    if (!isIntrospectionType(type)) {\n      validateName(context, type);\n    }\n\n    if (isObjectType(type)) {\n      // Ensure fields are valid\n      validateFields(context, type); // Ensure objects implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isInterfaceType(type)) {\n      // Ensure fields are valid.\n      validateFields(context, type); // Ensure interfaces implement the interfaces they claim to.\n\n      validateInterfaces(context, type);\n    } else if (isUnionType(type)) {\n      // Ensure Unions include valid member types.\n      validateUnionMembers(context, type);\n    } else if (isEnumType(type)) {\n      // Ensure Enums have valid values.\n      validateEnumValues(context, type);\n    } else if (isInputObjectType(type)) {\n      // Ensure Input Object fields are valid.\n      validateInputFields(context, type); // Ensure Input Objects do not contain non-nullable circular references\n\n      validateInputObjectCircularRefs(type);\n    }\n  }\n}\n\nfunction validateFields(context, type) {\n  const fields = objectValues(type.getFields()); // Objects and Interfaces both must define one or more fields.\n\n  if (fields.length === 0) {\n    context.reportError(`Type ${type.name} must define one or more fields.`, getAllNodes(type));\n  }\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an output type\n\n    if (!isOutputType(field.type)) {\n      context.reportError(`The type of ${type.name}.${field.name} must be Output Type ` + `but got: ${inspect(field.type)}.`, field.astNode?.type);\n    } // Ensure the arguments are valid\n\n\n    for (const arg of field.args) {\n      const argName = arg.name; // Ensure they are named correctly.\n\n      validateName(context, arg); // Ensure the type is an input type\n\n      if (!isInputType(arg.type)) {\n        context.reportError(`The type of ${type.name}.${field.name}(${argName}:) must be Input ` + `Type but got: ${inspect(arg.type)}.`, arg.astNode?.type);\n      }\n\n      if (isRequiredArgument(arg) && arg.deprecationReason != null) {\n        context.reportError(`Required argument ${type.name}.${field.name}(${argName}:) cannot be deprecated.`, [getDeprecatedDirectiveNode(arg.astNode), // istanbul ignore next (TODO need to write coverage tests)\n        arg.astNode?.type]);\n      }\n    }\n  }\n}\n\nfunction validateInterfaces(context, type) {\n  const ifaceTypeNames = Object.create(null);\n\n  for (const iface of type.getInterfaces()) {\n    if (!isInterfaceType(iface)) {\n      context.reportError(`Type ${inspect(type)} must only implement Interface types, ` + `it cannot implement ${inspect(iface)}.`, getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (type === iface) {\n      context.reportError(`Type ${type.name} cannot implement itself because it would create a circular reference.`, getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    if (ifaceTypeNames[iface.name]) {\n      context.reportError(`Type ${type.name} can only implement ${iface.name} once.`, getAllImplementsInterfaceNodes(type, iface));\n      continue;\n    }\n\n    ifaceTypeNames[iface.name] = true;\n    validateTypeImplementsAncestors(context, type, iface);\n    validateTypeImplementsInterface(context, type, iface);\n  }\n}\n\nfunction validateTypeImplementsInterface(context, type, iface) {\n  const typeFieldMap = type.getFields(); // Assert each interface field is implemented.\n\n  for (const ifaceField of objectValues(iface.getFields())) {\n    const fieldName = ifaceField.name;\n    const typeField = typeFieldMap[fieldName]; // Assert interface field exists on type.\n\n    if (!typeField) {\n      context.reportError(`Interface field ${iface.name}.${fieldName} expected but ${type.name} does not provide it.`, [ifaceField.astNode, ...getAllNodes(type)]);\n      continue;\n    } // Assert interface field type is satisfied by type field type, by being\n    // a valid subtype. (covariant)\n\n\n    if (!isTypeSubTypeOf(context.schema, typeField.type, ifaceField.type)) {\n      context.reportError(`Interface field ${iface.name}.${fieldName} expects type ` + `${inspect(ifaceField.type)} but ${type.name}.${fieldName} ` + `is type ${inspect(typeField.type)}.`, [// istanbul ignore next (TODO need to write coverage tests)\n      ifaceField.astNode?.type, // istanbul ignore next (TODO need to write coverage tests)\n      typeField.astNode?.type]);\n    } // Assert each interface field arg is implemented.\n\n\n    for (const ifaceArg of ifaceField.args) {\n      const argName = ifaceArg.name;\n      const typeArg = typeField.args.find(arg => arg.name === argName); // Assert interface field arg exists on object field.\n\n      if (!typeArg) {\n        context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) expected but ${type.name}.${fieldName} does not provide it.`, [ifaceArg.astNode, typeField.astNode]);\n        continue;\n      } // Assert interface field arg type matches object field arg type.\n      // (invariant)\n      // TODO: change to contravariant?\n\n\n      if (!isEqualType(ifaceArg.type, typeArg.type)) {\n        context.reportError(`Interface field argument ${iface.name}.${fieldName}(${argName}:) ` + `expects type ${inspect(ifaceArg.type)} but ` + `${type.name}.${fieldName}(${argName}:) is type ` + `${inspect(typeArg.type)}.`, [// istanbul ignore next (TODO need to write coverage tests)\n        ifaceArg.astNode?.type, // istanbul ignore next (TODO need to write coverage tests)\n        typeArg.astNode?.type]);\n      } // TODO: validate default values?\n\n    } // Assert additional arguments must not be required.\n\n\n    for (const typeArg of typeField.args) {\n      const argName = typeArg.name;\n      const ifaceArg = ifaceField.args.find(arg => arg.name === argName);\n\n      if (!ifaceArg && isRequiredArgument(typeArg)) {\n        context.reportError(`Object field ${type.name}.${fieldName} includes required argument ${argName} that is missing from the Interface field ${iface.name}.${fieldName}.`, [typeArg.astNode, ifaceField.astNode]);\n      }\n    }\n  }\n}\n\nfunction validateTypeImplementsAncestors(context, type, iface) {\n  const ifaceInterfaces = type.getInterfaces();\n\n  for (const transitive of iface.getInterfaces()) {\n    if (ifaceInterfaces.indexOf(transitive) === -1) {\n      context.reportError(transitive === type ? `Type ${type.name} cannot implement ${iface.name} because it would create a circular reference.` : `Type ${type.name} must implement ${transitive.name} because it is implemented by ${iface.name}.`, [...getAllImplementsInterfaceNodes(iface, transitive), ...getAllImplementsInterfaceNodes(type, iface)]);\n    }\n  }\n}\n\nfunction validateUnionMembers(context, union) {\n  const memberTypes = union.getTypes();\n\n  if (memberTypes.length === 0) {\n    context.reportError(`Union type ${union.name} must define one or more member types.`, getAllNodes(union));\n  }\n\n  const includedTypeNames = Object.create(null);\n\n  for (const memberType of memberTypes) {\n    if (includedTypeNames[memberType.name]) {\n      context.reportError(`Union type ${union.name} can only include type ${memberType.name} once.`, getUnionMemberTypeNodes(union, memberType.name));\n      continue;\n    }\n\n    includedTypeNames[memberType.name] = true;\n\n    if (!isObjectType(memberType)) {\n      context.reportError(`Union type ${union.name} can only include Object types, ` + `it cannot include ${inspect(memberType)}.`, getUnionMemberTypeNodes(union, String(memberType)));\n    }\n  }\n}\n\nfunction validateEnumValues(context, enumType) {\n  const enumValues = enumType.getValues();\n\n  if (enumValues.length === 0) {\n    context.reportError(`Enum type ${enumType.name} must define one or more values.`, getAllNodes(enumType));\n  }\n\n  for (const enumValue of enumValues) {\n    const valueName = enumValue.name; // Ensure valid name.\n\n    validateName(context, enumValue);\n\n    if (valueName === 'true' || valueName === 'false' || valueName === 'null') {\n      context.reportError(`Enum type ${enumType.name} cannot include value: ${valueName}.`, enumValue.astNode);\n    }\n  }\n}\n\nfunction validateInputFields(context, inputObj) {\n  const fields = objectValues(inputObj.getFields());\n\n  if (fields.length === 0) {\n    context.reportError(`Input Object type ${inputObj.name} must define one or more fields.`, getAllNodes(inputObj));\n  } // Ensure the arguments are valid\n\n\n  for (const field of fields) {\n    // Ensure they are named correctly.\n    validateName(context, field); // Ensure the type is an input type\n\n    if (!isInputType(field.type)) {\n      context.reportError(`The type of ${inputObj.name}.${field.name} must be Input Type ` + `but got: ${inspect(field.type)}.`, field.astNode?.type);\n    }\n\n    if (isRequiredInputField(field) && field.deprecationReason != null) {\n      context.reportError(`Required input field ${inputObj.name}.${field.name} cannot be deprecated.`, [getDeprecatedDirectiveNode(field.astNode), // istanbul ignore next (TODO need to write coverage tests)\n      field.astNode?.type]);\n    }\n  }\n}\n\nfunction createInputObjectCircularRefsValidator(context) {\n  // Modified copy of algorithm from 'src/validation/rules/NoFragmentCycles.js'.\n  // Tracks already visited types to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedTypes = Object.create(null); // Array of types nodes used to produce meaningful errors\n\n  const fieldPath = []; // Position in the type path\n\n  const fieldPathIndexByTypeName = Object.create(null);\n  return detectCycleRecursive; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(inputObj) {\n    if (visitedTypes[inputObj.name]) {\n      return;\n    }\n\n    visitedTypes[inputObj.name] = true;\n    fieldPathIndexByTypeName[inputObj.name] = fieldPath.length;\n    const fields = objectValues(inputObj.getFields());\n\n    for (const field of fields) {\n      if (isNonNullType(field.type) && isInputObjectType(field.type.ofType)) {\n        const fieldType = field.type.ofType;\n        const cycleIndex = fieldPathIndexByTypeName[fieldType.name];\n        fieldPath.push(field);\n\n        if (cycleIndex === undefined) {\n          detectCycleRecursive(fieldType);\n        } else {\n          const cyclePath = fieldPath.slice(cycleIndex);\n          const pathStr = cyclePath.map(fieldObj => fieldObj.name).join('.');\n          context.reportError(`Cannot reference Input Object \"${fieldType.name}\" within itself through a series of non-null fields: \"${pathStr}\".`, cyclePath.map(fieldObj => fieldObj.astNode));\n        }\n\n        fieldPath.pop();\n      }\n    }\n\n    fieldPathIndexByTypeName[inputObj.name] = undefined;\n  }\n}\n\nfunction getAllNodes(object) {\n  const {\n    astNode,\n    extensionASTNodes\n  } = object;\n  return astNode ? extensionASTNodes ? [astNode].concat(extensionASTNodes) : [astNode] : extensionASTNodes ?? [];\n}\n\nfunction getAllSubNodes(object, getter) {\n  let subNodes = [];\n\n  for (const node of getAllNodes(object)) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    subNodes = subNodes.concat(getter(node) ?? []);\n  }\n\n  return subNodes;\n}\n\nfunction getAllImplementsInterfaceNodes(type, iface) {\n  return getAllSubNodes(type, typeNode => typeNode.interfaces).filter(ifaceNode => ifaceNode.name.value === iface.name);\n}\n\nfunction getUnionMemberTypeNodes(union, typeName) {\n  return getAllSubNodes(union, unionNode => unionNode.types).filter(typeNode => typeNode.name.value === typeName);\n}\n\nfunction getDeprecatedDirectiveNode(definitionNode) {\n  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n  return definitionNode?.directives?.find(node => node.name.value === GraphQLDeprecatedDirective.name);\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"./GraphQLError.mjs\";\n/**\n * Given an arbitrary value, presumably thrown while attempting to execute a\n * GraphQL operation, produce a new GraphQLError aware of the location in the\n * document responsible for the original Error.\n */\n\nexport function locatedError(rawOriginalError, nodes, path) {\n  // Sometimes a non-error is thrown, wrap it as an Error instance to ensure a consistent Error interface.\n  const originalError = rawOriginalError instanceof Error ? rawOriginalError : new Error('Unexpected error value: ' + inspect(rawOriginalError)); // Note: this uses a brand-check to support GraphQL errors originating from other contexts.\n\n  if (Array.isArray(originalError.path)) {\n    return originalError;\n  }\n\n  return new GraphQLError(originalError.message, originalError.nodes ?? nodes, originalError.source, originalError.positions, path, originalError);\n}\n","import inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { GraphQLList, GraphQLNonNull } from \"../type/definition.mjs\";\n/**\n * Given a Schema and an AST node describing a type, return a GraphQLType\n * definition which applies to that type. For example, if provided the parsed\n * AST node for `[User]`, a GraphQLList instance will be returned, containing\n * the type called \"User\" found in the schema. If a type called \"User\" is not\n * found in the schema, then undefined will be returned.\n */\n\n/* eslint-disable no-redeclare */\n\nexport function typeFromAST(schema, typeNode) {\n  /* eslint-enable no-redeclare */\n  let innerType;\n\n  if (typeNode.kind === Kind.LIST_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLList(innerType);\n  }\n\n  if (typeNode.kind === Kind.NON_NULL_TYPE) {\n    innerType = typeFromAST(schema, typeNode.type);\n    return innerType && new GraphQLNonNull(innerType);\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (typeNode.kind === Kind.NAMED_TYPE) {\n    return schema.getType(typeNode.name.value);\n  } // istanbul ignore next (Not reachable. All possible type nodes have been considered)\n\n\n  false || invariant(0, 'Unexpected type node: ' + inspect(typeNode));\n}\n","import { Kind } from \"../language/kinds.mjs\";\nimport { isNode } from \"../language/ast.mjs\";\nimport { getVisitFn } from \"../language/visitor.mjs\";\nimport { isObjectType, isInterfaceType, isEnumType, isInputObjectType, isListType, isCompositeType, isInputType, isOutputType, getNullableType, getNamedType } from \"../type/definition.mjs\";\nimport { SchemaMetaFieldDef, TypeMetaFieldDef, TypeNameMetaFieldDef } from \"../type/introspection.mjs\";\nimport { typeFromAST } from \"./typeFromAST.mjs\";\n/**\n * TypeInfo is a utility class which, given a GraphQL schema, can keep track\n * of the current field and type definitions at any point in a GraphQL document\n * AST during a recursive descent by calling `enter(node)` and `leave(node)`.\n */\n\nexport class TypeInfo {\n  constructor(schema, // NOTE: this experimental optional second parameter is only needed in order\n  // to support non-spec-compliant code bases. You should never need to use it.\n  // It may disappear in the future.\n  getFieldDefFn, // Initial type may be provided in rare cases to facilitate traversals\n  // beginning somewhere other than documents.\n  initialType) {\n    this._schema = schema;\n    this._typeStack = [];\n    this._parentTypeStack = [];\n    this._inputTypeStack = [];\n    this._fieldDefStack = [];\n    this._defaultValueStack = [];\n    this._directive = null;\n    this._argument = null;\n    this._enumValue = null;\n    this._getFieldDef = getFieldDefFn ?? getFieldDef;\n\n    if (initialType) {\n      if (isInputType(initialType)) {\n        this._inputTypeStack.push(initialType);\n      }\n\n      if (isCompositeType(initialType)) {\n        this._parentTypeStack.push(initialType);\n      }\n\n      if (isOutputType(initialType)) {\n        this._typeStack.push(initialType);\n      }\n    }\n  }\n\n  getType() {\n    if (this._typeStack.length > 0) {\n      return this._typeStack[this._typeStack.length - 1];\n    }\n  }\n\n  getParentType() {\n    if (this._parentTypeStack.length > 0) {\n      return this._parentTypeStack[this._parentTypeStack.length - 1];\n    }\n  }\n\n  getInputType() {\n    if (this._inputTypeStack.length > 0) {\n      return this._inputTypeStack[this._inputTypeStack.length - 1];\n    }\n  }\n\n  getParentInputType() {\n    if (this._inputTypeStack.length > 1) {\n      return this._inputTypeStack[this._inputTypeStack.length - 2];\n    }\n  }\n\n  getFieldDef() {\n    if (this._fieldDefStack.length > 0) {\n      return this._fieldDefStack[this._fieldDefStack.length - 1];\n    }\n  }\n\n  getDefaultValue() {\n    if (this._defaultValueStack.length > 0) {\n      return this._defaultValueStack[this._defaultValueStack.length - 1];\n    }\n  }\n\n  getDirective() {\n    return this._directive;\n  }\n\n  getArgument() {\n    return this._argument;\n  }\n\n  getEnumValue() {\n    return this._enumValue;\n  }\n\n  enter(node) {\n    const schema = this._schema; // Note: many of the types below are explicitly typed as \"mixed\" to drop\n    // any assumptions of a valid schema to ensure runtime types are properly\n    // checked before continuing since TypeInfo is used as part of validation\n    // which occurs before guarantees of schema and document validity.\n\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        {\n          const namedType = getNamedType(this.getType());\n\n          this._parentTypeStack.push(isCompositeType(namedType) ? namedType : undefined);\n\n          break;\n        }\n\n      case Kind.FIELD:\n        {\n          const parentType = this.getParentType();\n          let fieldDef;\n          let fieldType;\n\n          if (parentType) {\n            fieldDef = this._getFieldDef(schema, parentType, node);\n\n            if (fieldDef) {\n              fieldType = fieldDef.type;\n            }\n          }\n\n          this._fieldDefStack.push(fieldDef);\n\n          this._typeStack.push(isOutputType(fieldType) ? fieldType : undefined);\n\n          break;\n        }\n\n      case Kind.DIRECTIVE:\n        this._directive = schema.getDirective(node.name.value);\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n        {\n          let type;\n\n          switch (node.operation) {\n            case 'query':\n              type = schema.getQueryType();\n              break;\n\n            case 'mutation':\n              type = schema.getMutationType();\n              break;\n\n            case 'subscription':\n              type = schema.getSubscriptionType();\n              break;\n          }\n\n          this._typeStack.push(isObjectType(type) ? type : undefined);\n\n          break;\n        }\n\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        {\n          const typeConditionAST = node.typeCondition;\n          const outputType = typeConditionAST ? typeFromAST(schema, typeConditionAST) : getNamedType(this.getType());\n\n          this._typeStack.push(isOutputType(outputType) ? outputType : undefined);\n\n          break;\n        }\n\n      case Kind.VARIABLE_DEFINITION:\n        {\n          const inputType = typeFromAST(schema, node.type);\n\n          this._inputTypeStack.push(isInputType(inputType) ? inputType : undefined);\n\n          break;\n        }\n\n      case Kind.ARGUMENT:\n        {\n          let argDef;\n          let argType;\n          const fieldOrDirective = this.getDirective() ?? this.getFieldDef();\n\n          if (fieldOrDirective) {\n            argDef = fieldOrDirective.args.find(arg => arg.name === node.name.value);\n\n            if (argDef) {\n              argType = argDef.type;\n            }\n          }\n\n          this._argument = argDef;\n\n          this._defaultValueStack.push(argDef ? argDef.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(argType) ? argType : undefined);\n\n          break;\n        }\n\n      case Kind.LIST:\n        {\n          const listType = getNullableType(this.getInputType());\n          const itemType = isListType(listType) ? listType.ofType : listType; // List positions never have a default value.\n\n          this._defaultValueStack.push(undefined);\n\n          this._inputTypeStack.push(isInputType(itemType) ? itemType : undefined);\n\n          break;\n        }\n\n      case Kind.OBJECT_FIELD:\n        {\n          const objectType = getNamedType(this.getInputType());\n          let inputFieldType;\n          let inputField;\n\n          if (isInputObjectType(objectType)) {\n            inputField = objectType.getFields()[node.name.value];\n\n            if (inputField) {\n              inputFieldType = inputField.type;\n            }\n          }\n\n          this._defaultValueStack.push(inputField ? inputField.defaultValue : undefined);\n\n          this._inputTypeStack.push(isInputType(inputFieldType) ? inputFieldType : undefined);\n\n          break;\n        }\n\n      case Kind.ENUM:\n        {\n          const enumType = getNamedType(this.getInputType());\n          let enumValue;\n\n          if (isEnumType(enumType)) {\n            enumValue = enumType.getValue(node.value);\n          }\n\n          this._enumValue = enumValue;\n          break;\n        }\n    }\n  }\n\n  leave(node) {\n    switch (node.kind) {\n      case Kind.SELECTION_SET:\n        this._parentTypeStack.pop();\n\n        break;\n\n      case Kind.FIELD:\n        this._fieldDefStack.pop();\n\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.DIRECTIVE:\n        this._directive = null;\n        break;\n\n      case Kind.OPERATION_DEFINITION:\n      case Kind.INLINE_FRAGMENT:\n      case Kind.FRAGMENT_DEFINITION:\n        this._typeStack.pop();\n\n        break;\n\n      case Kind.VARIABLE_DEFINITION:\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ARGUMENT:\n        this._argument = null;\n\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.LIST:\n      case Kind.OBJECT_FIELD:\n        this._defaultValueStack.pop();\n\n        this._inputTypeStack.pop();\n\n        break;\n\n      case Kind.ENUM:\n        this._enumValue = null;\n        break;\n    }\n  }\n\n}\n/**\n * Not exactly the same as the executor's definition of getFieldDef, in this\n * statically evaluated environment we do not always have an Object type,\n * and need to handle Interface and Union types.\n */\n\nfunction getFieldDef(schema, parentType, fieldNode) {\n  const name = fieldNode.name.value;\n\n  if (name === SchemaMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return SchemaMetaFieldDef;\n  }\n\n  if (name === TypeMetaFieldDef.name && schema.getQueryType() === parentType) {\n    return TypeMetaFieldDef;\n  }\n\n  if (name === TypeNameMetaFieldDef.name && isCompositeType(parentType)) {\n    return TypeNameMetaFieldDef;\n  }\n\n  if (isObjectType(parentType) || isInterfaceType(parentType)) {\n    return parentType.getFields()[name];\n  }\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter(node) {\n      typeInfo.enter(node);\n      const fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        const result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n\n    leave(node) {\n      const fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      let result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n\n  };\n}\n","import { Kind } from \"./kinds.mjs\";\nexport function isDefinitionNode(node) {\n  return isExecutableDefinitionNode(node) || isTypeSystemDefinitionNode(node) || isTypeSystemExtensionNode(node);\n}\nexport function isExecutableDefinitionNode(node) {\n  return node.kind === Kind.OPERATION_DEFINITION || node.kind === Kind.FRAGMENT_DEFINITION;\n}\nexport function isSelectionNode(node) {\n  return node.kind === Kind.FIELD || node.kind === Kind.FRAGMENT_SPREAD || node.kind === Kind.INLINE_FRAGMENT;\n}\nexport function isValueNode(node) {\n  return node.kind === Kind.VARIABLE || node.kind === Kind.INT || node.kind === Kind.FLOAT || node.kind === Kind.STRING || node.kind === Kind.BOOLEAN || node.kind === Kind.NULL || node.kind === Kind.ENUM || node.kind === Kind.LIST || node.kind === Kind.OBJECT;\n}\nexport function isTypeNode(node) {\n  return node.kind === Kind.NAMED_TYPE || node.kind === Kind.LIST_TYPE || node.kind === Kind.NON_NULL_TYPE;\n}\nexport function isTypeSystemDefinitionNode(node) {\n  return node.kind === Kind.SCHEMA_DEFINITION || isTypeDefinitionNode(node) || node.kind === Kind.DIRECTIVE_DEFINITION;\n}\nexport function isTypeDefinitionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_DEFINITION || node.kind === Kind.OBJECT_TYPE_DEFINITION || node.kind === Kind.INTERFACE_TYPE_DEFINITION || node.kind === Kind.UNION_TYPE_DEFINITION || node.kind === Kind.ENUM_TYPE_DEFINITION || node.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION;\n}\nexport function isTypeSystemExtensionNode(node) {\n  return node.kind === Kind.SCHEMA_EXTENSION || isTypeExtensionNode(node);\n}\nexport function isTypeExtensionNode(node) {\n  return node.kind === Kind.SCALAR_TYPE_EXTENSION || node.kind === Kind.OBJECT_TYPE_EXTENSION || node.kind === Kind.INTERFACE_TYPE_EXTENSION || node.kind === Kind.UNION_TYPE_EXTENSION || node.kind === Kind.ENUM_TYPE_EXTENSION || node.kind === Kind.INPUT_OBJECT_TYPE_EXTENSION;\n}\n","import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isTypeDefinitionNode, isTypeSystemDefinitionNode, isTypeSystemExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedScalarTypes } from \"../../type/scalars.mjs\";\nimport { introspectionTypes } from \"../../type/introspection.mjs\";\n\n/**\n * Known type names\n *\n * A GraphQL document is only valid if referenced types (specifically\n * variable definitions and fragment conditions) are defined by the type schema.\n */\nexport function KnownTypeNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypesMap = schema ? schema.getTypeMap() : Object.create(null);\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = true;\n    }\n  }\n\n  const typeNames = Object.keys(existingTypesMap).concat(Object.keys(definedTypes));\n  return {\n    NamedType(node, _1, parent, _2, ancestors) {\n      const typeName = node.name.value;\n\n      if (!existingTypesMap[typeName] && !definedTypes[typeName]) {\n        const definitionNode = ancestors[2] ?? parent;\n        const isSDL = definitionNode != null && isSDLNode(definitionNode);\n\n        if (isSDL && isStandardTypeName(typeName)) {\n          return;\n        }\n\n        const suggestedTypes = suggestionList(typeName, isSDL ? standardTypeNames.concat(typeNames) : typeNames);\n        context.reportError(new GraphQLError(`Unknown type \"${typeName}\".` + didYouMean(suggestedTypes), node));\n      }\n    }\n\n  };\n}\nconst standardTypeNames = [...specifiedScalarTypes, ...introspectionTypes].map(type => type.name);\n\nfunction isStandardTypeName(typeName) {\n  return standardTypeNames.indexOf(typeName) !== -1;\n}\n\nfunction isSDLNode(value) {\n  return !Array.isArray(value) && (isTypeSystemDefinitionNode(value) || isTypeSystemExtensionNode(value));\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused fragments\n *\n * A GraphQL document is only valid if all fragment definitions are spread\n * within operations, or spread within other fragments spread within operations.\n */\nexport function NoUnusedFragmentsRule(context) {\n  const operationDefs = [];\n  const fragmentDefs = [];\n  return {\n    OperationDefinition(node) {\n      operationDefs.push(node);\n      return false;\n    },\n\n    FragmentDefinition(node) {\n      fragmentDefs.push(node);\n      return false;\n    },\n\n    Document: {\n      leave() {\n        const fragmentNameUsed = Object.create(null);\n\n        for (const operation of operationDefs) {\n          for (const fragment of context.getRecursivelyReferencedFragments(operation)) {\n            fragmentNameUsed[fragment.name.value] = true;\n          }\n        }\n\n        for (const fragmentDef of fragmentDefs) {\n          const fragName = fragmentDef.name.value;\n\n          if (fragmentNameUsed[fragName] !== true) {\n            context.reportError(new GraphQLError(`Fragment \"${fragName}\" is never used.`, fragmentDef));\n          }\n        }\n      }\n\n    }\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { DirectiveLocation } from \"../../language/directiveLocation.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known directives\n *\n * A GraphQL document is only valid if all `@directives` are known by the\n * schema and legally positioned.\n */\nexport function KnownDirectivesRule(context) {\n  const locationsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    locationsMap[directive.name] = directive.locations;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      locationsMap[def.name.value] = def.locations.map(name => name.value);\n    }\n  }\n\n  return {\n    Directive(node, _key, _parent, _path, ancestors) {\n      const name = node.name.value;\n      const locations = locationsMap[name];\n\n      if (!locations) {\n        context.reportError(new GraphQLError(`Unknown directive \"@${name}\".`, node));\n        return;\n      }\n\n      const candidateLocation = getDirectiveLocationForASTPath(ancestors);\n\n      if (candidateLocation && locations.indexOf(candidateLocation) === -1) {\n        context.reportError(new GraphQLError(`Directive \"@${name}\" may not be used on ${candidateLocation}.`, node));\n      }\n    }\n\n  };\n}\n\nfunction getDirectiveLocationForASTPath(ancestors) {\n  const appliedTo = ancestors[ancestors.length - 1];\n  !Array.isArray(appliedTo) || invariant(0);\n\n  switch (appliedTo.kind) {\n    case Kind.OPERATION_DEFINITION:\n      return getDirectiveLocationForOperation(appliedTo.operation);\n\n    case Kind.FIELD:\n      return DirectiveLocation.FIELD;\n\n    case Kind.FRAGMENT_SPREAD:\n      return DirectiveLocation.FRAGMENT_SPREAD;\n\n    case Kind.INLINE_FRAGMENT:\n      return DirectiveLocation.INLINE_FRAGMENT;\n\n    case Kind.FRAGMENT_DEFINITION:\n      return DirectiveLocation.FRAGMENT_DEFINITION;\n\n    case Kind.VARIABLE_DEFINITION:\n      return DirectiveLocation.VARIABLE_DEFINITION;\n\n    case Kind.SCHEMA_DEFINITION:\n    case Kind.SCHEMA_EXTENSION:\n      return DirectiveLocation.SCHEMA;\n\n    case Kind.SCALAR_TYPE_DEFINITION:\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return DirectiveLocation.SCALAR;\n\n    case Kind.OBJECT_TYPE_DEFINITION:\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.OBJECT;\n\n    case Kind.FIELD_DEFINITION:\n      return DirectiveLocation.FIELD_DEFINITION;\n\n    case Kind.INTERFACE_TYPE_DEFINITION:\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return DirectiveLocation.INTERFACE;\n\n    case Kind.UNION_TYPE_DEFINITION:\n    case Kind.UNION_TYPE_EXTENSION:\n      return DirectiveLocation.UNION;\n\n    case Kind.ENUM_TYPE_DEFINITION:\n    case Kind.ENUM_TYPE_EXTENSION:\n      return DirectiveLocation.ENUM;\n\n    case Kind.ENUM_VALUE_DEFINITION:\n      return DirectiveLocation.ENUM_VALUE;\n\n    case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return DirectiveLocation.INPUT_OBJECT;\n\n    case Kind.INPUT_VALUE_DEFINITION:\n      {\n        const parentNode = ancestors[ancestors.length - 3];\n        return parentNode.kind === Kind.INPUT_OBJECT_TYPE_DEFINITION ? DirectiveLocation.INPUT_FIELD_DEFINITION : DirectiveLocation.ARGUMENT_DEFINITION;\n      }\n  }\n}\n\nfunction getDirectiveLocationForOperation(operation) {\n  switch (operation) {\n    case 'query':\n      return DirectiveLocation.QUERY;\n\n    case 'mutation':\n      return DirectiveLocation.MUTATION;\n\n    case 'subscription':\n      return DirectiveLocation.SUBSCRIPTION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected operation: ' + inspect(operation));\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../../language/predicates.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Unique directive names per location\n *\n * A GraphQL document is only valid if all non-repeatable directives at\n * a given location are uniquely named.\n */\nexport function UniqueDirectivesPerLocationRule(context) {\n  const uniqueDirectiveMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    uniqueDirectiveMap[directive.name] = !directive.isRepeatable;\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      uniqueDirectiveMap[def.name.value] = !def.repeatable;\n    }\n  }\n\n  const schemaDirectives = Object.create(null);\n  const typeDirectivesMap = Object.create(null);\n  return {\n    // Many different AST nodes may contain directives. Rather than listing\n    // them all, just listen for entering any node, and check to see if it\n    // defines any directives.\n    enter(node) {\n      if (node.directives == null) {\n        return;\n      }\n\n      let seenDirectives;\n\n      if (node.kind === Kind.SCHEMA_DEFINITION || node.kind === Kind.SCHEMA_EXTENSION) {\n        seenDirectives = schemaDirectives;\n      } else if (isTypeDefinitionNode(node) || isTypeExtensionNode(node)) {\n        const typeName = node.name.value;\n        seenDirectives = typeDirectivesMap[typeName];\n\n        if (seenDirectives === undefined) {\n          typeDirectivesMap[typeName] = seenDirectives = Object.create(null);\n        }\n      } else {\n        seenDirectives = Object.create(null);\n      }\n\n      for (const directive of node.directives) {\n        const directiveName = directive.name.value;\n\n        if (uniqueDirectiveMap[directiveName]) {\n          if (seenDirectives[directiveName]) {\n            context.reportError(new GraphQLError(`The directive \"@${directiveName}\" can only be used once at this location.`, [seenDirectives[directiveName], directive]));\n          } else {\n            seenDirectives[directiveName] = directive;\n          }\n        }\n      }\n    }\n\n  };\n}\n","import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\n\n/**\n * Known argument names\n *\n * A GraphQL field is only valid if all supplied arguments are defined by\n * that field.\n */\nexport function KnownArgumentNamesRule(context) {\n  return { // eslint-disable-next-line new-cap\n    ...KnownArgumentNamesOnDirectivesRule(context),\n\n    Argument(argNode) {\n      const argDef = context.getArgument();\n      const fieldDef = context.getFieldDef();\n      const parentType = context.getParentType();\n\n      if (!argDef && fieldDef && parentType) {\n        const argName = argNode.name.value;\n        const knownArgsNames = fieldDef.args.map(arg => arg.name);\n        const suggestions = suggestionList(argName, knownArgsNames);\n        context.reportError(new GraphQLError(`Unknown argument \"${argName}\" on field \"${parentType.name}.${fieldDef.name}\".` + didYouMean(suggestions), argNode));\n      }\n    }\n\n  };\n}\n/**\n * @internal\n */\n\nexport function KnownArgumentNamesOnDirectivesRule(context) {\n  const directiveArgs = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    directiveArgs[directive.name] = directive.args.map(arg => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const argsNodes = def.arguments ?? [];\n      directiveArgs[def.name.value] = argsNodes.map(arg => arg.name.value);\n    }\n  }\n\n  return {\n    Directive(directiveNode) {\n      const directiveName = directiveNode.name.value;\n      const knownArgs = directiveArgs[directiveName];\n\n      if (directiveNode.arguments && knownArgs) {\n        for (const argNode of directiveNode.arguments) {\n          const argName = argNode.name.value;\n\n          if (knownArgs.indexOf(argName) === -1) {\n            const suggestions = suggestionList(argName, knownArgs);\n            context.reportError(new GraphQLError(`Unknown argument \"${argName}\" on directive \"@${directiveName}\".` + didYouMean(suggestions), argNode));\n          }\n        }\n      }\n\n      return false;\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique argument names\n *\n * A GraphQL field or directive is only valid if all supplied arguments are\n * uniquely named.\n */\nexport function UniqueArgumentNamesRule(context) {\n  let knownArgNames = Object.create(null);\n  return {\n    Field() {\n      knownArgNames = Object.create(null);\n    },\n\n    Directive() {\n      knownArgNames = Object.create(null);\n    },\n\n    Argument(node) {\n      const argName = node.name.value;\n\n      if (knownArgNames[argName]) {\n        context.reportError(new GraphQLError(`There can be only one argument named \"${argName}\".`, [knownArgNames[argName], node.name]));\n      } else {\n        knownArgNames[argName] = node.name;\n      }\n\n      return false;\n    }\n\n  };\n}\n","import objectValues from \"../../polyfills/objectValues.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType, isRequiredInputField, getNullableType, getNamedType } from \"../../type/definition.mjs\";\n\n/**\n * Value literals of correct type\n *\n * A GraphQL document is only valid if all value literals are of the type\n * expected at their position.\n */\nexport function ValuesOfCorrectTypeRule(context) {\n  return {\n    ListValue(node) {\n      // Note: TypeInfo will traverse into a list's item type, so look to the\n      // parent input type to check if it is a list.\n      const type = getNullableType(context.getParentInputType());\n\n      if (!isListType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      }\n    },\n\n    ObjectValue(node) {\n      const type = getNamedType(context.getInputType());\n\n      if (!isInputObjectType(type)) {\n        isValidValueNode(context, node);\n        return false; // Don't traverse further.\n      } // Ensure every required field exists.\n\n\n      const fieldNodeMap = keyMap(node.fields, field => field.name.value);\n\n      for (const fieldDef of objectValues(type.getFields())) {\n        const fieldNode = fieldNodeMap[fieldDef.name];\n\n        if (!fieldNode && isRequiredInputField(fieldDef)) {\n          const typeStr = inspect(fieldDef.type);\n          context.reportError(new GraphQLError(`Field \"${type.name}.${fieldDef.name}\" of required type \"${typeStr}\" was not provided.`, node));\n        }\n      }\n    },\n\n    ObjectField(node) {\n      const parentType = getNamedType(context.getParentInputType());\n      const fieldType = context.getInputType();\n\n      if (!fieldType && isInputObjectType(parentType)) {\n        const suggestions = suggestionList(node.name.value, Object.keys(parentType.getFields()));\n        context.reportError(new GraphQLError(`Field \"${node.name.value}\" is not defined by type \"${parentType.name}\".` + didYouMean(suggestions), node));\n      }\n    },\n\n    NullValue(node) {\n      const type = context.getInputType();\n\n      if (isNonNullType(type)) {\n        context.reportError(new GraphQLError(`Expected value of type \"${inspect(type)}\", found ${print(node)}.`, node));\n      }\n    },\n\n    EnumValue: node => isValidValueNode(context, node),\n    IntValue: node => isValidValueNode(context, node),\n    FloatValue: node => isValidValueNode(context, node),\n    StringValue: node => isValidValueNode(context, node),\n    BooleanValue: node => isValidValueNode(context, node)\n  };\n}\n/**\n * Any value literal may be a valid representation of a Scalar, depending on\n * that scalar type.\n */\n\nfunction isValidValueNode(context, node) {\n  // Report any error at the full type expected by the location.\n  const locationType = context.getInputType();\n\n  if (!locationType) {\n    return;\n  }\n\n  const type = getNamedType(locationType);\n\n  if (!isLeafType(type)) {\n    const typeStr = inspect(locationType);\n    context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}.`, node));\n    return;\n  } // Scalars and Enums determine if a literal value is valid via parseLiteral(),\n  // which may throw or return an invalid value to indicate failure.\n\n\n  try {\n    const parseResult = type.parseLiteral(node, undefined\n    /* variables */\n    );\n\n    if (parseResult === undefined) {\n      const typeStr = inspect(locationType);\n      context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}.`, node));\n    }\n  } catch (error) {\n    const typeStr = inspect(locationType);\n\n    if (error instanceof GraphQLError) {\n      context.reportError(error);\n    } else {\n      context.reportError(new GraphQLError(`Expected value of type \"${typeStr}\", found ${print(node)}; ` + error.message, node, undefined, undefined, undefined, error));\n    }\n  }\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport keyMap from \"../../jsutils/keyMap.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { specifiedDirectives } from \"../../type/directives.mjs\";\nimport { isType, isRequiredArgument } from \"../../type/definition.mjs\";\n\n/**\n * Provided required arguments\n *\n * A field or directive is only valid if all required (non-null without a\n * default value) field arguments have been provided.\n */\nexport function ProvidedRequiredArgumentsRule(context) {\n  return { // eslint-disable-next-line new-cap\n    ...ProvidedRequiredArgumentsOnDirectivesRule(context),\n    Field: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(fieldNode) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          return false;\n        } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n        const argNodes = fieldNode.arguments ?? [];\n        const argNodeMap = keyMap(argNodes, arg => arg.name.value);\n\n        for (const argDef of fieldDef.args) {\n          const argNode = argNodeMap[argDef.name];\n\n          if (!argNode && isRequiredArgument(argDef)) {\n            const argTypeStr = inspect(argDef.type);\n            context.reportError(new GraphQLError(`Field \"${fieldDef.name}\" argument \"${argDef.name}\" of type \"${argTypeStr}\" is required, but it was not provided.`, fieldNode));\n          }\n        }\n      }\n\n    }\n  };\n}\n/**\n * @internal\n */\n\nexport function ProvidedRequiredArgumentsOnDirectivesRule(context) {\n  const requiredArgsMap = Object.create(null);\n  const schema = context.getSchema();\n  const definedDirectives = schema ? schema.getDirectives() : specifiedDirectives;\n\n  for (const directive of definedDirectives) {\n    requiredArgsMap[directive.name] = keyMap(directive.args.filter(isRequiredArgument), arg => arg.name);\n  }\n\n  const astDefinitions = context.getDocument().definitions;\n\n  for (const def of astDefinitions) {\n    if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const argNodes = def.arguments ?? [];\n      requiredArgsMap[def.name.value] = keyMap(argNodes.filter(isRequiredArgumentNode), arg => arg.name.value);\n    }\n  }\n\n  return {\n    Directive: {\n      // Validate on leave to allow for deeper errors to appear first.\n      leave(directiveNode) {\n        const directiveName = directiveNode.name.value;\n        const requiredArgs = requiredArgsMap[directiveName];\n\n        if (requiredArgs) {\n          // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n          const argNodes = directiveNode.arguments ?? [];\n          const argNodeMap = keyMap(argNodes, arg => arg.name.value);\n\n          for (const argName of Object.keys(requiredArgs)) {\n            if (!argNodeMap[argName]) {\n              const argType = requiredArgs[argName].type;\n              const argTypeStr = isType(argType) ? inspect(argType) : print(argType);\n              context.reportError(new GraphQLError(`Directive \"@${directiveName}\" argument \"${argName}\" of type \"${argTypeStr}\" is required, but it was not provided.`, directiveNode));\n            }\n          }\n        }\n      }\n\n    }\n  };\n}\n\nfunction isRequiredArgumentNode(arg) {\n  return arg.type.kind === Kind.NON_NULL_TYPE && arg.defaultValue == null;\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isNonNullType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { isTypeSubTypeOf } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Variables passed to field arguments conform to type\n */\nexport function VariablesInAllowedPositionRule(context) {\n  let varDefMap = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        varDefMap = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node,\n          type,\n          defaultValue\n        } of usages) {\n          const varName = node.name.value;\n          const varDef = varDefMap[varName];\n\n          if (varDef && type) {\n            // A var type is allowed if it is the same or more strict (e.g. is\n            // a subtype of) than the expected type. It can be more strict if\n            // the variable type is non-null when the expected type is nullable.\n            // If both are list types, the variable item type can be more strict\n            // than the expected item type (contravariant).\n            const schema = context.getSchema();\n            const varType = typeFromAST(schema, varDef.type);\n\n            if (varType && !allowedVariableUsage(schema, varType, varDef.defaultValue, type, defaultValue)) {\n              const varTypeStr = inspect(varType);\n              const typeStr = inspect(type);\n              context.reportError(new GraphQLError(`Variable \"$${varName}\" of type \"${varTypeStr}\" used in position expecting type \"${typeStr}\".`, [varDef, node]));\n            }\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      varDefMap[node.variable.name.value] = node;\n    }\n\n  };\n}\n/**\n * Returns true if the variable is allowed in the location it was found,\n * which includes considering if default values exist for either the variable\n * or the location at which it is located.\n */\n\nfunction allowedVariableUsage(schema, varType, varDefaultValue, locationType, locationDefaultValue) {\n  if (isNonNullType(locationType) && !isNonNullType(varType)) {\n    const hasNonNullVariableDefaultValue = varDefaultValue != null && varDefaultValue.kind !== Kind.NULL;\n    const hasLocationDefaultValue = locationDefaultValue !== undefined;\n\n    if (!hasNonNullVariableDefaultValue && !hasLocationDefaultValue) {\n      return false;\n    }\n\n    const nullableLocationType = locationType.ofType;\n    return isTypeSubTypeOf(schema, varType, nullableLocationType);\n  }\n\n  return isTypeSubTypeOf(schema, varType, locationType);\n}\n","import objectEntries from \"../../polyfills/objectEntries.mjs\";\nimport inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { getNamedType, isNonNullType, isLeafType, isObjectType, isListType, isInterfaceType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\nfunction reasonMessage(reason) {\n  if (Array.isArray(reason)) {\n    return reason.map(([responseName, subReason]) => `subfields \"${responseName}\" conflict because ` + reasonMessage(subReason)).join(' and ');\n  }\n\n  return reason;\n}\n/**\n * Overlapping fields can be merged\n *\n * A selection set is only valid if all fields (including spreading any\n * fragments) either correspond to distinct response names or can be merged\n * without ambiguity.\n */\n\n\nexport function OverlappingFieldsCanBeMergedRule(context) {\n  // A memoization for when two fragments are compared \"between\" each other for\n  // conflicts. Two fragments may be compared many times, so memoizing this can\n  // dramatically improve the performance of this validator.\n  const comparedFragmentPairs = new PairSet(); // A cache for the \"field map\" and list of fragment names found in any given\n  // selection set. Selection sets may be asked for this information multiple\n  // times, so this improves the performance of this validator.\n\n  const cachedFieldsAndFragmentNames = new Map();\n  return {\n    SelectionSet(selectionSet) {\n      const conflicts = findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, context.getParentType(), selectionSet);\n\n      for (const [[responseName, reason], fields1, fields2] of conflicts) {\n        const reasonMsg = reasonMessage(reason);\n        context.reportError(new GraphQLError(`Fields \"${responseName}\" conflict because ${reasonMsg}. Use different aliases on the fields to fetch both if this was intentional.`, fields1.concat(fields2)));\n      }\n    }\n\n  };\n}\n\n/**\n * Algorithm:\n *\n * Conflicts occur when two fields exist in a query which will produce the same\n * response name, but represent differing values, thus creating a conflict.\n * The algorithm below finds all conflicts via making a series of comparisons\n * between fields. In order to compare as few fields as possible, this makes\n * a series of comparisons \"within\" sets of fields and \"between\" sets of fields.\n *\n * Given any selection set, a collection produces both a set of fields by\n * also including all inline fragments, as well as a list of fragments\n * referenced by fragment spreads.\n *\n * A) Each selection set represented in the document first compares \"within\" its\n * collected set of fields, finding any conflicts between every pair of\n * overlapping fields.\n * Note: This is the *only time* that a the fields \"within\" a set are compared\n * to each other. After this only fields \"between\" sets are compared.\n *\n * B) Also, if any fragment is referenced in a selection set, then a\n * comparison is made \"between\" the original set of fields and the\n * referenced fragment.\n *\n * C) Also, if multiple fragments are referenced, then comparisons\n * are made \"between\" each referenced fragment.\n *\n * D) When comparing \"between\" a set of fields and a referenced fragment, first\n * a comparison is made between each field in the original set of fields and\n * each field in the the referenced set of fields.\n *\n * E) Also, if any fragment is referenced in the referenced selection set,\n * then a comparison is made \"between\" the original set of fields and the\n * referenced fragment (recursively referring to step D).\n *\n * F) When comparing \"between\" two fragments, first a comparison is made between\n * each field in the first referenced set of fields and each field in the the\n * second referenced set of fields.\n *\n * G) Also, any fragments referenced by the first must be compared to the\n * second, and any fragments referenced by the second must be compared to the\n * first (recursively referring to step F).\n *\n * H) When comparing two fields, if both have selection sets, then a comparison\n * is made \"between\" both selection sets, first comparing the set of fields in\n * the first selection set with the set of fields in the second.\n *\n * I) Also, if any fragment is referenced in either selection set, then a\n * comparison is made \"between\" the other set of fields and the\n * referenced fragment.\n *\n * J) Also, if two fragments are referenced in both selection sets, then a\n * comparison is made \"between\" the two fragments.\n *\n */\n// Find all conflicts found \"within\" a selection set, including those found\n// via spreading in fragments. Called when visiting each SelectionSet in the\n// GraphQL Document.\nfunction findConflictsWithinSelectionSet(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentType, selectionSet) {\n  const conflicts = [];\n  const [fieldMap, fragmentNames] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet); // (A) Find find all conflicts \"within\" the fields of this selection set.\n  // Note: this is the *only place* `collectConflictsWithin` is called.\n\n  collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap);\n\n  if (fragmentNames.length !== 0) {\n    // (B) Then collect conflicts between these fields and those represented by\n    // each spread fragment name found.\n    for (let i = 0; i < fragmentNames.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fieldMap, fragmentNames[i]); // (C) Then compare this fragment with all other fragments found in this\n      // selection set to collect conflicts between fragments spread together.\n      // This compares each item in the list of fragment names to every other\n      // item in that same list (except for itself).\n\n      for (let j = i + 1; j < fragmentNames.length; j++) {\n        collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, fragmentNames[i], fragmentNames[j]);\n      }\n    }\n  }\n\n  return conflicts;\n} // Collect all conflicts found between a set of fields and a fragment reference\n// including via spreading in any nested fragments.\n\n\nfunction collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentName) {\n  const fragment = context.getFragment(fragmentName);\n\n  if (!fragment) {\n    return;\n  }\n\n  const [fieldMap2, fragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment); // Do not compare a fragment's fieldMap to itself.\n\n  if (fieldMap === fieldMap2) {\n    return;\n  } // (D) First collect any conflicts between the provided collection of fields\n  // and the collection of fields represented by the given fragment.\n\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fieldMap2); // (E) Then collect any conflicts between the provided collection of fields\n  // and any fragment names found in the given fragment.\n\n  for (let i = 0; i < fragmentNames2.length; i++) {\n    collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap, fragmentNames2[i]);\n  }\n} // Collect all conflicts found between two fragments, including via spreading in\n// any nested fragments.\n\n\nfunction collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentName2) {\n  // No need to compare a fragment to itself.\n  if (fragmentName1 === fragmentName2) {\n    return;\n  } // Memoize so two fragments are not compared for conflicts more than once.\n\n\n  if (comparedFragmentPairs.has(fragmentName1, fragmentName2, areMutuallyExclusive)) {\n    return;\n  }\n\n  comparedFragmentPairs.add(fragmentName1, fragmentName2, areMutuallyExclusive);\n  const fragment1 = context.getFragment(fragmentName1);\n  const fragment2 = context.getFragment(fragmentName2);\n\n  if (!fragment1 || !fragment2) {\n    return;\n  }\n\n  const [fieldMap1, fragmentNames1] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment1);\n  const [fieldMap2, fragmentNames2] = getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment2); // (F) First, collect all conflicts between these two collections of fields\n  // (not including any nested fragments).\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (G) Then collect conflicts between the first fragment and any nested\n  // fragments spread in the second fragment.\n\n  for (let j = 0; j < fragmentNames2.length; j++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentName1, fragmentNames2[j]);\n  } // (G) Then collect conflicts between the second fragment and any nested\n  // fragments spread in the first fragment.\n\n\n  for (let i = 0; i < fragmentNames1.length; i++) {\n    collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentName2);\n  }\n} // Find all conflicts found between two selection sets, including those found\n// via spreading in fragments. Called when determining if conflicts exist\n// between the sub-fields of two overlapping fields.\n\n\nfunction findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, parentType1, selectionSet1, parentType2, selectionSet2) {\n  const conflicts = [];\n  const [fieldMap1, fragmentNames1] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType1, selectionSet1);\n  const [fieldMap2, fragmentNames2] = getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType2, selectionSet2); // (H) First, collect all conflicts between these two collections of field.\n\n  collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fieldMap2); // (I) Then collect conflicts between the first collection of fields and\n  // those referenced by each fragment name associated with the second.\n\n  if (fragmentNames2.length !== 0) {\n    for (let j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap1, fragmentNames2[j]);\n    }\n  } // (I) Then collect conflicts between the second collection of fields and\n  // those referenced by each fragment name associated with the first.\n\n\n  if (fragmentNames1.length !== 0) {\n    for (let i = 0; i < fragmentNames1.length; i++) {\n      collectConflictsBetweenFieldsAndFragment(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fieldMap2, fragmentNames1[i]);\n    }\n  } // (J) Also collect conflicts between any fragment names by the first and\n  // fragment names by the second. This compares each item in the first set of\n  // names to each item in the second set of names.\n\n\n  for (let i = 0; i < fragmentNames1.length; i++) {\n    for (let j = 0; j < fragmentNames2.length; j++) {\n      collectConflictsBetweenFragments(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, fragmentNames1[i], fragmentNames2[j]);\n    }\n  }\n\n  return conflicts;\n} // Collect all Conflicts \"within\" one collection of fields.\n\n\nfunction collectConflictsWithin(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, fieldMap) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For every response name, if there are multiple fields, they\n  // must be compared to find a potential conflict.\n  for (const [responseName, fields] of objectEntries(fieldMap)) {\n    // This compares every field in the list to every other field in this list\n    // (except to itself). If the list only has one item, nothing needs to\n    // be compared.\n    if (fields.length > 1) {\n      for (let i = 0; i < fields.length; i++) {\n        for (let j = i + 1; j < fields.length; j++) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, false, // within one collection is never mutually exclusive\n          responseName, fields[i], fields[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Collect all Conflicts between two collections of fields. This is similar to,\n// but different from the `collectConflictsWithin` function above. This check\n// assumes that `collectConflictsWithin` has already been called on each\n// provided collection of fields. This is true because this validator traverses\n// each individual selection set.\n\n\nfunction collectConflictsBetween(context, conflicts, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, fieldMap1, fieldMap2) {\n  // A field map is a keyed collection, where each key represents a response\n  // name and the value at that key is a list of all fields which provide that\n  // response name. For any response name which appears in both provided field\n  // maps, each field from the first field map must be compared to every field\n  // in the second field map to find potential conflicts.\n  for (const responseName of Object.keys(fieldMap1)) {\n    const fields2 = fieldMap2[responseName];\n\n    if (fields2) {\n      const fields1 = fieldMap1[responseName];\n\n      for (let i = 0; i < fields1.length; i++) {\n        for (let j = 0; j < fields2.length; j++) {\n          const conflict = findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, fields1[i], fields2[j]);\n\n          if (conflict) {\n            conflicts.push(conflict);\n          }\n        }\n      }\n    }\n  }\n} // Determines if there is a conflict between two particular fields, including\n// comparing their sub-fields.\n\n\nfunction findConflict(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, parentFieldsAreMutuallyExclusive, responseName, field1, field2) {\n  const [parentType1, node1, def1] = field1;\n  const [parentType2, node2, def2] = field2; // If it is known that two fields could not possibly apply at the same\n  // time, due to the parent types, then it is safe to permit them to diverge\n  // in aliased field or arguments used as they will not present any ambiguity\n  // by differing.\n  // It is known that two parent types could never overlap if they are\n  // different Object types. Interface or Union types might overlap - if not\n  // in the current state of the schema, then perhaps in some future version,\n  // thus may not safely diverge.\n\n  const areMutuallyExclusive = parentFieldsAreMutuallyExclusive || parentType1 !== parentType2 && isObjectType(parentType1) && isObjectType(parentType2);\n\n  if (!areMutuallyExclusive) {\n    // Two aliases must refer to the same field.\n    const name1 = node1.name.value;\n    const name2 = node2.name.value;\n\n    if (name1 !== name2) {\n      return [[responseName, `\"${name1}\" and \"${name2}\" are different fields`], [node1], [node2]];\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    const args1 = node1.arguments ?? []; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n    const args2 = node2.arguments ?? []; // Two field calls must have the same arguments.\n\n    if (!sameArguments(args1, args2)) {\n      return [[responseName, 'they have differing arguments'], [node1], [node2]];\n    }\n  } // The return type for each field.\n\n\n  const type1 = def1?.type;\n  const type2 = def2?.type;\n\n  if (type1 && type2 && doTypesConflict(type1, type2)) {\n    return [[responseName, `they return conflicting types \"${inspect(type1)}\" and \"${inspect(type2)}\"`], [node1], [node2]];\n  } // Collect and compare sub-fields. Use the same \"visited fragment names\" list\n  // for both collections so fields in a fragment reference are never\n  // compared to themselves.\n\n\n  const selectionSet1 = node1.selectionSet;\n  const selectionSet2 = node2.selectionSet;\n\n  if (selectionSet1 && selectionSet2) {\n    const conflicts = findConflictsBetweenSubSelectionSets(context, cachedFieldsAndFragmentNames, comparedFragmentPairs, areMutuallyExclusive, getNamedType(type1), selectionSet1, getNamedType(type2), selectionSet2);\n    return subfieldConflicts(conflicts, responseName, node1, node2);\n  }\n}\n\nfunction sameArguments(arguments1, arguments2) {\n  if (arguments1.length !== arguments2.length) {\n    return false;\n  }\n\n  return arguments1.every(argument1 => {\n    const argument2 = arguments2.find(argument => argument.name.value === argument1.name.value);\n\n    if (!argument2) {\n      return false;\n    }\n\n    return sameValue(argument1.value, argument2.value);\n  });\n}\n\nfunction sameValue(value1, value2) {\n  return print(value1) === print(value2);\n} // Two types conflict if both types could not apply to a value simultaneously.\n// Composite types are ignored as their individual field types will be compared\n// later recursively. However List and Non-Null types must match.\n\n\nfunction doTypesConflict(type1, type2) {\n  if (isListType(type1)) {\n    return isListType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isListType(type2)) {\n    return true;\n  }\n\n  if (isNonNullType(type1)) {\n    return isNonNullType(type2) ? doTypesConflict(type1.ofType, type2.ofType) : true;\n  }\n\n  if (isNonNullType(type2)) {\n    return true;\n  }\n\n  if (isLeafType(type1) || isLeafType(type2)) {\n    return type1 !== type2;\n  }\n\n  return false;\n} // Given a selection set, return the collection of fields (a mapping of response\n// name to field nodes and definitions) as well as a list of fragment names\n// referenced via fragment spreads.\n\n\nfunction getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, parentType, selectionSet) {\n  let cached = cachedFieldsAndFragmentNames.get(selectionSet);\n\n  if (!cached) {\n    const nodeAndDefs = Object.create(null);\n    const fragmentNames = Object.create(null);\n\n    _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames);\n\n    cached = [nodeAndDefs, Object.keys(fragmentNames)];\n    cachedFieldsAndFragmentNames.set(selectionSet, cached);\n  }\n\n  return cached;\n} // Given a reference to a fragment, return the represented collection of fields\n// as well as a list of nested fragment names referenced via fragment spreads.\n\n\nfunction getReferencedFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragment) {\n  // Short-circuit building a type from the node if possible.\n  const cached = cachedFieldsAndFragmentNames.get(fragment.selectionSet);\n\n  if (cached) {\n    return cached;\n  }\n\n  const fragmentType = typeFromAST(context.getSchema(), fragment.typeCondition);\n  return getFieldsAndFragmentNames(context, cachedFieldsAndFragmentNames, fragmentType, fragment.selectionSet);\n}\n\nfunction _collectFieldsAndFragmentNames(context, parentType, selectionSet, nodeAndDefs, fragmentNames) {\n  for (const selection of selectionSet.selections) {\n    switch (selection.kind) {\n      case Kind.FIELD:\n        {\n          const fieldName = selection.name.value;\n          let fieldDef;\n\n          if (isObjectType(parentType) || isInterfaceType(parentType)) {\n            fieldDef = parentType.getFields()[fieldName];\n          }\n\n          const responseName = selection.alias ? selection.alias.value : fieldName;\n\n          if (!nodeAndDefs[responseName]) {\n            nodeAndDefs[responseName] = [];\n          }\n\n          nodeAndDefs[responseName].push([parentType, selection, fieldDef]);\n          break;\n        }\n\n      case Kind.FRAGMENT_SPREAD:\n        fragmentNames[selection.name.value] = true;\n        break;\n\n      case Kind.INLINE_FRAGMENT:\n        {\n          const typeCondition = selection.typeCondition;\n          const inlineFragmentType = typeCondition ? typeFromAST(context.getSchema(), typeCondition) : parentType;\n\n          _collectFieldsAndFragmentNames(context, inlineFragmentType, selection.selectionSet, nodeAndDefs, fragmentNames);\n\n          break;\n        }\n    }\n  }\n} // Given a series of Conflicts which occurred between two sub-fields, generate\n// a single Conflict.\n\n\nfunction subfieldConflicts(conflicts, responseName, node1, node2) {\n  if (conflicts.length > 0) {\n    return [[responseName, conflicts.map(([reason]) => reason)], conflicts.reduce((allFields, [, fields1]) => allFields.concat(fields1), [node1]), conflicts.reduce((allFields, [,, fields2]) => allFields.concat(fields2), [node2])];\n  }\n}\n/**\n * A way to keep track of pairs of things when the ordering of the pair does\n * not matter. We do this by maintaining a sort of double adjacency sets.\n */\n\n\nclass PairSet {\n  constructor() {\n    this._data = Object.create(null);\n  }\n\n  has(a, b, areMutuallyExclusive) {\n    const first = this._data[a];\n    const result = first && first[b];\n\n    if (result === undefined) {\n      return false;\n    } // areMutuallyExclusive being false is a superset of being true,\n    // hence if we want to know if this PairSet \"has\" these two with no\n    // exclusivity, we have to ensure it was added as such.\n\n\n    if (areMutuallyExclusive === false) {\n      return result === false;\n    }\n\n    return true;\n  }\n\n  add(a, b, areMutuallyExclusive) {\n    this._pairSetAdd(a, b, areMutuallyExclusive);\n\n    this._pairSetAdd(b, a, areMutuallyExclusive);\n  }\n\n  _pairSetAdd(a, b, areMutuallyExclusive) {\n    let map = this._data[a];\n\n    if (!map) {\n      map = Object.create(null);\n      this._data[a] = map;\n    }\n\n    map[b] = areMutuallyExclusive;\n  }\n\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique input field names\n *\n * A GraphQL input object value is only valid if all supplied fields are\n * uniquely named.\n */\nexport function UniqueInputFieldNamesRule(context) {\n  const knownNameStack = [];\n  let knownNames = Object.create(null);\n  return {\n    ObjectValue: {\n      enter() {\n        knownNameStack.push(knownNames);\n        knownNames = Object.create(null);\n      },\n\n      leave() {\n        knownNames = knownNameStack.pop();\n      }\n\n    },\n\n    ObjectField(node) {\n      const fieldName = node.name.value;\n\n      if (knownNames[fieldName]) {\n        context.reportError(new GraphQLError(`There can be only one input field named \"${fieldName}\".`, [knownNames[fieldName], node.name]));\n      } else {\n        knownNames[fieldName] = node.name;\n      }\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Unique field definition names\n *\n * A GraphQL complex type is only valid if all its fields are uniquely named.\n */\nexport function UniqueFieldDefinitionNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownFieldNames = Object.create(null);\n  return {\n    InputObjectTypeDefinition: checkFieldUniqueness,\n    InputObjectTypeExtension: checkFieldUniqueness,\n    InterfaceTypeDefinition: checkFieldUniqueness,\n    InterfaceTypeExtension: checkFieldUniqueness,\n    ObjectTypeDefinition: checkFieldUniqueness,\n    ObjectTypeExtension: checkFieldUniqueness\n  };\n\n  function checkFieldUniqueness(node) {\n    const typeName = node.name.value;\n\n    if (!knownFieldNames[typeName]) {\n      knownFieldNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    const fieldNodes = node.fields ?? [];\n    const fieldNames = knownFieldNames[typeName];\n\n    for (const fieldDef of fieldNodes) {\n      const fieldName = fieldDef.name.value;\n\n      if (hasField(existingTypeMap[typeName], fieldName)) {\n        context.reportError(new GraphQLError(`Field \"${typeName}.${fieldName}\" already exists in the schema. It cannot also be defined in this type extension.`, fieldDef.name));\n      } else if (fieldNames[fieldName]) {\n        context.reportError(new GraphQLError(`Field \"${typeName}.${fieldName}\" can only be defined once.`, [fieldNames[fieldName], fieldDef.name]));\n      } else {\n        fieldNames[fieldName] = fieldDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n\nfunction hasField(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type) || isInputObjectType(type)) {\n    return type.getFields()[fieldName] != null;\n  }\n\n  return false;\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport invariant from \"../../jsutils/invariant.mjs\";\nimport didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isTypeDefinitionNode } from \"../../language/predicates.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isEnumType, isInputObjectType } from \"../../type/definition.mjs\";\n\n/**\n * Possible type extension\n *\n * A type extension is only valid if the type is defined and has the same kind.\n */\nexport function PossibleTypeExtensionsRule(context) {\n  const schema = context.getSchema();\n  const definedTypes = Object.create(null);\n\n  for (const def of context.getDocument().definitions) {\n    if (isTypeDefinitionNode(def)) {\n      definedTypes[def.name.value] = def;\n    }\n  }\n\n  return {\n    ScalarTypeExtension: checkExtension,\n    ObjectTypeExtension: checkExtension,\n    InterfaceTypeExtension: checkExtension,\n    UnionTypeExtension: checkExtension,\n    EnumTypeExtension: checkExtension,\n    InputObjectTypeExtension: checkExtension\n  };\n\n  function checkExtension(node) {\n    const typeName = node.name.value;\n    const defNode = definedTypes[typeName];\n    const existingType = schema?.getType(typeName);\n    let expectedKind;\n\n    if (defNode) {\n      expectedKind = defKindToExtKind[defNode.kind];\n    } else if (existingType) {\n      expectedKind = typeToExtKind(existingType);\n    }\n\n    if (expectedKind) {\n      if (expectedKind !== node.kind) {\n        const kindStr = extensionKindToTypeName(node.kind);\n        context.reportError(new GraphQLError(`Cannot extend non-${kindStr} type \"${typeName}\".`, defNode ? [defNode, node] : node));\n      }\n    } else {\n      let allTypeNames = Object.keys(definedTypes);\n\n      if (schema) {\n        allTypeNames = allTypeNames.concat(Object.keys(schema.getTypeMap()));\n      }\n\n      const suggestedTypes = suggestionList(typeName, allTypeNames);\n      context.reportError(new GraphQLError(`Cannot extend type \"${typeName}\" because it is not defined.` + didYouMean(suggestedTypes), node.name));\n    }\n  }\n}\nconst defKindToExtKind = {\n  [Kind.SCALAR_TYPE_DEFINITION]: Kind.SCALAR_TYPE_EXTENSION,\n  [Kind.OBJECT_TYPE_DEFINITION]: Kind.OBJECT_TYPE_EXTENSION,\n  [Kind.INTERFACE_TYPE_DEFINITION]: Kind.INTERFACE_TYPE_EXTENSION,\n  [Kind.UNION_TYPE_DEFINITION]: Kind.UNION_TYPE_EXTENSION,\n  [Kind.ENUM_TYPE_DEFINITION]: Kind.ENUM_TYPE_EXTENSION,\n  [Kind.INPUT_OBJECT_TYPE_DEFINITION]: Kind.INPUT_OBJECT_TYPE_EXTENSION\n};\n\nfunction typeToExtKind(type) {\n  if (isScalarType(type)) {\n    return Kind.SCALAR_TYPE_EXTENSION;\n  }\n\n  if (isObjectType(type)) {\n    return Kind.OBJECT_TYPE_EXTENSION;\n  }\n\n  if (isInterfaceType(type)) {\n    return Kind.INTERFACE_TYPE_EXTENSION;\n  }\n\n  if (isUnionType(type)) {\n    return Kind.UNION_TYPE_EXTENSION;\n  }\n\n  if (isEnumType(type)) {\n    return Kind.ENUM_TYPE_EXTENSION;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isInputObjectType(type)) {\n    return Kind.INPUT_OBJECT_TYPE_EXTENSION;\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected type: ' + inspect(type));\n}\n\nfunction extensionKindToTypeName(kind) {\n  switch (kind) {\n    case Kind.SCALAR_TYPE_EXTENSION:\n      return 'scalar';\n\n    case Kind.OBJECT_TYPE_EXTENSION:\n      return 'object';\n\n    case Kind.INTERFACE_TYPE_EXTENSION:\n      return 'interface';\n\n    case Kind.UNION_TYPE_EXTENSION:\n      return 'union';\n\n    case Kind.ENUM_TYPE_EXTENSION:\n      return 'enum';\n\n    case Kind.INPUT_OBJECT_TYPE_EXTENSION:\n      return 'input object';\n  } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n  false || invariant(0, 'Unexpected kind: ' + inspect(kind));\n}\n","// Spec Section: \"Executable Definitions\"\nimport { ExecutableDefinitionsRule } from \"./rules/ExecutableDefinitionsRule.mjs\"; // Spec Section: \"Operation Name Uniqueness\"\n\nimport { UniqueOperationNamesRule } from \"./rules/UniqueOperationNamesRule.mjs\"; // Spec Section: \"Lone Anonymous Operation\"\n\nimport { LoneAnonymousOperationRule } from \"./rules/LoneAnonymousOperationRule.mjs\"; // Spec Section: \"Subscriptions with Single Root Field\"\n\nimport { SingleFieldSubscriptionsRule } from \"./rules/SingleFieldSubscriptionsRule.mjs\"; // Spec Section: \"Fragment Spread Type Existence\"\n\nimport { KnownTypeNamesRule } from \"./rules/KnownTypeNamesRule.mjs\"; // Spec Section: \"Fragments on Composite Types\"\n\nimport { FragmentsOnCompositeTypesRule } from \"./rules/FragmentsOnCompositeTypesRule.mjs\"; // Spec Section: \"Variables are Input Types\"\n\nimport { VariablesAreInputTypesRule } from \"./rules/VariablesAreInputTypesRule.mjs\"; // Spec Section: \"Leaf Field Selections\"\n\nimport { ScalarLeafsRule } from \"./rules/ScalarLeafsRule.mjs\"; // Spec Section: \"Field Selections on Objects, Interfaces, and Unions Types\"\n\nimport { FieldsOnCorrectTypeRule } from \"./rules/FieldsOnCorrectTypeRule.mjs\"; // Spec Section: \"Fragment Name Uniqueness\"\n\nimport { UniqueFragmentNamesRule } from \"./rules/UniqueFragmentNamesRule.mjs\"; // Spec Section: \"Fragment spread target defined\"\n\nimport { KnownFragmentNamesRule } from \"./rules/KnownFragmentNamesRule.mjs\"; // Spec Section: \"Fragments must be used\"\n\nimport { NoUnusedFragmentsRule } from \"./rules/NoUnusedFragmentsRule.mjs\"; // Spec Section: \"Fragment spread is possible\"\n\nimport { PossibleFragmentSpreadsRule } from \"./rules/PossibleFragmentSpreadsRule.mjs\"; // Spec Section: \"Fragments must not form cycles\"\n\nimport { NoFragmentCyclesRule } from \"./rules/NoFragmentCyclesRule.mjs\"; // Spec Section: \"Variable Uniqueness\"\n\nimport { UniqueVariableNamesRule } from \"./rules/UniqueVariableNamesRule.mjs\"; // Spec Section: \"All Variable Used Defined\"\n\nimport { NoUndefinedVariablesRule } from \"./rules/NoUndefinedVariablesRule.mjs\"; // Spec Section: \"All Variables Used\"\n\nimport { NoUnusedVariablesRule } from \"./rules/NoUnusedVariablesRule.mjs\"; // Spec Section: \"Directives Are Defined\"\n\nimport { KnownDirectivesRule } from \"./rules/KnownDirectivesRule.mjs\"; // Spec Section: \"Directives Are Unique Per Location\"\n\nimport { UniqueDirectivesPerLocationRule } from \"./rules/UniqueDirectivesPerLocationRule.mjs\"; // Spec Section: \"Argument Names\"\n\nimport { KnownArgumentNamesRule, KnownArgumentNamesOnDirectivesRule } from \"./rules/KnownArgumentNamesRule.mjs\"; // Spec Section: \"Argument Uniqueness\"\n\nimport { UniqueArgumentNamesRule } from \"./rules/UniqueArgumentNamesRule.mjs\"; // Spec Section: \"Value Type Correctness\"\n\nimport { ValuesOfCorrectTypeRule } from \"./rules/ValuesOfCorrectTypeRule.mjs\"; // Spec Section: \"Argument Optionality\"\n\nimport { ProvidedRequiredArgumentsRule, ProvidedRequiredArgumentsOnDirectivesRule } from \"./rules/ProvidedRequiredArgumentsRule.mjs\"; // Spec Section: \"All Variable Usages Are Allowed\"\n\nimport { VariablesInAllowedPositionRule } from \"./rules/VariablesInAllowedPositionRule.mjs\"; // Spec Section: \"Field Selection Merging\"\n\nimport { OverlappingFieldsCanBeMergedRule } from \"./rules/OverlappingFieldsCanBeMergedRule.mjs\"; // Spec Section: \"Input Object Field Uniqueness\"\n\nimport { UniqueInputFieldNamesRule } from \"./rules/UniqueInputFieldNamesRule.mjs\"; // SDL-specific validation rules\n\nimport { LoneSchemaDefinitionRule } from \"./rules/LoneSchemaDefinitionRule.mjs\";\nimport { UniqueOperationTypesRule } from \"./rules/UniqueOperationTypesRule.mjs\";\nimport { UniqueTypeNamesRule } from \"./rules/UniqueTypeNamesRule.mjs\";\nimport { UniqueEnumValueNamesRule } from \"./rules/UniqueEnumValueNamesRule.mjs\";\nimport { UniqueFieldDefinitionNamesRule } from \"./rules/UniqueFieldDefinitionNamesRule.mjs\";\nimport { UniqueDirectiveNamesRule } from \"./rules/UniqueDirectiveNamesRule.mjs\";\nimport { PossibleTypeExtensionsRule } from \"./rules/PossibleTypeExtensionsRule.mjs\";\n/**\n * This set includes all validation rules defined by the GraphQL spec.\n *\n * The order of the rules in this list has been adjusted to lead to the\n * most clear output when encountering multiple validation errors.\n */\n\nexport const specifiedRules = Object.freeze([ExecutableDefinitionsRule, UniqueOperationNamesRule, LoneAnonymousOperationRule, SingleFieldSubscriptionsRule, KnownTypeNamesRule, FragmentsOnCompositeTypesRule, VariablesAreInputTypesRule, ScalarLeafsRule, FieldsOnCorrectTypeRule, UniqueFragmentNamesRule, KnownFragmentNamesRule, NoUnusedFragmentsRule, PossibleFragmentSpreadsRule, NoFragmentCyclesRule, UniqueVariableNamesRule, NoUndefinedVariablesRule, NoUnusedVariablesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, KnownArgumentNamesRule, UniqueArgumentNamesRule, ValuesOfCorrectTypeRule, ProvidedRequiredArgumentsRule, VariablesInAllowedPositionRule, OverlappingFieldsCanBeMergedRule, UniqueInputFieldNamesRule]);\n/**\n * @internal\n */\n\nexport const specifiedSDLRules = Object.freeze([LoneSchemaDefinitionRule, UniqueOperationTypesRule, UniqueTypeNamesRule, UniqueEnumValueNamesRule, UniqueFieldDefinitionNamesRule, UniqueDirectiveNamesRule, KnownTypeNamesRule, KnownDirectivesRule, UniqueDirectivesPerLocationRule, PossibleTypeExtensionsRule, KnownArgumentNamesOnDirectivesRule, UniqueArgumentNamesRule, UniqueInputFieldNamesRule, ProvidedRequiredArgumentsOnDirectivesRule]);\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\nimport { isExecutableDefinitionNode } from \"../../language/predicates.mjs\";\n\n/**\n * Executable definitions\n *\n * A GraphQL document is only valid for execution if all definitions are either\n * operation or fragment definitions.\n */\nexport function ExecutableDefinitionsRule(context) {\n  return {\n    Document(node) {\n      for (const definition of node.definitions) {\n        if (!isExecutableDefinitionNode(definition)) {\n          const defName = definition.kind === Kind.SCHEMA_DEFINITION || definition.kind === Kind.SCHEMA_EXTENSION ? 'schema' : '\"' + definition.name.value + '\"';\n          context.reportError(new GraphQLError(`The ${defName} definition is not executable.`, definition));\n        }\n      }\n\n      return false;\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation names\n *\n * A GraphQL document is only valid if all defined operations have unique names.\n */\nexport function UniqueOperationNamesRule(context) {\n  const knownOperationNames = Object.create(null);\n  return {\n    OperationDefinition(node) {\n      const operationName = node.name;\n\n      if (operationName) {\n        if (knownOperationNames[operationName.value]) {\n          context.reportError(new GraphQLError(`There can be only one operation named \"${operationName.value}\".`, [knownOperationNames[operationName.value], operationName]));\n        } else {\n          knownOperationNames[operationName.value] = operationName;\n        }\n      }\n\n      return false;\n    },\n\n    FragmentDefinition: () => false\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { Kind } from \"../../language/kinds.mjs\";\n\n/**\n * Lone anonymous operation\n *\n * A GraphQL document is only valid if when it contains an anonymous operation\n * (the query short-hand) that it contains only that one operation definition.\n */\nexport function LoneAnonymousOperationRule(context) {\n  let operationCount = 0;\n  return {\n    Document(node) {\n      operationCount = node.definitions.filter(definition => definition.kind === Kind.OPERATION_DEFINITION).length;\n    },\n\n    OperationDefinition(node) {\n      if (!node.name && operationCount > 1) {\n        context.reportError(new GraphQLError('This anonymous operation must be the only defined operation.', node));\n      }\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Subscriptions must only include one field.\n *\n * A GraphQL subscription is valid only if it contains a single root field.\n */\nexport function SingleFieldSubscriptionsRule(context) {\n  return {\n    OperationDefinition(node) {\n      if (node.operation === 'subscription') {\n        if (node.selectionSet.selections.length !== 1) {\n          context.reportError(new GraphQLError(node.name ? `Subscription \"${node.name.value}\" must select only one top level field.` : 'Anonymous Subscription must select only one top level field.', node.selectionSet.selections.slice(1)));\n        }\n      }\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Fragments on composite type\n *\n * Fragments use a type condition to determine if they apply, since fragments\n * can only be spread into a composite type (object, interface, or union), the\n * type condition must also be a composite type.\n */\nexport function FragmentsOnCompositeTypesRule(context) {\n  return {\n    InlineFragment(node) {\n      const typeCondition = node.typeCondition;\n\n      if (typeCondition) {\n        const type = typeFromAST(context.getSchema(), typeCondition);\n\n        if (type && !isCompositeType(type)) {\n          const typeStr = print(typeCondition);\n          context.reportError(new GraphQLError(`Fragment cannot condition on non composite type \"${typeStr}\".`, typeCondition));\n        }\n      }\n    },\n\n    FragmentDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.typeCondition);\n\n      if (type && !isCompositeType(type)) {\n        const typeStr = print(node.typeCondition);\n        context.reportError(new GraphQLError(`Fragment \"${node.name.value}\" cannot condition on non composite type \"${typeStr}\".`, node.typeCondition));\n      }\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { print } from \"../../language/printer.mjs\";\nimport { isInputType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\n\n/**\n * Variables are input types\n *\n * A GraphQL operation is only valid if all the variables it defines are of\n * input types (scalar, enum, or input object).\n */\nexport function VariablesAreInputTypesRule(context) {\n  return {\n    VariableDefinition(node) {\n      const type = typeFromAST(context.getSchema(), node.type);\n\n      if (type && !isInputType(type)) {\n        const variableName = node.variable.name.value;\n        const typeName = print(node.type);\n        context.reportError(new GraphQLError(`Variable \"$${variableName}\" cannot be non-input type \"${typeName}\".`, node.type));\n      }\n    }\n\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { getNamedType, isLeafType } from \"../../type/definition.mjs\";\n\n/**\n * Scalar leafs\n *\n * A GraphQL document is valid only if all leaf fields (fields without\n * sub selections) are of scalar or enum types.\n */\nexport function ScalarLeafsRule(context) {\n  return {\n    Field(node) {\n      const type = context.getType();\n      const selectionSet = node.selectionSet;\n\n      if (type) {\n        if (isLeafType(getNamedType(type))) {\n          if (selectionSet) {\n            const fieldName = node.name.value;\n            const typeStr = inspect(type);\n            context.reportError(new GraphQLError(`Field \"${fieldName}\" must not have a selection since type \"${typeStr}\" has no subfields.`, selectionSet));\n          }\n        } else if (!selectionSet) {\n          const fieldName = node.name.value;\n          const typeStr = inspect(type);\n          context.reportError(new GraphQLError(`Field \"${fieldName}\" of type \"${typeStr}\" must have a selection of subfields. Did you mean \"${fieldName} { ... }\"?`, node));\n        }\n      }\n    }\n\n  };\n}\n","import didYouMean from \"../../jsutils/didYouMean.mjs\";\nimport suggestionList from \"../../jsutils/suggestionList.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isObjectType, isInterfaceType, isAbstractType } from \"../../type/definition.mjs\";\n\n/**\n * Fields on correct type\n *\n * A GraphQL document is only valid if all fields selected are defined by the\n * parent type, or are an allowed meta field such as __typename.\n */\nexport function FieldsOnCorrectTypeRule(context) {\n  return {\n    Field(node) {\n      const type = context.getParentType();\n\n      if (type) {\n        const fieldDef = context.getFieldDef();\n\n        if (!fieldDef) {\n          // This field doesn't exist, lets look for suggestions.\n          const schema = context.getSchema();\n          const fieldName = node.name.value; // First determine if there are any suggested types to condition on.\n\n          let suggestion = didYouMean('to use an inline fragment on', getSuggestedTypeNames(schema, type, fieldName)); // If there are no suggested types, then perhaps this was a typo?\n\n          if (suggestion === '') {\n            suggestion = didYouMean(getSuggestedFieldNames(type, fieldName));\n          } // Report an error, including helpful suggestions.\n\n\n          context.reportError(new GraphQLError(`Cannot query field \"${fieldName}\" on type \"${type.name}\".` + suggestion, node));\n        }\n      }\n    }\n\n  };\n}\n/**\n * Go through all of the implementations of type, as well as the interfaces that\n * they implement. If any of those types include the provided field, suggest them,\n * sorted by how often the type is referenced.\n */\n\nfunction getSuggestedTypeNames(schema, type, fieldName) {\n  if (!isAbstractType(type)) {\n    // Must be an Object type, which does not have possible fields.\n    return [];\n  }\n\n  const suggestedTypes = new Set();\n  const usageCount = Object.create(null);\n\n  for (const possibleType of schema.getPossibleTypes(type)) {\n    if (!possibleType.getFields()[fieldName]) {\n      continue;\n    } // This object type defines this field.\n\n\n    suggestedTypes.add(possibleType);\n    usageCount[possibleType.name] = 1;\n\n    for (const possibleInterface of possibleType.getInterfaces()) {\n      if (!possibleInterface.getFields()[fieldName]) {\n        continue;\n      } // This interface type defines this field.\n\n\n      suggestedTypes.add(possibleInterface);\n      usageCount[possibleInterface.name] = (usageCount[possibleInterface.name] ?? 0) + 1;\n    }\n  }\n\n  return Array.from(suggestedTypes).sort((typeA, typeB) => {\n    // Suggest both interface and object types based on how common they are.\n    const usageCountDiff = usageCount[typeB.name] - usageCount[typeA.name];\n\n    if (usageCountDiff !== 0) {\n      return usageCountDiff;\n    } // Suggest super types first followed by subtypes\n\n\n    if (isInterfaceType(typeA) && schema.isSubType(typeA, typeB)) {\n      return -1;\n    }\n\n    if (isInterfaceType(typeB) && schema.isSubType(typeB, typeA)) {\n      return 1;\n    }\n\n    return typeA.name.localeCompare(typeB.name);\n  }).map(x => x.name);\n}\n/**\n * For the field name provided, determine if there are any similar field names\n * that may be the result of a typo.\n */\n\n\nfunction getSuggestedFieldNames(type, fieldName) {\n  if (isObjectType(type) || isInterfaceType(type)) {\n    const possibleFieldNames = Object.keys(type.getFields());\n    return suggestionList(fieldName, possibleFieldNames);\n  } // Otherwise, must be a Union type, which does not define fields.\n\n\n  return [];\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique fragment names\n *\n * A GraphQL document is only valid if all defined fragments have unique names.\n */\nexport function UniqueFragmentNamesRule(context) {\n  const knownFragmentNames = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      const fragmentName = node.name.value;\n\n      if (knownFragmentNames[fragmentName]) {\n        context.reportError(new GraphQLError(`There can be only one fragment named \"${fragmentName}\".`, [knownFragmentNames[fragmentName], node.name]));\n      } else {\n        knownFragmentNames[fragmentName] = node.name;\n      }\n\n      return false;\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Known fragment names\n *\n * A GraphQL document is only valid if all `...Fragment` fragment spreads refer\n * to fragments defined in the same document.\n */\nexport function KnownFragmentNamesRule(context) {\n  return {\n    FragmentSpread(node) {\n      const fragmentName = node.name.value;\n      const fragment = context.getFragment(fragmentName);\n\n      if (!fragment) {\n        context.reportError(new GraphQLError(`Unknown fragment \"${fragmentName}\".`, node.name));\n      }\n    }\n\n  };\n}\n","import inspect from \"../../jsutils/inspect.mjs\";\nimport { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isCompositeType } from \"../../type/definition.mjs\";\nimport { typeFromAST } from \"../../utilities/typeFromAST.mjs\";\nimport { doTypesOverlap } from \"../../utilities/typeComparators.mjs\";\n\n/**\n * Possible fragment spread\n *\n * A fragment spread is only valid if the type condition could ever possibly\n * be true: if there is a non-empty intersection of the possible parent types,\n * and possible types which pass the type condition.\n */\nexport function PossibleFragmentSpreadsRule(context) {\n  return {\n    InlineFragment(node) {\n      const fragType = context.getType();\n      const parentType = context.getParentType();\n\n      if (isCompositeType(fragType) && isCompositeType(parentType) && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(`Fragment cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`, node));\n      }\n    },\n\n    FragmentSpread(node) {\n      const fragName = node.name.value;\n      const fragType = getFragmentType(context, fragName);\n      const parentType = context.getParentType();\n\n      if (fragType && parentType && !doTypesOverlap(context.getSchema(), fragType, parentType)) {\n        const parentTypeStr = inspect(parentType);\n        const fragTypeStr = inspect(fragType);\n        context.reportError(new GraphQLError(`Fragment \"${fragName}\" cannot be spread here as objects of type \"${parentTypeStr}\" can never be of type \"${fragTypeStr}\".`, node));\n      }\n    }\n\n  };\n}\n\nfunction getFragmentType(context, name) {\n  const frag = context.getFragment(name);\n\n  if (frag) {\n    const type = typeFromAST(context.getSchema(), frag.typeCondition);\n\n    if (isCompositeType(type)) {\n      return type;\n    }\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nexport function NoFragmentCyclesRule(context) {\n  // Tracks already visited fragments to maintain O(N) and to ensure that cycles\n  // are not redundantly reported.\n  const visitedFrags = Object.create(null); // Array of AST nodes used to produce meaningful errors\n\n  const spreadPath = []; // Position in the spread path\n\n  const spreadPathIndexByName = Object.create(null);\n  return {\n    OperationDefinition: () => false,\n\n    FragmentDefinition(node) {\n      detectCycleRecursive(node);\n      return false;\n    }\n\n  }; // This does a straight-forward DFS to find cycles.\n  // It does not terminate when a cycle was found but continues to explore\n  // the graph to find all possible cycles.\n\n  function detectCycleRecursive(fragment) {\n    if (visitedFrags[fragment.name.value]) {\n      return;\n    }\n\n    const fragmentName = fragment.name.value;\n    visitedFrags[fragmentName] = true;\n    const spreadNodes = context.getFragmentSpreads(fragment.selectionSet);\n\n    if (spreadNodes.length === 0) {\n      return;\n    }\n\n    spreadPathIndexByName[fragmentName] = spreadPath.length;\n\n    for (const spreadNode of spreadNodes) {\n      const spreadName = spreadNode.name.value;\n      const cycleIndex = spreadPathIndexByName[spreadName];\n      spreadPath.push(spreadNode);\n\n      if (cycleIndex === undefined) {\n        const spreadFragment = context.getFragment(spreadName);\n\n        if (spreadFragment) {\n          detectCycleRecursive(spreadFragment);\n        }\n      } else {\n        const cyclePath = spreadPath.slice(cycleIndex);\n        const viaPath = cyclePath.slice(0, -1).map(s => '\"' + s.name.value + '\"').join(', ');\n        context.reportError(new GraphQLError(`Cannot spread fragment \"${spreadName}\" within itself` + (viaPath !== '' ? ` via ${viaPath}.` : '.'), cyclePath));\n      }\n\n      spreadPath.pop();\n    }\n\n    spreadPathIndexByName[fragmentName] = undefined;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique variable names\n *\n * A GraphQL operation is only valid if all its variables are uniquely named.\n */\nexport function UniqueVariableNamesRule(context) {\n  let knownVariableNames = Object.create(null);\n  return {\n    OperationDefinition() {\n      knownVariableNames = Object.create(null);\n    },\n\n    VariableDefinition(node) {\n      const variableName = node.variable.name.value;\n\n      if (knownVariableNames[variableName]) {\n        context.reportError(new GraphQLError(`There can be only one variable named \"$${variableName}\".`, [knownVariableNames[variableName], node.variable.name]));\n      } else {\n        knownVariableNames[variableName] = node.variable.name;\n      }\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No undefined variables\n *\n * A GraphQL operation is only valid if all variables encountered, both directly\n * and via fragment spreads, are defined by that operation.\n */\nexport function NoUndefinedVariablesRule(context) {\n  let variableNameDefined = Object.create(null);\n  return {\n    OperationDefinition: {\n      enter() {\n        variableNameDefined = Object.create(null);\n      },\n\n      leave(operation) {\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          const varName = node.name.value;\n\n          if (variableNameDefined[varName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${varName}\" is not defined by operation \"${operation.name.value}\".` : `Variable \"$${varName}\" is not defined.`, [node, operation]));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(node) {\n      variableNameDefined[node.variable.name.value] = true;\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * No unused variables\n *\n * A GraphQL operation is only valid if all variables defined by an operation\n * are used, either directly or within a spread fragment.\n */\nexport function NoUnusedVariablesRule(context) {\n  let variableDefs = [];\n  return {\n    OperationDefinition: {\n      enter() {\n        variableDefs = [];\n      },\n\n      leave(operation) {\n        const variableNameUsed = Object.create(null);\n        const usages = context.getRecursiveVariableUsages(operation);\n\n        for (const {\n          node\n        } of usages) {\n          variableNameUsed[node.name.value] = true;\n        }\n\n        for (const variableDef of variableDefs) {\n          const variableName = variableDef.variable.name.value;\n\n          if (variableNameUsed[variableName] !== true) {\n            context.reportError(new GraphQLError(operation.name ? `Variable \"$${variableName}\" is never used in operation \"${operation.name.value}\".` : `Variable \"$${variableName}\" is never used.`, variableDef));\n          }\n        }\n      }\n\n    },\n\n    VariableDefinition(def) {\n      variableDefs.push(def);\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Lone Schema definition\n *\n * A GraphQL document is only valid if it contains only one schema definition.\n */\nexport function LoneSchemaDefinitionRule(context) {\n  const oldSchema = context.getSchema();\n  const alreadyDefined = oldSchema?.astNode ?? oldSchema?.getQueryType() ?? oldSchema?.getMutationType() ?? oldSchema?.getSubscriptionType();\n  let schemaDefinitionsCount = 0;\n  return {\n    SchemaDefinition(node) {\n      if (alreadyDefined) {\n        context.reportError(new GraphQLError('Cannot define a new schema within a schema extension.', node));\n        return;\n      }\n\n      if (schemaDefinitionsCount > 0) {\n        context.reportError(new GraphQLError('Must provide only one schema definition.', node));\n      }\n\n      ++schemaDefinitionsCount;\n    }\n\n  };\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique operation types\n *\n * A GraphQL document is only valid if it has only one type per operation.\n */\nexport function UniqueOperationTypesRule(context) {\n  const schema = context.getSchema();\n  const definedOperationTypes = Object.create(null);\n  const existingOperationTypes = schema ? {\n    query: schema.getQueryType(),\n    mutation: schema.getMutationType(),\n    subscription: schema.getSubscriptionType()\n  } : {};\n  return {\n    SchemaDefinition: checkOperationTypes,\n    SchemaExtension: checkOperationTypes\n  };\n\n  function checkOperationTypes(node) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    const operationTypesNodes = node.operationTypes ?? [];\n\n    for (const operationType of operationTypesNodes) {\n      const operation = operationType.operation;\n      const alreadyDefinedOperationType = definedOperationTypes[operation];\n\n      if (existingOperationTypes[operation]) {\n        context.reportError(new GraphQLError(`Type for ${operation} already defined in the schema. It cannot be redefined.`, operationType));\n      } else if (alreadyDefinedOperationType) {\n        context.reportError(new GraphQLError(`There can be only one ${operation} type in schema.`, [alreadyDefinedOperationType, operationType]));\n      } else {\n        definedOperationTypes[operation] = operationType;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique type names\n *\n * A GraphQL document is only valid if all defined types have unique names.\n */\nexport function UniqueTypeNamesRule(context) {\n  const knownTypeNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    ScalarTypeDefinition: checkTypeName,\n    ObjectTypeDefinition: checkTypeName,\n    InterfaceTypeDefinition: checkTypeName,\n    UnionTypeDefinition: checkTypeName,\n    EnumTypeDefinition: checkTypeName,\n    InputObjectTypeDefinition: checkTypeName\n  };\n\n  function checkTypeName(node) {\n    const typeName = node.name.value;\n\n    if (schema?.getType(typeName)) {\n      context.reportError(new GraphQLError(`Type \"${typeName}\" already exists in the schema. It cannot also be defined in this type definition.`, node.name));\n      return;\n    }\n\n    if (knownTypeNames[typeName]) {\n      context.reportError(new GraphQLError(`There can be only one type named \"${typeName}\".`, [knownTypeNames[typeName], node.name]));\n    } else {\n      knownTypeNames[typeName] = node.name;\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\nimport { isEnumType } from \"../../type/definition.mjs\";\n\n/**\n * Unique enum value names\n *\n * A GraphQL enum type is only valid if all its values are uniquely named.\n */\nexport function UniqueEnumValueNamesRule(context) {\n  const schema = context.getSchema();\n  const existingTypeMap = schema ? schema.getTypeMap() : Object.create(null);\n  const knownValueNames = Object.create(null);\n  return {\n    EnumTypeDefinition: checkValueUniqueness,\n    EnumTypeExtension: checkValueUniqueness\n  };\n\n  function checkValueUniqueness(node) {\n    const typeName = node.name.value;\n\n    if (!knownValueNames[typeName]) {\n      knownValueNames[typeName] = Object.create(null);\n    } // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n\n    const valueNodes = node.values ?? [];\n    const valueNames = knownValueNames[typeName];\n\n    for (const valueDef of valueNodes) {\n      const valueName = valueDef.name.value;\n      const existingType = existingTypeMap[typeName];\n\n      if (isEnumType(existingType) && existingType.getValue(valueName)) {\n        context.reportError(new GraphQLError(`Enum value \"${typeName}.${valueName}\" already exists in the schema. It cannot also be defined in this type extension.`, valueDef.name));\n      } else if (valueNames[valueName]) {\n        context.reportError(new GraphQLError(`Enum value \"${typeName}.${valueName}\" can only be defined once.`, [valueNames[valueName], valueDef.name]));\n      } else {\n        valueNames[valueName] = valueDef.name;\n      }\n    }\n\n    return false;\n  }\n}\n","import { GraphQLError } from \"../../error/GraphQLError.mjs\";\n\n/**\n * Unique directive names\n *\n * A GraphQL document is only valid if all defined directives have unique names.\n */\nexport function UniqueDirectiveNamesRule(context) {\n  const knownDirectiveNames = Object.create(null);\n  const schema = context.getSchema();\n  return {\n    DirectiveDefinition(node) {\n      const directiveName = node.name.value;\n\n      if (schema?.getDirective(directiveName)) {\n        context.reportError(new GraphQLError(`Directive \"@${directiveName}\" already exists in the schema. It cannot be redefined.`, node.name));\n        return;\n      }\n\n      if (knownDirectiveNames[directiveName]) {\n        context.reportError(new GraphQLError(`There can be only one directive named \"@${directiveName}\".`, [knownDirectiveNames[directiveName], node.name]));\n      } else {\n        knownDirectiveNames[directiveName] = node.name;\n      }\n\n      return false;\n    }\n\n  };\n}\n","import { Kind } from \"../language/kinds.mjs\";\nimport { visit } from \"../language/visitor.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\n\n/**\n * An instance of this class is passed as the \"this\" context to all validators,\n * allowing access to commonly useful contextual information from within a\n * validation rule.\n */\nexport class ASTValidationContext {\n  constructor(ast, onError) {\n    this._ast = ast;\n    this._fragments = undefined;\n    this._fragmentSpreads = new Map();\n    this._recursivelyReferencedFragments = new Map();\n    this._onError = onError;\n  }\n\n  reportError(error) {\n    this._onError(error);\n  }\n\n  getDocument() {\n    return this._ast;\n  }\n\n  getFragment(name) {\n    let fragments = this._fragments;\n\n    if (!fragments) {\n      this._fragments = fragments = this.getDocument().definitions.reduce((frags, statement) => {\n        if (statement.kind === Kind.FRAGMENT_DEFINITION) {\n          frags[statement.name.value] = statement;\n        }\n\n        return frags;\n      }, Object.create(null));\n    }\n\n    return fragments[name];\n  }\n\n  getFragmentSpreads(node) {\n    let spreads = this._fragmentSpreads.get(node);\n\n    if (!spreads) {\n      spreads = [];\n      const setsToVisit = [node];\n\n      while (setsToVisit.length !== 0) {\n        const set = setsToVisit.pop();\n\n        for (const selection of set.selections) {\n          if (selection.kind === Kind.FRAGMENT_SPREAD) {\n            spreads.push(selection);\n          } else if (selection.selectionSet) {\n            setsToVisit.push(selection.selectionSet);\n          }\n        }\n      }\n\n      this._fragmentSpreads.set(node, spreads);\n    }\n\n    return spreads;\n  }\n\n  getRecursivelyReferencedFragments(operation) {\n    let fragments = this._recursivelyReferencedFragments.get(operation);\n\n    if (!fragments) {\n      fragments = [];\n      const collectedNames = Object.create(null);\n      const nodesToVisit = [operation.selectionSet];\n\n      while (nodesToVisit.length !== 0) {\n        const node = nodesToVisit.pop();\n\n        for (const spread of this.getFragmentSpreads(node)) {\n          const fragName = spread.name.value;\n\n          if (collectedNames[fragName] !== true) {\n            collectedNames[fragName] = true;\n            const fragment = this.getFragment(fragName);\n\n            if (fragment) {\n              fragments.push(fragment);\n              nodesToVisit.push(fragment.selectionSet);\n            }\n          }\n        }\n      }\n\n      this._recursivelyReferencedFragments.set(operation, fragments);\n    }\n\n    return fragments;\n  }\n\n}\nexport class SDLValidationContext extends ASTValidationContext {\n  constructor(ast, schema, onError) {\n    super(ast, onError);\n    this._schema = schema;\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n}\nexport class ValidationContext extends ASTValidationContext {\n  constructor(schema, ast, typeInfo, onError) {\n    super(ast, onError);\n    this._schema = schema;\n    this._typeInfo = typeInfo;\n    this._variableUsages = new Map();\n    this._recursiveVariableUsages = new Map();\n  }\n\n  getSchema() {\n    return this._schema;\n  }\n\n  getVariableUsages(node) {\n    let usages = this._variableUsages.get(node);\n\n    if (!usages) {\n      const newUsages = [];\n      const typeInfo = new TypeInfo(this._schema);\n      visit(node, visitWithTypeInfo(typeInfo, {\n        VariableDefinition: () => false,\n\n        Variable(variable) {\n          newUsages.push({\n            node: variable,\n            type: typeInfo.getInputType(),\n            defaultValue: typeInfo.getDefaultValue()\n          });\n        }\n\n      }));\n      usages = newUsages;\n\n      this._variableUsages.set(node, usages);\n    }\n\n    return usages;\n  }\n\n  getRecursiveVariableUsages(operation) {\n    let usages = this._recursiveVariableUsages.get(operation);\n\n    if (!usages) {\n      usages = this.getVariableUsages(operation);\n\n      for (const frag of this.getRecursivelyReferencedFragments(operation)) {\n        usages = usages.concat(this.getVariableUsages(frag));\n      }\n\n      this._recursiveVariableUsages.set(operation, usages);\n    }\n\n    return usages;\n  }\n\n  getType() {\n    return this._typeInfo.getType();\n  }\n\n  getParentType() {\n    return this._typeInfo.getParentType();\n  }\n\n  getInputType() {\n    return this._typeInfo.getInputType();\n  }\n\n  getParentInputType() {\n    return this._typeInfo.getParentInputType();\n  }\n\n  getFieldDef() {\n    return this._typeInfo.getFieldDef();\n  }\n\n  getDirective() {\n    return this._typeInfo.getDirective();\n  }\n\n  getArgument() {\n    return this._typeInfo.getArgument();\n  }\n\n  getEnumValue() {\n    return this._typeInfo.getEnumValue();\n  }\n\n}\n","import devAssert from \"../jsutils/devAssert.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { visit, visitInParallel } from \"../language/visitor.mjs\";\nimport { assertValidSchema } from \"../type/validate.mjs\";\nimport { TypeInfo, visitWithTypeInfo } from \"../utilities/TypeInfo.mjs\";\nimport { specifiedRules, specifiedSDLRules } from \"./specifiedRules.mjs\";\nimport { SDLValidationContext, ValidationContext } from \"./ValidationContext.mjs\";\n/**\n * Implements the \"Validation\" section of the spec.\n *\n * Validation runs synchronously, returning an array of encountered errors, or\n * an empty array if no errors were encountered and the document is valid.\n *\n * A list of specific validation rules may be provided. If not provided, the\n * default list of rules defined by the GraphQL specification will be used.\n *\n * Each validation rules is a function which returns a visitor\n * (see the language/visitor API). Visitor methods are expected to return\n * GraphQLErrors, or Arrays of GraphQLErrors when invalid.\n *\n * Optionally a custom TypeInfo instance may be provided. If not provided, one\n * will be created from the provided schema.\n */\n\nexport function validate(schema, documentAST, rules = specifiedRules, typeInfo = new TypeInfo(schema), options = {\n  maxErrors: undefined\n}) {\n  documentAST || devAssert(0, 'Must provide document.'); // If the schema used for validation is invalid, throw an error.\n\n  assertValidSchema(schema);\n  const abortObj = Object.freeze({});\n  const errors = [];\n  const context = new ValidationContext(schema, documentAST, typeInfo, error => {\n    if (options.maxErrors != null && errors.length >= options.maxErrors) {\n      errors.push(new GraphQLError('Too many validation errors, error limit reached. Validation aborted.'));\n      throw abortObj;\n    }\n\n    errors.push(error);\n  }); // This uses a specialized visitor which runs multiple visitors in parallel,\n  // while maintaining the visitor skip and break API.\n\n  const visitor = visitInParallel(rules.map(rule => rule(context))); // Visit the whole document with each instance of all provided rules.\n\n  try {\n    visit(documentAST, visitWithTypeInfo(typeInfo, visitor));\n  } catch (e) {\n    if (e !== abortObj) {\n      throw e;\n    }\n  }\n\n  return errors;\n}\n/**\n * @internal\n */\n\nexport function validateSDL(documentAST, schemaToExtend, rules = specifiedSDLRules) {\n  const errors = [];\n  const context = new SDLValidationContext(documentAST, schemaToExtend, error => {\n    errors.push(error);\n  });\n  const visitors = rules.map(rule => rule(context));\n  visit(documentAST, visitInParallel(visitors));\n  return errors;\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDL(documentAST) {\n  const errors = validateSDL(documentAST);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}\n/**\n * Utility function which asserts a SDL document is valid by throwing an error\n * if it is invalid.\n *\n * @internal\n */\n\nexport function assertValidSDLExtension(documentAST, schema) {\n  const errors = validateSDL(documentAST, schema);\n\n  if (errors.length !== 0) {\n    throw new Error(errors.map(error => error.message).join('\\n\\n'));\n  }\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isLeafType, isInputObjectType, isListType, isNonNullType } from \"../type/definition.mjs\";\n/**\n * Produces a JavaScript value given a GraphQL Value AST.\n *\n * A GraphQL type must be provided, which will be used to interpret different\n * GraphQL Value literals.\n *\n * Returns `undefined` when the value could not be validly coerced according to\n * the provided type.\n *\n * | GraphQL Value        | JSON Value    |\n * | -------------------- | ------------- |\n * | Input Object         | Object        |\n * | List                 | Array         |\n * | Boolean              | Boolean       |\n * | String               | String        |\n * | Int / Float          | Number        |\n * | Enum Value           | Mixed         |\n * | NullValue            | null          |\n *\n */\n\nexport function valueFromAST(valueNode, type, variables) {\n  if (!valueNode) {\n    // When there is no node, then there is also no value.\n    // Importantly, this is different from returning the value null.\n    return;\n  }\n\n  if (valueNode.kind === Kind.VARIABLE) {\n    const variableName = valueNode.name.value;\n\n    if (variables == null || variables[variableName] === undefined) {\n      // No valid return value.\n      return;\n    }\n\n    const variableValue = variables[variableName];\n\n    if (variableValue === null && isNonNullType(type)) {\n      return; // Invalid: intentionally return no value.\n    } // Note: This does no further checking that this variable is correct.\n    // This assumes that this query has been validated and the variable\n    // usage here is of the correct type.\n\n\n    return variableValue;\n  }\n\n  if (isNonNullType(type)) {\n    if (valueNode.kind === Kind.NULL) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return valueFromAST(valueNode, type.ofType, variables);\n  }\n\n  if (valueNode.kind === Kind.NULL) {\n    // This is explicitly returning the value null.\n    return null;\n  }\n\n  if (isListType(type)) {\n    const itemType = type.ofType;\n\n    if (valueNode.kind === Kind.LIST) {\n      const coercedValues = [];\n\n      for (const itemNode of valueNode.values) {\n        if (isMissingVariable(itemNode, variables)) {\n          // If an array contains a missing variable, it is either coerced to\n          // null or if the item type is non-null, it considered invalid.\n          if (isNonNullType(itemType)) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(null);\n        } else {\n          const itemValue = valueFromAST(itemNode, itemType, variables);\n\n          if (itemValue === undefined) {\n            return; // Invalid: intentionally return no value.\n          }\n\n          coercedValues.push(itemValue);\n        }\n      }\n\n      return coercedValues;\n    }\n\n    const coercedValue = valueFromAST(valueNode, itemType, variables);\n\n    if (coercedValue === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return [coercedValue];\n  }\n\n  if (isInputObjectType(type)) {\n    if (valueNode.kind !== Kind.OBJECT) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    const coercedObj = Object.create(null);\n    const fieldNodes = keyMap(valueNode.fields, field => field.name.value);\n\n    for (const field of objectValues(type.getFields())) {\n      const fieldNode = fieldNodes[field.name];\n\n      if (!fieldNode || isMissingVariable(fieldNode.value, variables)) {\n        if (field.defaultValue !== undefined) {\n          coercedObj[field.name] = field.defaultValue;\n        } else if (isNonNullType(field.type)) {\n          return; // Invalid: intentionally return no value.\n        }\n\n        continue;\n      }\n\n      const fieldValue = valueFromAST(fieldNode.value, field.type, variables);\n\n      if (fieldValue === undefined) {\n        return; // Invalid: intentionally return no value.\n      }\n\n      coercedObj[field.name] = fieldValue;\n    }\n\n    return coercedObj;\n  } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n  if (isLeafType(type)) {\n    // Scalars and Enums fulfill parsing a literal value via parseLiteral().\n    // Invalid values represent a failure to parse correctly, in which case\n    // no value is returned.\n    let result;\n\n    try {\n      result = type.parseLiteral(valueNode, variables);\n    } catch (_error) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    if (result === undefined) {\n      return; // Invalid: intentionally return no value.\n    }\n\n    return result;\n  } // istanbul ignore next (Not reachable. All possible input types have been considered)\n\n\n  false || invariant(0, 'Unexpected input type: ' + inspect(type));\n} // Returns true if the provided valueNode is a variable which is not defined\n// in the set of variables.\n\nfunction isMissingVariable(valueNode, variables) {\n  return valueNode.kind === Kind.VARIABLE && (variables == null || variables[valueNode.name.value] === undefined);\n}\n","import keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport printPathArray from \"../jsutils/printPathArray.mjs\";\nimport { GraphQLError } from \"../error/GraphQLError.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { print } from \"../language/printer.mjs\";\nimport { isInputType, isNonNullType } from \"../type/definition.mjs\";\nimport { typeFromAST } from \"../utilities/typeFromAST.mjs\";\nimport { valueFromAST } from \"../utilities/valueFromAST.mjs\";\nimport { coerceInputValue } from \"../utilities/coerceInputValue.mjs\";\n\n/**\n * Prepares an object map of variableValues of the correct type based on the\n * provided variable definitions and arbitrary input. If the input cannot be\n * parsed to match the variable definitions, a GraphQLError will be thrown.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\nexport function getVariableValues(schema, varDefNodes, inputs, options) {\n  const errors = [];\n  const maxErrors = options?.maxErrors;\n\n  try {\n    const coerced = coerceVariableValues(schema, varDefNodes, inputs, error => {\n      if (maxErrors != null && errors.length >= maxErrors) {\n        throw new GraphQLError('Too many errors processing variables, error limit reached. Execution aborted.');\n      }\n\n      errors.push(error);\n    });\n\n    if (errors.length === 0) {\n      return {\n        coerced\n      };\n    }\n  } catch (error) {\n    errors.push(error);\n  }\n\n  return {\n    errors\n  };\n}\n\nfunction coerceVariableValues(schema, varDefNodes, inputs, onError) {\n  const coercedValues = {};\n\n  for (const varDefNode of varDefNodes) {\n    const varName = varDefNode.variable.name.value;\n    const varType = typeFromAST(schema, varDefNode.type);\n\n    if (!isInputType(varType)) {\n      // Must use input types for variables. This should be caught during\n      // validation, however is checked again here for safety.\n      const varTypeStr = print(varDefNode.type);\n      onError(new GraphQLError(`Variable \"$${varName}\" expected value of type \"${varTypeStr}\" which cannot be used as an input type.`, varDefNode.type));\n      continue;\n    }\n\n    if (!hasOwnProperty(inputs, varName)) {\n      if (varDefNode.defaultValue) {\n        coercedValues[varName] = valueFromAST(varDefNode.defaultValue, varType);\n      } else if (isNonNullType(varType)) {\n        const varTypeStr = inspect(varType);\n        onError(new GraphQLError(`Variable \"$${varName}\" of required type \"${varTypeStr}\" was not provided.`, varDefNode));\n      }\n\n      continue;\n    }\n\n    const value = inputs[varName];\n\n    if (value === null && isNonNullType(varType)) {\n      const varTypeStr = inspect(varType);\n      onError(new GraphQLError(`Variable \"$${varName}\" of non-null type \"${varTypeStr}\" must not be null.`, varDefNode));\n      continue;\n    }\n\n    coercedValues[varName] = coerceInputValue(value, varType, (path, invalidValue, error) => {\n      let prefix = `Variable \"$${varName}\" got invalid value ` + inspect(invalidValue);\n\n      if (path.length > 0) {\n        prefix += ` at \"${varName}${printPathArray(path)}\"`;\n      }\n\n      onError(new GraphQLError(prefix + '; ' + error.message, varDefNode, undefined, undefined, undefined, error.originalError));\n    });\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a list of argument\n * definitions and list of argument AST nodes.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n *\n * @internal\n */\n\n\nexport function getArgumentValues(def, node, variableValues) {\n  const coercedValues = {}; // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n\n  const argumentNodes = node.arguments ?? [];\n  const argNodeMap = keyMap(argumentNodes, arg => arg.name.value);\n\n  for (const argDef of def.args) {\n    const name = argDef.name;\n    const argType = argDef.type;\n    const argumentNode = argNodeMap[name];\n\n    if (!argumentNode) {\n      if (argDef.defaultValue !== undefined) {\n        coercedValues[name] = argDef.defaultValue;\n      } else if (isNonNullType(argType)) {\n        throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + 'was not provided.', node);\n      }\n\n      continue;\n    }\n\n    const valueNode = argumentNode.value;\n    let isNull = valueNode.kind === Kind.NULL;\n\n    if (valueNode.kind === Kind.VARIABLE) {\n      const variableName = valueNode.name.value;\n\n      if (variableValues == null || !hasOwnProperty(variableValues, variableName)) {\n        if (argDef.defaultValue !== undefined) {\n          coercedValues[name] = argDef.defaultValue;\n        } else if (isNonNullType(argType)) {\n          throw new GraphQLError(`Argument \"${name}\" of required type \"${inspect(argType)}\" ` + `was provided the variable \"$${variableName}\" which was not provided a runtime value.`, valueNode);\n        }\n\n        continue;\n      }\n\n      isNull = variableValues[variableName] == null;\n    }\n\n    if (isNull && isNonNullType(argType)) {\n      throw new GraphQLError(`Argument \"${name}\" of non-null type \"${inspect(argType)}\" ` + 'must not be null.', valueNode);\n    }\n\n    const coercedValue = valueFromAST(valueNode, argType, variableValues);\n\n    if (coercedValue === undefined) {\n      // Note: ValuesOfCorrectTypeRule validation should catch this before\n      // execution. This is a runtime check to ensure execution does not\n      // continue with an invalid argument value.\n      throw new GraphQLError(`Argument \"${name}\" has invalid value ${print(valueNode)}.`, valueNode);\n    }\n\n    coercedValues[name] = coercedValue;\n  }\n\n  return coercedValues;\n}\n/**\n * Prepares an object map of argument values given a directive definition\n * and a AST node which may contain directives. Optionally also accepts a map\n * of variable values.\n *\n * If the directive does not exist on the node, returns undefined.\n *\n * Note: The returned value is a plain Object with a prototype, since it is\n * exposed to user code. Care should be taken to not pull values from the\n * Object prototype.\n */\n\nexport function getDirectiveValues(directiveDef, node, variableValues) {\n  // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n  const directiveNode = node.directives?.find(directive => directive.name.value === directiveDef.name);\n\n  if (directiveNode) {\n    return getArgumentValues(directiveDef, directiveNode, variableValues);\n  }\n}\n\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport keyValMap from \"../jsutils/keyValMap.mjs\";\nimport isObjectLike from \"../jsutils/isObjectLike.mjs\";\nimport { parseValue } from \"../language/parser.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { GraphQLDirective } from \"../type/directives.mjs\";\nimport { specifiedScalarTypes } from \"../type/scalars.mjs\";\nimport { introspectionTypes, TypeKind } from \"../type/introspection.mjs\";\nimport { isInputType, isOutputType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType, assertNullableType, assertObjectType, assertInterfaceType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n/**\n * Build a GraphQLSchema for use by client tools.\n *\n * Given the result of a client running the introspection query, creates and\n * returns a GraphQLSchema instance which can be then used with all graphql-js\n * tools, but cannot be used to execute a query, as introspection does not\n * represent the \"resolver\", \"parse\" or \"serialize\" functions or any other\n * server-internal mechanisms.\n *\n * This function expects a complete introspection result. Don't forget to check\n * the \"errors\" field of a server response before calling this function.\n */\n\nexport function buildClientSchema(introspection, options) {\n  isObjectLike(introspection) && isObjectLike(introspection.__schema) || devAssert(0, `Invalid or incomplete introspection result. Ensure that you are passing \"data\" property of introspection response and no \"errors\" was returned alongside: ${inspect(introspection)}.`); // Get the schema from the introspection result.\n\n  const schemaIntrospection = introspection.__schema; // Iterate through all types, getting the type definition for each.\n\n  const typeMap = keyValMap(schemaIntrospection.types, typeIntrospection => typeIntrospection.name, typeIntrospection => buildType(typeIntrospection)); // Include standard types only if they are used.\n\n  for (const stdType of [...specifiedScalarTypes, ...introspectionTypes]) {\n    if (typeMap[stdType.name]) {\n      typeMap[stdType.name] = stdType;\n    }\n  } // Get the root Query, Mutation, and Subscription types.\n\n\n  const queryType = schemaIntrospection.queryType ? getObjectType(schemaIntrospection.queryType) : null;\n  const mutationType = schemaIntrospection.mutationType ? getObjectType(schemaIntrospection.mutationType) : null;\n  const subscriptionType = schemaIntrospection.subscriptionType ? getObjectType(schemaIntrospection.subscriptionType) : null; // Get the directives supported by Introspection, assuming empty-set if\n  // directives were not queried for.\n\n  const directives = schemaIntrospection.directives ? schemaIntrospection.directives.map(buildDirective) : []; // Then produce and return a Schema with these types.\n\n  return new GraphQLSchema({\n    description: schemaIntrospection.description,\n    query: queryType,\n    mutation: mutationType,\n    subscription: subscriptionType,\n    types: objectValues(typeMap),\n    directives,\n    assumeValid: options?.assumeValid\n  }); // Given a type reference in introspection, return the GraphQLType instance.\n  // preferring cached instances before building new instances.\n\n  function getType(typeRef) {\n    if (typeRef.kind === TypeKind.LIST) {\n      const itemRef = typeRef.ofType;\n\n      if (!itemRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      return new GraphQLList(getType(itemRef));\n    }\n\n    if (typeRef.kind === TypeKind.NON_NULL) {\n      const nullableRef = typeRef.ofType;\n\n      if (!nullableRef) {\n        throw new Error('Decorated type deeper than introspection query.');\n      }\n\n      const nullableType = getType(nullableRef);\n      return new GraphQLNonNull(assertNullableType(nullableType));\n    }\n\n    return getNamedType(typeRef);\n  }\n\n  function getNamedType(typeRef) {\n    const typeName = typeRef.name;\n\n    if (!typeName) {\n      throw new Error(`Unknown type reference: ${inspect(typeRef)}.`);\n    }\n\n    const type = typeMap[typeName];\n\n    if (!type) {\n      throw new Error(`Invalid or incomplete schema, unknown type: ${typeName}. Ensure that a full introspection query is used in order to build a client schema.`);\n    }\n\n    return type;\n  }\n\n  function getObjectType(typeRef) {\n    return assertObjectType(getNamedType(typeRef));\n  }\n\n  function getInterfaceType(typeRef) {\n    return assertInterfaceType(getNamedType(typeRef));\n  } // Given a type's introspection result, construct the correct\n  // GraphQLType instance.\n\n\n  function buildType(type) {\n    if (type != null && type.name != null && type.kind != null) {\n      switch (type.kind) {\n        case TypeKind.SCALAR:\n          return buildScalarDef(type);\n\n        case TypeKind.OBJECT:\n          return buildObjectDef(type);\n\n        case TypeKind.INTERFACE:\n          return buildInterfaceDef(type);\n\n        case TypeKind.UNION:\n          return buildUnionDef(type);\n\n        case TypeKind.ENUM:\n          return buildEnumDef(type);\n\n        case TypeKind.INPUT_OBJECT:\n          return buildInputObjectDef(type);\n      }\n    }\n\n    const typeStr = inspect(type);\n    throw new Error(`Invalid or incomplete introspection result. Ensure that a full introspection query is used in order to build a client schema: ${typeStr}.`);\n  }\n\n  function buildScalarDef(scalarIntrospection) {\n    return new GraphQLScalarType({\n      name: scalarIntrospection.name,\n      description: scalarIntrospection.description,\n      specifiedByUrl: scalarIntrospection.specifiedByUrl\n    });\n  }\n\n  function buildImplementationsList(implementingIntrospection) {\n    // TODO: Temporary workaround until GraphQL ecosystem will fully support\n    // 'interfaces' on interface types.\n    if (implementingIntrospection.interfaces === null && implementingIntrospection.kind === TypeKind.INTERFACE) {\n      return [];\n    }\n\n    if (!implementingIntrospection.interfaces) {\n      const implementingIntrospectionStr = inspect(implementingIntrospection);\n      throw new Error(`Introspection result missing interfaces: ${implementingIntrospectionStr}.`);\n    }\n\n    return implementingIntrospection.interfaces.map(getInterfaceType);\n  }\n\n  function buildObjectDef(objectIntrospection) {\n    return new GraphQLObjectType({\n      name: objectIntrospection.name,\n      description: objectIntrospection.description,\n      interfaces: () => buildImplementationsList(objectIntrospection),\n      fields: () => buildFieldDefMap(objectIntrospection)\n    });\n  }\n\n  function buildInterfaceDef(interfaceIntrospection) {\n    return new GraphQLInterfaceType({\n      name: interfaceIntrospection.name,\n      description: interfaceIntrospection.description,\n      interfaces: () => buildImplementationsList(interfaceIntrospection),\n      fields: () => buildFieldDefMap(interfaceIntrospection)\n    });\n  }\n\n  function buildUnionDef(unionIntrospection) {\n    if (!unionIntrospection.possibleTypes) {\n      const unionIntrospectionStr = inspect(unionIntrospection);\n      throw new Error(`Introspection result missing possibleTypes: ${unionIntrospectionStr}.`);\n    }\n\n    return new GraphQLUnionType({\n      name: unionIntrospection.name,\n      description: unionIntrospection.description,\n      types: () => unionIntrospection.possibleTypes.map(getObjectType)\n    });\n  }\n\n  function buildEnumDef(enumIntrospection) {\n    if (!enumIntrospection.enumValues) {\n      const enumIntrospectionStr = inspect(enumIntrospection);\n      throw new Error(`Introspection result missing enumValues: ${enumIntrospectionStr}.`);\n    }\n\n    return new GraphQLEnumType({\n      name: enumIntrospection.name,\n      description: enumIntrospection.description,\n      values: keyValMap(enumIntrospection.enumValues, valueIntrospection => valueIntrospection.name, valueIntrospection => ({\n        description: valueIntrospection.description,\n        deprecationReason: valueIntrospection.deprecationReason\n      }))\n    });\n  }\n\n  function buildInputObjectDef(inputObjectIntrospection) {\n    if (!inputObjectIntrospection.inputFields) {\n      const inputObjectIntrospectionStr = inspect(inputObjectIntrospection);\n      throw new Error(`Introspection result missing inputFields: ${inputObjectIntrospectionStr}.`);\n    }\n\n    return new GraphQLInputObjectType({\n      name: inputObjectIntrospection.name,\n      description: inputObjectIntrospection.description,\n      fields: () => buildInputValueDefMap(inputObjectIntrospection.inputFields)\n    });\n  }\n\n  function buildFieldDefMap(typeIntrospection) {\n    if (!typeIntrospection.fields) {\n      throw new Error(`Introspection result missing fields: ${inspect(typeIntrospection)}.`);\n    }\n\n    return keyValMap(typeIntrospection.fields, fieldIntrospection => fieldIntrospection.name, buildField);\n  }\n\n  function buildField(fieldIntrospection) {\n    const type = getType(fieldIntrospection.type);\n\n    if (!isOutputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(`Introspection must provide output type for fields, but received: ${typeStr}.`);\n    }\n\n    if (!fieldIntrospection.args) {\n      const fieldIntrospectionStr = inspect(fieldIntrospection);\n      throw new Error(`Introspection result missing field args: ${fieldIntrospectionStr}.`);\n    }\n\n    return {\n      description: fieldIntrospection.description,\n      deprecationReason: fieldIntrospection.deprecationReason,\n      type,\n      args: buildInputValueDefMap(fieldIntrospection.args)\n    };\n  }\n\n  function buildInputValueDefMap(inputValueIntrospections) {\n    return keyValMap(inputValueIntrospections, inputValue => inputValue.name, buildInputValue);\n  }\n\n  function buildInputValue(inputValueIntrospection) {\n    const type = getType(inputValueIntrospection.type);\n\n    if (!isInputType(type)) {\n      const typeStr = inspect(type);\n      throw new Error(`Introspection must provide input type for arguments, but received: ${typeStr}.`);\n    }\n\n    const defaultValue = inputValueIntrospection.defaultValue != null ? valueFromAST(parseValue(inputValueIntrospection.defaultValue), type) : undefined;\n    return {\n      description: inputValueIntrospection.description,\n      type,\n      defaultValue,\n      deprecationReason: inputValueIntrospection.deprecationReason\n    };\n  }\n\n  function buildDirective(directiveIntrospection) {\n    if (!directiveIntrospection.args) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(`Introspection result missing directive args: ${directiveIntrospectionStr}.`);\n    }\n\n    if (!directiveIntrospection.locations) {\n      const directiveIntrospectionStr = inspect(directiveIntrospection);\n      throw new Error(`Introspection result missing directive locations: ${directiveIntrospectionStr}.`);\n    }\n\n    return new GraphQLDirective({\n      name: directiveIntrospection.name,\n      description: directiveIntrospection.description,\n      isRepeatable: directiveIntrospection.isRepeatable,\n      locations: directiveIntrospection.locations.slice(),\n      args: buildInputValueDefMap(directiveIntrospection.args)\n    });\n  }\n}\n","import objectValues from \"../polyfills/objectValues.mjs\";\nimport keyMap from \"../jsutils/keyMap.mjs\";\nimport inspect from \"../jsutils/inspect.mjs\";\nimport mapValue from \"../jsutils/mapValue.mjs\";\nimport invariant from \"../jsutils/invariant.mjs\";\nimport devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { isTypeDefinitionNode, isTypeExtensionNode } from \"../language/predicates.mjs\";\nimport { assertValidSDLExtension } from \"../validation/validate.mjs\";\nimport { getDirectiveValues } from \"../execution/values.mjs\";\nimport { assertSchema, GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedScalarTypes, isSpecifiedScalarType } from \"../type/scalars.mjs\";\nimport { introspectionTypes, isIntrospectionType } from \"../type/introspection.mjs\";\nimport { GraphQLDirective, GraphQLDeprecatedDirective, GraphQLSpecifiedByDirective } from \"../type/directives.mjs\";\nimport { isScalarType, isObjectType, isInterfaceType, isUnionType, isListType, isNonNullType, isEnumType, isInputObjectType, GraphQLList, GraphQLNonNull, GraphQLScalarType, GraphQLObjectType, GraphQLInterfaceType, GraphQLUnionType, GraphQLEnumType, GraphQLInputObjectType } from \"../type/definition.mjs\";\nimport { valueFromAST } from \"./valueFromAST.mjs\";\n\n/**\n * Produces a new schema given an existing schema and a document which may\n * contain GraphQL type extensions and definitions. The original schema will\n * remain unaltered.\n *\n * Because a schema represents a graph of references, a schema cannot be\n * extended without effectively making an entire copy. We do not know until it's\n * too late if subgraphs remain unchanged.\n *\n * This algorithm copies the provided schema, applying extensions while\n * producing the copy. The original schema remains unaltered.\n */\nexport function extendSchema(schema, documentAST, options) {\n  assertSchema(schema);\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if (options?.assumeValid !== true && options?.assumeValidSDL !== true) {\n    assertValidSDLExtension(documentAST, schema);\n  }\n\n  const schemaConfig = schema.toConfig();\n  const extendedConfig = extendSchemaImpl(schemaConfig, documentAST, options);\n  return schemaConfig === extendedConfig ? schema : new GraphQLSchema(extendedConfig);\n}\n/**\n * @internal\n */\n\nexport function extendSchemaImpl(schemaConfig, documentAST, options) {\n  // Collect the type definitions and extensions found in the document.\n  const typeDefs = [];\n  const typeExtensionsMap = Object.create(null); // New directives and types are separate because a directives and types can\n  // have the same name. For example, a type named \"skip\".\n\n  const directiveDefs = [];\n  let schemaDef; // Schema extensions are collected which may add additional operation types.\n\n  const schemaExtensions = [];\n\n  for (const def of documentAST.definitions) {\n    if (def.kind === Kind.SCHEMA_DEFINITION) {\n      schemaDef = def;\n    } else if (def.kind === Kind.SCHEMA_EXTENSION) {\n      schemaExtensions.push(def);\n    } else if (isTypeDefinitionNode(def)) {\n      typeDefs.push(def);\n    } else if (isTypeExtensionNode(def)) {\n      const extendedTypeName = def.name.value;\n      const existingTypeExtensions = typeExtensionsMap[extendedTypeName];\n      typeExtensionsMap[extendedTypeName] = existingTypeExtensions ? existingTypeExtensions.concat([def]) : [def];\n    } else if (def.kind === Kind.DIRECTIVE_DEFINITION) {\n      directiveDefs.push(def);\n    }\n  } // If this document contains no new types, extensions, or directives then\n  // return the same unmodified GraphQLSchema instance.\n\n\n  if (Object.keys(typeExtensionsMap).length === 0 && typeDefs.length === 0 && directiveDefs.length === 0 && schemaExtensions.length === 0 && schemaDef == null) {\n    return schemaConfig;\n  }\n\n  const typeMap = Object.create(null);\n\n  for (const existingType of schemaConfig.types) {\n    typeMap[existingType.name] = extendNamedType(existingType);\n  }\n\n  for (const typeNode of typeDefs) {\n    const name = typeNode.name.value;\n    typeMap[name] = stdTypeMap[name] ?? buildType(typeNode);\n  }\n\n  const operationTypes = {\n    // Get the extended root operation types.\n    query: schemaConfig.query && replaceNamedType(schemaConfig.query),\n    mutation: schemaConfig.mutation && replaceNamedType(schemaConfig.mutation),\n    subscription: schemaConfig.subscription && replaceNamedType(schemaConfig.subscription),\n    // Then, incorporate schema definition and all schema extensions.\n    ...(schemaDef && getOperationTypes([schemaDef])),\n    ...getOperationTypes(schemaExtensions)\n  }; // Then produce and return a Schema config with these types.\n\n  return {\n    description: schemaDef?.description?.value,\n    ...operationTypes,\n    types: objectValues(typeMap),\n    directives: [...schemaConfig.directives.map(replaceDirective), ...directiveDefs.map(buildDirective)],\n    extensions: undefined,\n    astNode: schemaDef ?? schemaConfig.astNode,\n    extensionASTNodes: schemaConfig.extensionASTNodes.concat(schemaExtensions),\n    assumeValid: options?.assumeValid ?? false\n  }; // Below are functions used for producing this schema that have closed over\n  // this scope and have access to the schema, cache, and newly defined types.\n\n  function replaceType(type) {\n    if (isListType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLList(replaceType(type.ofType));\n    }\n\n    if (isNonNullType(type)) {\n      // $FlowFixMe[incompatible-return]\n      return new GraphQLNonNull(replaceType(type.ofType));\n    }\n\n    return replaceNamedType(type);\n  }\n\n  function replaceNamedType(type) {\n    // Note: While this could make early assertions to get the correctly\n    // typed values, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n    return typeMap[type.name];\n  }\n\n  function replaceDirective(directive) {\n    const config = directive.toConfig();\n    return new GraphQLDirective({ ...config,\n      args: mapValue(config.args, extendArg)\n    });\n  }\n\n  function extendNamedType(type) {\n    if (isIntrospectionType(type) || isSpecifiedScalarType(type)) {\n      // Builtin types are not extended.\n      return type;\n    }\n\n    if (isScalarType(type)) {\n      return extendScalarType(type);\n    }\n\n    if (isObjectType(type)) {\n      return extendObjectType(type);\n    }\n\n    if (isInterfaceType(type)) {\n      return extendInterfaceType(type);\n    }\n\n    if (isUnionType(type)) {\n      return extendUnionType(type);\n    }\n\n    if (isEnumType(type)) {\n      return extendEnumType(type);\n    } // istanbul ignore else (See: 'https://github.com/graphql/graphql-js/issues/2618')\n\n\n    if (isInputObjectType(type)) {\n      return extendInputObjectType(type);\n    } // istanbul ignore next (Not reachable. All possible types have been considered)\n\n\n    false || invariant(0, 'Unexpected type: ' + inspect(type));\n  }\n\n  function extendInputObjectType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[config.name] ?? [];\n    return new GraphQLInputObjectType({ ...config,\n      fields: () => ({ ...mapValue(config.fields, field => ({ ...field,\n          type: replaceType(field.type)\n        })),\n        ...buildInputFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendEnumType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[type.name] ?? [];\n    return new GraphQLEnumType({ ...config,\n      values: { ...config.values,\n        ...buildEnumValueMap(extensions)\n      },\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendScalarType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[config.name] ?? [];\n    let specifiedByUrl = config.specifiedByUrl;\n\n    for (const extensionNode of extensions) {\n      specifiedByUrl = getSpecifiedByUrl(extensionNode) ?? specifiedByUrl;\n    }\n\n    return new GraphQLScalarType({ ...config,\n      specifiedByUrl,\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendObjectType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[config.name] ?? [];\n    return new GraphQLObjectType({ ...config,\n      interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],\n      fields: () => ({ ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendInterfaceType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[config.name] ?? [];\n    return new GraphQLInterfaceType({ ...config,\n      interfaces: () => [...type.getInterfaces().map(replaceNamedType), ...buildInterfaces(extensions)],\n      fields: () => ({ ...mapValue(config.fields, extendField),\n        ...buildFieldMap(extensions)\n      }),\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendUnionType(type) {\n    const config = type.toConfig();\n    const extensions = typeExtensionsMap[config.name] ?? [];\n    return new GraphQLUnionType({ ...config,\n      types: () => [...type.getTypes().map(replaceNamedType), ...buildUnionTypes(extensions)],\n      extensionASTNodes: config.extensionASTNodes.concat(extensions)\n    });\n  }\n\n  function extendField(field) {\n    return { ...field,\n      type: replaceType(field.type),\n      // $FlowFixMe[incompatible-call]\n      args: mapValue(field.args, extendArg)\n    };\n  }\n\n  function extendArg(arg) {\n    return { ...arg,\n      type: replaceType(arg.type)\n    };\n  }\n\n  function getOperationTypes(nodes) {\n    const opTypes = {};\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const operationTypesNodes = node.operationTypes ?? [];\n\n      for (const operationType of operationTypesNodes) {\n        opTypes[operationType.operation] = getNamedType(operationType.type);\n      }\n    } // Note: While this could make early assertions to get the correctly\n    // typed values below, that would throw immediately while type system\n    // validation with validateSchema() will produce more actionable results.\n\n\n    return opTypes;\n  }\n\n  function getNamedType(node) {\n    const name = node.name.value;\n    const type = stdTypeMap[name] ?? typeMap[name];\n\n    if (type === undefined) {\n      throw new Error(`Unknown type: \"${name}\".`);\n    }\n\n    return type;\n  }\n\n  function getWrappedType(node) {\n    if (node.kind === Kind.LIST_TYPE) {\n      return new GraphQLList(getWrappedType(node.type));\n    }\n\n    if (node.kind === Kind.NON_NULL_TYPE) {\n      // $FlowFixMe[incompatible-call]\n      return new GraphQLNonNull(getWrappedType(node.type));\n    }\n\n    return getNamedType(node);\n  }\n\n  function buildDirective(node) {\n    const locations = node.locations.map(({\n      value\n    }) => value);\n    return new GraphQLDirective({\n      name: node.name.value,\n      description: node.description?.value,\n      locations,\n      isRepeatable: node.repeatable,\n      args: buildArgumentMap(node.arguments),\n      astNode: node\n    });\n  }\n\n  function buildFieldMap(nodes) {\n    const fieldConfigMap = Object.create(null);\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const nodeFields = node.fields ?? [];\n\n      for (const field of nodeFields) {\n        fieldConfigMap[field.name.value] = {\n          // Note: While this could make assertions to get the correctly typed\n          // value, that would throw immediately while type system validation\n          // with validateSchema() will produce more actionable results.\n          type: getWrappedType(field.type),\n          description: field.description?.value,\n          args: buildArgumentMap(field.arguments),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return fieldConfigMap;\n  }\n\n  function buildArgumentMap(args) {\n    // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n    const argsNodes = args ?? [];\n    const argConfigMap = Object.create(null);\n\n    for (const arg of argsNodes) {\n      // Note: While this could make assertions to get the correctly typed\n      // value, that would throw immediately while type system validation\n      // with validateSchema() will produce more actionable results.\n      const type = getWrappedType(arg.type);\n      argConfigMap[arg.name.value] = {\n        type,\n        description: arg.description?.value,\n        defaultValue: valueFromAST(arg.defaultValue, type),\n        deprecationReason: getDeprecationReason(arg),\n        astNode: arg\n      };\n    }\n\n    return argConfigMap;\n  }\n\n  function buildInputFieldMap(nodes) {\n    const inputFieldMap = Object.create(null);\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const fieldsNodes = node.fields ?? [];\n\n      for (const field of fieldsNodes) {\n        // Note: While this could make assertions to get the correctly typed\n        // value, that would throw immediately while type system validation\n        // with validateSchema() will produce more actionable results.\n        const type = getWrappedType(field.type);\n        inputFieldMap[field.name.value] = {\n          type,\n          description: field.description?.value,\n          defaultValue: valueFromAST(field.defaultValue, type),\n          deprecationReason: getDeprecationReason(field),\n          astNode: field\n        };\n      }\n    }\n\n    return inputFieldMap;\n  }\n\n  function buildEnumValueMap(nodes) {\n    const enumValueMap = Object.create(null);\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const valuesNodes = node.values ?? [];\n\n      for (const value of valuesNodes) {\n        enumValueMap[value.name.value] = {\n          description: value.description?.value,\n          deprecationReason: getDeprecationReason(value),\n          astNode: value\n        };\n      }\n    }\n\n    return enumValueMap;\n  }\n\n  function buildInterfaces(nodes) {\n    const interfaces = [];\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const interfacesNodes = node.interfaces ?? [];\n\n      for (const type of interfacesNodes) {\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        interfaces.push(getNamedType(type));\n      }\n    }\n\n    return interfaces;\n  }\n\n  function buildUnionTypes(nodes) {\n    const types = [];\n\n    for (const node of nodes) {\n      // istanbul ignore next (See: 'https://github.com/graphql/graphql-js/issues/2203')\n      const typeNodes = node.types ?? [];\n\n      for (const type of typeNodes) {\n        // Note: While this could make assertions to get the correctly typed\n        // values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable\n        // results.\n        types.push(getNamedType(type));\n      }\n    }\n\n    return types;\n  }\n\n  function buildType(astNode) {\n    const name = astNode.name.value;\n    const extensionNodes = typeExtensionsMap[name] ?? [];\n\n    switch (astNode.kind) {\n      case Kind.OBJECT_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLObjectType({\n            name,\n            description: astNode.description?.value,\n            interfaces: () => buildInterfaces(allNodes),\n            fields: () => buildFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.INTERFACE_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLInterfaceType({\n            name,\n            description: astNode.description?.value,\n            interfaces: () => buildInterfaces(allNodes),\n            fields: () => buildFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.ENUM_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLEnumType({\n            name,\n            description: astNode.description?.value,\n            values: buildEnumValueMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.UNION_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLUnionType({\n            name,\n            description: astNode.description?.value,\n            types: () => buildUnionTypes(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.SCALAR_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          return new GraphQLScalarType({\n            name,\n            description: astNode.description?.value,\n            specifiedByUrl: getSpecifiedByUrl(astNode),\n            astNode,\n            extensionASTNodes\n          });\n        }\n\n      case Kind.INPUT_OBJECT_TYPE_DEFINITION:\n        {\n          const extensionASTNodes = extensionNodes;\n          const allNodes = [astNode, ...extensionASTNodes];\n          return new GraphQLInputObjectType({\n            name,\n            description: astNode.description?.value,\n            fields: () => buildInputFieldMap(allNodes),\n            astNode,\n            extensionASTNodes\n          });\n        }\n    } // istanbul ignore next (Not reachable. All possible type definition nodes have been considered)\n\n\n    false || invariant(0, 'Unexpected type definition node: ' + inspect(astNode));\n  }\n}\nconst stdTypeMap = keyMap(specifiedScalarTypes.concat(introspectionTypes), type => type.name);\n/**\n * Given a field or enum value node, returns the string value for the\n * deprecation reason.\n */\n\nfunction getDeprecationReason(node) {\n  const deprecated = getDirectiveValues(GraphQLDeprecatedDirective, node);\n  return deprecated?.reason;\n}\n/**\n * Given a scalar node, returns the string value for the specifiedByUrl.\n */\n\n\nfunction getSpecifiedByUrl(node) {\n  const specifiedBy = getDirectiveValues(GraphQLSpecifiedByDirective, node);\n  return specifiedBy?.url;\n}\n","import devAssert from \"../jsutils/devAssert.mjs\";\nimport { Kind } from \"../language/kinds.mjs\";\nimport { parse } from \"../language/parser.mjs\";\nimport { assertValidSDL } from \"../validation/validate.mjs\";\nimport { GraphQLSchema } from \"../type/schema.mjs\";\nimport { specifiedDirectives } from \"../type/directives.mjs\";\nimport { extendSchemaImpl } from \"./extendSchema.mjs\";\n\n/**\n * This takes the ast of a schema document produced by the parse function in\n * src/language/parser.js.\n *\n * If no schema definition is provided, then it will look for types named Query\n * and Mutation.\n *\n * Given that AST it constructs a GraphQLSchema. The resulting schema\n * has no resolve methods, so execution will use default resolvers.\n */\nexport function buildASTSchema(documentAST, options) {\n  documentAST != null && documentAST.kind === Kind.DOCUMENT || devAssert(0, 'Must provide valid Document AST.');\n\n  if (options?.assumeValid !== true && options?.assumeValidSDL !== true) {\n    assertValidSDL(documentAST);\n  }\n\n  const emptySchemaConfig = {\n    description: undefined,\n    types: [],\n    directives: [],\n    extensions: undefined,\n    extensionASTNodes: [],\n    assumeValid: false\n  };\n  const config = extendSchemaImpl(emptySchemaConfig, documentAST, options);\n\n  if (config.astNode == null) {\n    for (const type of config.types) {\n      switch (type.name) {\n        // Note: While this could make early assertions to get the correctly\n        // typed values below, that would throw immediately while type system\n        // validation with validateSchema() will produce more actionable results.\n        case 'Query':\n          config.query = type;\n          break;\n\n        case 'Mutation':\n          config.mutation = type;\n          break;\n\n        case 'Subscription':\n          config.subscription = type;\n          break;\n      }\n    }\n  }\n\n  const {\n    directives\n  } = config; // If specified directives were not explicitly declared, add them.\n\n  for (const stdDirective of specifiedDirectives) {\n    if (directives.every(directive => directive.name !== stdDirective.name)) {\n      directives.push(stdDirective);\n    }\n  }\n\n  return new GraphQLSchema(config);\n}\n/**\n * A helper function to build a GraphQLSchema directly from a source\n * document.\n */\n\nexport function buildSchema(source, options) {\n  const document = parse(source, {\n    noLocation: options?.noLocation,\n    experimentalFragmentVariables: options?.experimentalFragmentVariables\n  });\n  return buildASTSchema(document, {\n    assumeValidSDL: options?.assumeValidSDL,\n    assumeValid: options?.assumeValid\n  });\n}\n",null,null,null,null,null,"import { GraphQLError } from \"../error/GraphQLError.mjs\";\n\n/**\n * Extracts the root type of the operation from the schema.\n */\nexport function getOperationRootType(schema, operation) {\n  if (operation.operation === 'query') {\n    const queryType = schema.getQueryType();\n\n    if (!queryType) {\n      throw new GraphQLError('Schema does not define the required query root type.', operation);\n    }\n\n    return queryType;\n  }\n\n  if (operation.operation === 'mutation') {\n    const mutationType = schema.getMutationType();\n\n    if (!mutationType) {\n      throw new GraphQLError('Schema is not configured for mutations.', operation);\n    }\n\n    return mutationType;\n  }\n\n  if (operation.operation === 'subscription') {\n    const subscriptionType = schema.getSubscriptionType();\n\n    if (!subscriptionType) {\n      throw new GraphQLError('Schema is not configured for subscriptions.', operation);\n    }\n\n    return subscriptionType;\n  }\n\n  throw new GraphQLError('Can only have query, mutation and subscription operations.', operation);\n}\n",null,"/**\n * Provided a collection of ASTs, presumably each from different files,\n * concatenate the ASTs together into batched AST, useful for validating many\n * GraphQL source files which together represent one conceptual application.\n */\nexport function concatAST(documents) {\n  let definitions = [];\n\n  for (const doc of documents) {\n    definitions = definitions.concat(doc.definitions);\n  }\n\n  return {\n    kind: 'Document',\n    definitions\n  };\n}\n"],"names":["isObjectLike","value","getLocation","source","position","lineRegexp","match","line","column","exec","body","index","length","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","name","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","push","slice","printPrefixedLines","map","subLine","existingLines","filter","_","undefined","padLen","max","prefix","leftPad","str","join","len","Array","GraphQLError","Error","[object Object]","message","nodes","positions","path","originalError","extensions","super","_nodes","isArray","_source","loc","_locations","_positions","reduce","list","node","pos","_extensions","originalExtensions","Object","defineProperties","this","enumerable","writable","locations","stack","defineProperty","configurable","captureStackTrace","error","output","printError","get","Symbol","toStringTag","syntaxError","description","Kind","freeze","NAME","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","INT","FLOAT","STRING","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","Location","startToken","endToken","end","for","toJSON","Token","kind","prev","next","isNode","maybeNode","TokenKind","SOF","EOF","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","BLOCK_STRING","COMMENT","inspect","formatValue","seenValues","JSON","stringify","previouslySeenValues","indexOf","jsonValue","array","min","remaining","items","formatArray","object","keys","tag","prototype","toString","call","replace","constructor","getObjectTag","key","formatObject","formatObjectValue","String","devAssert","condition","Boolean","Source","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","dedentBlockStringValue","rawString","commonIndent","isFirstLine","isEmptyLine","indent","charCodeAt","getBlockStringIndentation","startLine","isBlank","endLine","Lexer","startOfFileToken","lastToken","token","lineStart","lookahead","readToken","printCharCode","code","isNaN","fromCharCode","toUpperCase","lexer","bodyLength","col","readComment","readBlockString","readString","readNumber","readName","unexpectedCharacterMessage","firstCode","isFloat","readDigits","isNameStart","chunkStart","charCode","a","b","c","d","char2hex","rawValue","parse","options","Parser","parseDocument","sourceObj","instanceOf","isSource","_lexer","_options","expectToken","definitions","many","parseDefinition","peek","parseOperationDefinition","parseFragmentDefinition","parseTypeSystemDefinition","parseTypeSystemExtension","peekDescription","unexpected","operation","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseValueLiteral","selections","parseSelection","parseFragment","parseField","nameOrAlias","alias","arguments","parseArguments","isConst","item","parseConstArgument","parseArgument","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","expectKeyword","experimentalFragmentVariables","parseList","parseObject","advance","parseStringLiteral","block","values","any","fields","parseObjectField","parseDirective","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","args","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","noLocation","getTokenKindDesc","getTokenDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","visit","root","visitor","visitorKeys","parent","inArray","edits","ancestors","newRoot","isLeaving","isEdited","pop","clone","k","editOffset","ii","editKey","editValue","splice","result","visitFn","getVisitFn","visitInParallel","visitors","skipping","fn","apply","kindVisitor","kindSpecificVisitor","leave","enter","specificVisitor","specificKindVisitor","objectValues","obj","NAME_RX","objectEntries","entries","keyMap","keyFn","create","mapValue","toObjMap","getPrototypeOf","keyValMap","valFn","didYouMean","firstArg","secondArg","subMessage","suggestionsArg","suggestions","x","selected","lastItem","identityFunc","suggestionList","input","optionsByDistance","lexicalDistance","LexicalDistance","threshold","option","distance","measure","sort","distanceDiff","localeCompare","_input","_inputLowerCase","toLowerCase","_inputArray","stringToArray","_rows","fill","optionLowerCase","tmp","aLength","bLength","rows","j","upRow","currentRow","smallestCell","cost","currentCell","doubleDiagonalCell","strLength","print","ast","printDocASTReducer","op","varDefs","wrap","argsLine","isBlockString","indentation","preferMultipleLines","isSingleLine","hasLeadingSpace","hasTrailingQuote","hasTrailingSlash","printAsMultipleLines","printBlockString","addDescription","hasMultilineItems","cb","maybeArray","separator","maybeString","isMultiline","some","invariant","valueFromASTUntyped","valueNode","variables","parseInt","parseFloat","field","isType","isScalarType","isObjectType","isInterfaceType","isUnionType","isEnumType","isInputObjectType","isListType","isNonNullType","GraphQLScalarType","GraphQLObjectType","GraphQLInterfaceType","GraphQLUnionType","GraphQLEnumType","GraphQLInputObjectType","GraphQLList","GraphQLNonNull","isInputType","isWrappingType","ofType","isOutputType","isLeafType","isCompositeType","isAbstractType","isNullableType","getNullableType","isNamedType","getNamedType","unwrappedType","resolveThunk","thunk","undefineIfEmpty","arr","config","parseValue","specifiedByUrl","serialize","parseLiteral","astNode","extensionASTNodes","isTypeOf","_fields","defineFieldMap","bind","_interfaces","defineInterfaces","getInterfaces","fieldsToFieldsConfig","getFields","fieldMap","isPlainObj","fieldConfig","fieldName","resolve","argsConfig","argName","argConfig","deprecationReason","subscribe","argsToArgsConfig","arg","isRequiredArgument","resolveType","_types","defineTypes","getTypes","typeName","valueMap","_values","valueName","valueConfig","_valueLookup","Map","enumValue","_nameLookup","outputValue","inputValue","valueStr","didYouMeanEnumValue","getValue","_variables","getValues","enumType","unknownValueStr","defineInputFieldMap","isRequiredInputField","isEqualType","typeA","typeB","isTypeSubTypeOf","schema","maybeSubType","superType","isSubType","doTypesOverlap","getPossibleTypes","MAX_INT","MIN_INT","GraphQLInt","coercedValue","serializeObject","num","Number","isInteger","GraphQLFloat","isFinite","valueOf","valueOfResult","GraphQLString","GraphQLBoolean","GraphQLID","specifiedScalarTypes","astFromValue","astValue","itemType","iterator","isCollection","valuesNodes","from","itemNode","fieldNodes","fieldValue","serialized","stringNum","integerStringRegExp","test","TypeError","__Schema","__Type","getTypeMap","queryType","getQueryType","mutationType","getMutationType","subscriptionType","getSubscriptionType","__Directive","getDirectives","directive","isRepeatable","__DirectiveLocation","__InputValue","__TypeKind","TypeKind","NON_NULL","__Field","includeDeprecated","possibleTypes","_args","_context","enumValues","__EnumValue","inputFields","isDeprecated","valueAST","SchemaMetaFieldDef","TypeMetaFieldDef","getType","TypeNameMetaFieldDef","parentType","introspectionTypes","isIntrospectionType","isDirective","GraphQLDirective","GraphQLIncludeDirective","if","GraphQLSkipDirective","GraphQLDeprecatedDirective","reason","GraphQLSpecifiedByDirective","url","specifiedDirectives","assertSchema","GraphQLSchema","isSchema","__validationErrors","assumeValid","_queryType","query","_mutationType","mutation","_subscriptionType","subscription","_directives","allReferencedTypes","Set","delete","collectReferencedTypes","_typeMap","_subTypeMap","_implementationsMap","namedType","iface","implementations","objects","abstractType","getImplementations","interfaceType","find","typeSet","has","add","memberType","validateSchema","context","SchemaValidationContext","reportError","getOperationTypeNode","validateRootTypes","validateName","getDeprecatedDirectiveNode","validateDirectives","validateInputObjectCircularRefs","visitedTypes","fieldPath","fieldPathIndexByTypeName","detectCycleRecursive","inputObj","fieldType","cycleIndex","cyclePath","pathStr","fieldObj","createInputObjectCircularRefsValidator","typeMap","validateFields","validateInterfaces","validateUnionMembers","validateEnumValues","validateInputFields","validateTypes","errors","getErrors","_errors","addError","operationNodes","getAllSubNodes","rawOriginalError","locatedError","getAllNodes","ifaceTypeNames","getAllImplementsInterfaceNodes","validateTypeImplementsAncestors","validateTypeImplementsInterface","typeFieldMap","ifaceField","typeField","ifaceArg","typeArg","ifaceInterfaces","transitive","union","memberTypes","includedTypeNames","getUnionMemberTypeNodes","concat","getter","subNodes","typeNode","ifaceNode","unionNode","definitionNode","typeFromAST","innerType","TypeInfo","getFieldDefFn","initialType","_schema","_typeStack","_parentTypeStack","_inputTypeStack","_fieldDefStack","_defaultValueStack","_directive","_argument","_enumValue","_getFieldDef","getFieldDef","getParentType","fieldDef","getDirective","typeConditionAST","outputType","inputType","argDef","argType","fieldOrDirective","listType","getInputType","objectType","inputFieldType","inputField","fieldNode","visitWithTypeInfo","typeInfo","isExecutableDefinitionNode","isTypeDefinitionNode","isTypeExtensionNode","KnownTypeNamesRule","getSchema","existingTypesMap","definedTypes","def","getDocument","typeNames","_1","_2","isSDL","isTypeSystemDefinitionNode","isTypeSystemExtensionNode","standardTypeNames","isStandardTypeName","suggestedTypes","NoUnusedFragmentsRule","operationDefs","fragmentDefs","fragmentNameUsed","fragment","getRecursivelyReferencedFragments","fragmentDef","fragName","KnownDirectivesRule","locationsMap","definedDirectives","astDefinitions","_key","_parent","_path","candidateLocation","appliedTo","getDirectiveLocationForOperation","getDirectiveLocationForASTPath","UniqueDirectivesPerLocationRule","uniqueDirectiveMap","schemaDirectives","typeDirectivesMap","seenDirectives","directiveName","KnownArgumentNamesOnDirectivesRule","directiveArgs","argsNodes","directiveNode","knownArgs","argNode","UniqueArgumentNamesRule","knownArgNames","isValidValueNode","locationType","typeStr","ProvidedRequiredArgumentsOnDirectivesRule","requiredArgsMap","argNodes","isRequiredArgumentNode","requiredArgs","argNodeMap","argTypeStr","allowedVariableUsage","varType","varDefaultValue","locationDefaultValue","hasLocationDefaultValue","reasonMessage","responseName","subReason","collectConflictsBetweenFieldsAndFragment","conflicts","cachedFieldsAndFragmentNames","comparedFragmentPairs","areMutuallyExclusive","fragmentName","getFragment","fieldMap2","fragmentNames2","getReferencedFieldsAndFragmentNames","collectConflictsBetween","collectConflictsBetweenFragments","fragmentName1","fragmentName2","fragment1","fragment2","fieldMap1","fragmentNames1","parentFieldsAreMutuallyExclusive","fields2","fields1","conflict","findConflict","field1","field2","parentType1","node1","def1","parentType2","node2","def2","name1","name2","arguments1","arguments2","every","argument1","argument2","argument","value1","value2","sameArguments","type1","type2","doTypesConflict","selectionSet1","selectionSet2","allFields","subfieldConflicts","getFieldsAndFragmentNames","findConflictsBetweenSubSelectionSets","cached","nodeAndDefs","fragmentNames","_collectFieldsAndFragmentNames","set","fragmentType","selection","inlineFragmentType","PairSet","_data","first","_pairSetAdd","UniqueInputFieldNamesRule","knownNameStack","knownNames","hasField","defKindToExtKind","specifiedRules","definition","defName","knownOperationNames","operationName","operationCount","variableName","suggestion","usageCount","possibleType","possibleInterface","usageCountDiff","getSuggestedTypeNames","getSuggestedFieldNames","knownFragmentNames","fragType","parentTypeStr","fragTypeStr","frag","getFragmentType","visitedFrags","spreadPath","spreadPathIndexByName","spreadNodes","getFragmentSpreads","spreadNode","spreadName","spreadFragment","viaPath","s","knownVariableNames","variableNameDefined","usages","getRecursiveVariableUsages","varName","variableDefs","variableNameUsed","variableDef","getArgument","getParentInputType","fieldNodeMap","varDefMap","varDef","varTypeStr","collectConflictsWithin","findConflictsWithinSelectionSet","reasonMsg","specifiedSDLRules","oldSchema","alreadyDefined","schemaDefinitionsCount","definedOperationTypes","existingOperationTypes","checkOperationTypes","operationTypesNodes","operationType","alreadyDefinedOperationType","knownTypeNames","checkTypeName","existingTypeMap","knownValueNames","checkValueUniqueness","valueNodes","valueNames","valueDef","existingType","knownFieldNames","checkFieldUniqueness","fieldNames","knownDirectiveNames","checkExtension","defNode","expectedKind","typeToExtKind","kindStr","extensionKindToTypeName","allTypeNames","ASTValidationContext","onError","_ast","_fragments","_fragmentSpreads","_recursivelyReferencedFragments","_onError","fragments","frags","statement","spreads","setsToVisit","collectedNames","nodesToVisit","spread","SDLValidationContext","ValidationContext","_typeInfo","_variableUsages","_recursiveVariableUsages","newUsages","getDefaultValue","getVariableUsages","getEnumValue","validate","documentAST","rules","maxErrors","assertValidSchema","abortObj","rule","e","validateSDL","schemaToExtend","valueFromAST","variableValue","coercedValues","isMissingVariable","itemValue","coercedObj","_error","getDirectiveValues","directiveDef","variableValues","argumentNode","isNull","prop","hasOwnProperty","getArgumentValues","buildClientSchema","introspection","__schema","schemaIntrospection","typeIntrospection","scalarIntrospection","objectIntrospection","buildImplementationsList","buildFieldDefMap","interfaceIntrospection","unionIntrospection","unionIntrospectionStr","getObjectType","buildUnionDef","enumIntrospection","enumIntrospectionStr","valueIntrospection","buildEnumDef","inputObjectIntrospection","inputObjectIntrospectionStr","buildInputValueDefMap","buildInputObjectDef","buildType","stdType","directiveIntrospection","directiveIntrospectionStr","typeRef","itemRef","nullableRef","nullableType","assertNullableType","assertObjectType","getInterfaceType","assertInterfaceType","implementingIntrospection","implementingIntrospectionStr","fieldIntrospection","buildField","fieldIntrospectionStr","inputValueIntrospections","buildInputValue","inputValueIntrospection","parser","extendSchemaImpl","schemaConfig","typeDefs","typeExtensionsMap","directiveDefs","schemaDef","schemaExtensions","extendedTypeName","existingTypeExtensions","extendNamedType","stdTypeMap","replaceNamedType","getOperationTypes","toConfig","extendArg","buildArgumentMap","replaceType","isSpecifiedScalarType","extensionNode","getSpecifiedByUrl","extendScalarType","buildInterfaces","extendField","buildFieldMap","extendObjectType","extendInterfaceType","buildUnionTypes","extendUnionType","buildEnumValueMap","extendEnumType","buildInputFieldMap","extendInputObjectType","opTypes","getWrappedType","fieldConfigMap","nodeFields","getDeprecationReason","argConfigMap","inputFieldMap","fieldsNodes","enumValueMap","interfacesNodes","typeNodes","extensionNodes","allNodes","buildASTSchema","assumeValidSDL","assertValidSDL","stdDirective","specifiedRulesToBeRemoved","defaultValidationRules","includes","GraphQLSchemaValidationError","validationErrors","isMetaFieldName","startsWith","isNotNullOrUndefined","valueFromValueNode","filePathForNode","compileToIR","document","fragmentNodeMap","operations","fragmentMap","referencedTypes","compileOperation","fragmentNode","compileFragment","operationDefinition","filePath","rootType","getOperationRootType","compileSelectionSet","fragmentDefinition","selectionSetNode","visitedFragments","selectionNode","unwrappedFieldType","argDefType","compileSelection","introspectionResult","payload","data","documents","doc","concatAST"],"mappings":"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"}